/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./node_modules/next/dist/shared/lib/dynamic.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/dynamic.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  noSSR: function () {\n    return noSSR;\n  },\n  default: function () {\n    return dynamic;\n  }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst _loadable = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ./loadable */ \"./node_modules/next/dist/shared/lib/loadable.js\"));\nconst isServerSide = \"object\" === \"undefined\";\n// Normalize loader to return the module as form { default: Component } for `React.lazy`.\n// Also for backward compatible since next/dynamic allows to resolve a component directly with loader\n// Client component reference proxy need to be converted to a module.\nfunction convertModule(mod) {\n  return {\n    default: (mod == null ? void 0 : mod.default) || mod\n  };\n}\nfunction noSSR(LoadableInitializer, loadableOptions) {\n  // Removing webpack and modules means react-loadable won't try preloading\n  delete loadableOptions.webpack;\n  delete loadableOptions.modules;\n  // This check is necessary to prevent react-loadable from initializing on the server\n  if (!isServerSide) {\n    return LoadableInitializer(loadableOptions);\n  }\n  const Loading = loadableOptions.loading;\n  // This will only be rendered on the server side\n  return () => /*#__PURE__*/_react.default.createElement(Loading, {\n    error: null,\n    isLoading: true,\n    pastDelay: false,\n    timedOut: false\n  });\n}\nfunction dynamic(dynamicOptions, options) {\n  let loadableFn = _loadable.default;\n  let loadableOptions = {\n    // A loading component is not required, so we default it\n    loading: param => {\n      let {\n        error,\n        isLoading,\n        pastDelay\n      } = param;\n      if (!pastDelay) return null;\n      if (true) {\n        if (isLoading) {\n          return null;\n        }\n        if (error) {\n          return /*#__PURE__*/_react.default.createElement(\"p\", null, error.message, /*#__PURE__*/_react.default.createElement(\"br\", null), error.stack);\n        }\n      }\n      return null;\n    }\n  };\n  // Support for direct import(), eg: dynamic(import('../hello-world'))\n  // Note that this is only kept for the edge case where someone is passing in a promise as first argument\n  // The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))\n  // To make sure we don't execute the import without rendering first\n  if (dynamicOptions instanceof Promise) {\n    loadableOptions.loader = () => dynamicOptions;\n    // Support for having import as a function, eg: dynamic(() => import('../hello-world'))\n  } else if (typeof dynamicOptions === \"function\") {\n    loadableOptions.loader = dynamicOptions;\n    // Support for having first argument being options, eg: dynamic({loader: import('../hello-world')})\n  } else if (typeof dynamicOptions === \"object\") {\n    loadableOptions = {\n      ...loadableOptions,\n      ...dynamicOptions\n    };\n  }\n  // Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})\n  loadableOptions = {\n    ...loadableOptions,\n    ...options\n  };\n  const loaderFn = loadableOptions.loader;\n  const loader = () => loaderFn != null ? loaderFn().then(convertModule) : Promise.resolve(convertModule(() => null));\n  // coming from build/babel/plugins/react-loadable-plugin.js\n  if (loadableOptions.loadableGenerated) {\n    loadableOptions = {\n      ...loadableOptions,\n      ...loadableOptions.loadableGenerated\n    };\n    delete loadableOptions.loadableGenerated;\n  }\n  // support for disabling server side rendering, eg: dynamic(() => import('../hello-world'), {ssr: false}).\n  if (typeof loadableOptions.ssr === \"boolean\" && !loadableOptions.ssr) {\n    delete loadableOptions.webpack;\n    delete loadableOptions.modules;\n    return noSSR(loadableFn, loadableOptions);\n  }\n  return loadableFn({\n    ...loadableOptions,\n    loader: loader\n  });\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n  Object.defineProperty(exports.default, \"__esModule\", {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n} //# sourceMappingURL=dynamic.js.map\n\n;\n// Wrapped in an IIFE to avoid polluting the global scope\n;\n(function () {\n  var _a, _b;\n  // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n  if (typeof self !== 'undefined' &&\n  // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports;\n    // @ts-ignore __webpack_module__ is global\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n    // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n      module.hot.accept();\n      // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvZHluYW1pYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQ3pDRyxLQUFBLEVBQU87QUFDWCxDQUFDLEVBQUM7QUFDRixNQUFNQyxDQUdMO0FBQ0QsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0VBQ3hCLEtBQUksSUFBSUMsSUFBQSxJQUFRRCxHQUFBLEVBQUlULE1BQUEsQ0FBT0MsY0FBYyxDQUFDTyxNQUFBLEVBQVFFLElBQUEsRUFBTTtJQUNwREMsVUFBQSxFQUFZO0lBQ1pDLEdBQUEsRUFBS0gsR0FBRyxDQUFDQyxJQUFBO0VBQ2I7QUFDSjtBQUNBSCxPQUFBLENBQVFMLE9BQUEsRUFBUztFQUNiRyxLQUFBLEVBQU8sU0FBQUEsQ0FBQTtJQUNILE9BQU9BLEtBQUE7RUFDWDtFQUNBQyxPQUFBLEVBQVMsU0FBQUEsQ0FBQTtJQUNMLE9BQU9PLE9BQUE7RUFDWDtBQUNKO0FBQ0EsTUFBTUMsd0JBQUEsR0FBMkJDLG1CQUFBLENBQVEsNEdBQXlDO0FBQ2xGLE1BQU1DLE1BQUEsR0FBUyxhQUFjRix3QkFBQSxDQUF5QkcsQ0FBQyxDQUFDRixtQkFBQSxDQUFRLDRDQUFPO0FBQ3ZFLE1BQU1HLFNBQUEsR0FBWSxhQUFjSix3QkFBQSxDQUF5QkcsQ0FBQyxDQUFDRixtQkFBQSxDQUFRLG1FQUFZO0FBQy9FLE1BQU1JLFlBQUEsR0FBZSxhQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxTQUFTQyxjQUFjQyxHQUFHO0VBQ3RCLE9BQU87SUFDSGYsT0FBQSxFQUFTLENBQUNlLEdBQUEsSUFBTyxPQUFPLEtBQUssSUFBSUEsR0FBQSxDQUFJZixPQUFPLEtBQUtlO0VBQ3JEO0FBQ0o7QUFDQSxTQUFTaEIsTUFBTWlCLG1CQUFtQixFQUFFQyxlQUFlO0VBQy9DO0VBQ0EsT0FBT0EsZUFBQSxDQUFnQkMsT0FBTztFQUM5QixPQUFPRCxlQUFBLENBQWdCRSxPQUFPO0VBQzlCO0VBQ0EsSUFBSSxDQUFDTixZQUFBLEVBQWM7SUFDZixPQUFPRyxtQkFBQSxDQUFvQkMsZUFBQTtFQUMvQjtFQUNBLE1BQU1HLE9BQUEsR0FBVUgsZUFBQSxDQUFnQkksT0FBTztFQUN2QztFQUNBLE9BQU8sTUFBSSxhQUFjWCxNQUFBLENBQU9WLE9BQU8sQ0FBQ3NCLGFBQWEsQ0FBQ0YsT0FBQSxFQUFTO0lBQ3ZERyxLQUFBLEVBQU87SUFDUEMsU0FBQSxFQUFXO0lBQ1hDLFNBQUEsRUFBVztJQUNYQyxRQUFBLEVBQVU7RUFDZDtBQUNSO0FBQ0EsU0FBU25CLFFBQVFvQixjQUFjLEVBQUVDLE9BQU87RUFDcEMsSUFBSUMsVUFBQSxHQUFhakIsU0FBQSxDQUFVWixPQUFPO0VBQ2xDLElBQUlpQixlQUFBLEdBQWtCO0lBQ2xCO0lBQ0FJLE9BQUEsRUFBVVMsS0FBQTtNQUNOLElBQUk7UUFBRVAsS0FBSztRQUFHQyxTQUFTO1FBQUdDO01BQVMsQ0FBRyxHQUFHSyxLQUFBO01BQ3pDLElBQUksQ0FBQ0wsU0FBQSxFQUFXLE9BQU87TUFDdkIsSUFBSSxJQUFxQyxFQUFFO1FBQ3ZDLElBQUlELFNBQUEsRUFBVztVQUNYLE9BQU87UUFDWDtRQUNBLElBQUlELEtBQUEsRUFBTztVQUNQLE9BQU8sYUFBY2IsTUFBQSxDQUFPVixPQUFPLENBQUNzQixhQUFhLENBQUMsS0FBSyxNQUFNQyxLQUFBLENBQU1RLE9BQU8sRUFBRSxhQUFjckIsTUFBQSxDQUFPVixPQUFPLENBQUNzQixhQUFhLENBQUMsTUFBTSxPQUFPQyxLQUFBLENBQU1TLEtBQUs7UUFDbko7TUFDSjtNQUNBLE9BQU87SUFDWDtFQUNKO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJTCxjQUFBLFlBQTBCTSxPQUFBLEVBQVM7SUFDbkNoQixlQUFBLENBQWdCaUIsTUFBTSxHQUFHLE1BQUlQLGNBQUE7SUFDakM7RUFDQSxPQUFPLElBQUksT0FBT0EsY0FBQSxLQUFtQixZQUFZO0lBQzdDVixlQUFBLENBQWdCaUIsTUFBTSxHQUFHUCxjQUFBO0lBQzdCO0VBQ0EsT0FBTyxJQUFJLE9BQU9BLGNBQUEsS0FBbUIsVUFBVTtJQUMzQ1YsZUFBQSxHQUFrQjtNQUNkLEdBQUdBLGVBQWU7TUFDbEIsR0FBR1U7SUFDUDtFQUNKO0VBQ0E7RUFDQVYsZUFBQSxHQUFrQjtJQUNkLEdBQUdBLGVBQWU7SUFDbEIsR0FBR1c7RUFDUDtFQUNBLE1BQU1PLFFBQUEsR0FBV2xCLGVBQUEsQ0FBZ0JpQixNQUFNO0VBQ3ZDLE1BQU1BLE1BQUEsR0FBU0EsQ0FBQSxLQUFJQyxRQUFBLElBQVksT0FBT0EsUUFBQSxHQUFXQyxJQUFJLENBQUN0QixhQUFBLElBQWlCbUIsT0FBQSxDQUFRSSxPQUFPLENBQUN2QixhQUFBLENBQWMsTUFBSTtFQUN6RztFQUNBLElBQUlHLGVBQUEsQ0FBZ0JxQixpQkFBaUIsRUFBRTtJQUNuQ3JCLGVBQUEsR0FBa0I7TUFDZCxHQUFHQSxlQUFlO01BQ2xCLEdBQUdBLGVBQUEsQ0FBZ0JxQjtJQUN2QjtJQUNBLE9BQU9yQixlQUFBLENBQWdCcUIsaUJBQWlCO0VBQzVDO0VBQ0E7RUFDQSxJQUFJLE9BQU9yQixlQUFBLENBQWdCc0IsR0FBRyxLQUFLLGFBQWEsQ0FBQ3RCLGVBQUEsQ0FBZ0JzQixHQUFHLEVBQUU7SUFDbEUsT0FBT3RCLGVBQUEsQ0FBZ0JDLE9BQU87SUFDOUIsT0FBT0QsZUFBQSxDQUFnQkUsT0FBTztJQUM5QixPQUFPcEIsS0FBQSxDQUFNOEIsVUFBQSxFQUFZWixlQUFBO0VBQzdCO0VBQ0EsT0FBT1ksVUFBQSxDQUFXO0lBQ2QsR0FBR1osZUFBZTtJQUNsQmlCLE1BQUEsRUFBUUE7RUFDWjtBQUNKO0FBRUEsSUFBSSxDQUFDLE9BQU90QyxPQUFBLENBQVFJLE9BQU8sS0FBSyxjQUFlLE9BQU9KLE9BQUEsQ0FBUUksT0FBTyxLQUFLLFlBQVlKLE9BQUEsQ0FBUUksT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPSixPQUFBLENBQVFJLE9BQU8sQ0FBQ3dDLFVBQVUsS0FBSyxhQUFhO0VBQ3JLOUMsTUFBQSxDQUFPQyxjQUFjLENBQUNDLE9BQUEsQ0FBUUksT0FBTyxFQUFFLGNBQWM7SUFBRUgsS0FBQSxFQUFPO0VBQUs7RUFDbkVILE1BQUEsQ0FBTytDLE1BQU0sQ0FBQzdDLE9BQUEsQ0FBUUksT0FBTyxFQUFFSixPQUFBO0VBQy9CRSxNQUFBLENBQU9GLE9BQU8sR0FBR0EsT0FBQSxDQUFRSSxPQUFPO0FBQ2xDLEVBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2R5bmFtaWMuanM/ZTI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5vU1NSOiBudWxsLFxuICAgIGRlZmF1bHQ6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgbm9TU1I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbm9TU1I7XG4gICAgfSxcbiAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGR5bmFtaWM7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XCIpO1xuY29uc3QgX3JlYWN0ID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgX2xvYWRhYmxlID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwiLi9sb2FkYWJsZVwiKSk7XG5jb25zdCBpc1NlcnZlclNpZGUgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xuLy8gTm9ybWFsaXplIGxvYWRlciB0byByZXR1cm4gdGhlIG1vZHVsZSBhcyBmb3JtIHsgZGVmYXVsdDogQ29tcG9uZW50IH0gZm9yIGBSZWFjdC5sYXp5YC5cbi8vIEFsc28gZm9yIGJhY2t3YXJkIGNvbXBhdGlibGUgc2luY2UgbmV4dC9keW5hbWljIGFsbG93cyB0byByZXNvbHZlIGEgY29tcG9uZW50IGRpcmVjdGx5IHdpdGggbG9hZGVyXG4vLyBDbGllbnQgY29tcG9uZW50IHJlZmVyZW5jZSBwcm94eSBuZWVkIHRvIGJlIGNvbnZlcnRlZCB0byBhIG1vZHVsZS5cbmZ1bmN0aW9uIGNvbnZlcnRNb2R1bGUobW9kKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVmYXVsdDogKG1vZCA9PSBudWxsID8gdm9pZCAwIDogbW9kLmRlZmF1bHQpIHx8IG1vZFxuICAgIH07XG59XG5mdW5jdGlvbiBub1NTUihMb2FkYWJsZUluaXRpYWxpemVyLCBsb2FkYWJsZU9wdGlvbnMpIHtcbiAgICAvLyBSZW1vdmluZyB3ZWJwYWNrIGFuZCBtb2R1bGVzIG1lYW5zIHJlYWN0LWxvYWRhYmxlIHdvbid0IHRyeSBwcmVsb2FkaW5nXG4gICAgZGVsZXRlIGxvYWRhYmxlT3B0aW9ucy53ZWJwYWNrO1xuICAgIGRlbGV0ZSBsb2FkYWJsZU9wdGlvbnMubW9kdWxlcztcbiAgICAvLyBUaGlzIGNoZWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IHJlYWN0LWxvYWRhYmxlIGZyb20gaW5pdGlhbGl6aW5nIG9uIHRoZSBzZXJ2ZXJcbiAgICBpZiAoIWlzU2VydmVyU2lkZSkge1xuICAgICAgICByZXR1cm4gTG9hZGFibGVJbml0aWFsaXplcihsb2FkYWJsZU9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBMb2FkaW5nID0gbG9hZGFibGVPcHRpb25zLmxvYWRpbmc7XG4gICAgLy8gVGhpcyB3aWxsIG9ubHkgYmUgcmVuZGVyZWQgb24gdGhlIHNlcnZlciBzaWRlXG4gICAgcmV0dXJuICgpPT4vKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywge1xuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBwYXN0RGVsYXk6IGZhbHNlLFxuICAgICAgICAgICAgdGltZWRPdXQ6IGZhbHNlXG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gZHluYW1pYyhkeW5hbWljT3B0aW9ucywgb3B0aW9ucykge1xuICAgIGxldCBsb2FkYWJsZUZuID0gX2xvYWRhYmxlLmRlZmF1bHQ7XG4gICAgbGV0IGxvYWRhYmxlT3B0aW9ucyA9IHtcbiAgICAgICAgLy8gQSBsb2FkaW5nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQsIHNvIHdlIGRlZmF1bHQgaXRcbiAgICAgICAgbG9hZGluZzogKHBhcmFtKT0+e1xuICAgICAgICAgICAgbGV0IHsgZXJyb3IgLCBpc0xvYWRpbmcgLCBwYXN0RGVsYXkgIH0gPSBwYXJhbTtcbiAgICAgICAgICAgIGlmICghcGFzdERlbGF5KSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgZXJyb3IubWVzc2FnZSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnJcIiwgbnVsbCksIGVycm9yLnN0YWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gU3VwcG9ydCBmb3IgZGlyZWN0IGltcG9ydCgpLCBlZzogZHluYW1pYyhpbXBvcnQoJy4uL2hlbGxvLXdvcmxkJykpXG4gICAgLy8gTm90ZSB0aGF0IHRoaXMgaXMgb25seSBrZXB0IGZvciB0aGUgZWRnZSBjYXNlIHdoZXJlIHNvbWVvbmUgaXMgcGFzc2luZyBpbiBhIHByb21pc2UgYXMgZmlyc3QgYXJndW1lbnRcbiAgICAvLyBUaGUgcmVhY3QtbG9hZGFibGUgYmFiZWwgcGx1Z2luIHdpbGwgdHVybiBkeW5hbWljKGltcG9ydCgnLi4vaGVsbG8td29ybGQnKSkgaW50byBkeW5hbWljKCgpID0+IGltcG9ydCgnLi4vaGVsbG8td29ybGQnKSlcbiAgICAvLyBUbyBtYWtlIHN1cmUgd2UgZG9uJ3QgZXhlY3V0ZSB0aGUgaW1wb3J0IHdpdGhvdXQgcmVuZGVyaW5nIGZpcnN0XG4gICAgaWYgKGR5bmFtaWNPcHRpb25zIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBsb2FkYWJsZU9wdGlvbnMubG9hZGVyID0gKCk9PmR5bmFtaWNPcHRpb25zO1xuICAgIC8vIFN1cHBvcnQgZm9yIGhhdmluZyBpbXBvcnQgYXMgYSBmdW5jdGlvbiwgZWc6IGR5bmFtaWMoKCkgPT4gaW1wb3J0KCcuLi9oZWxsby13b3JsZCcpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR5bmFtaWNPcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgbG9hZGFibGVPcHRpb25zLmxvYWRlciA9IGR5bmFtaWNPcHRpb25zO1xuICAgIC8vIFN1cHBvcnQgZm9yIGhhdmluZyBmaXJzdCBhcmd1bWVudCBiZWluZyBvcHRpb25zLCBlZzogZHluYW1pYyh7bG9hZGVyOiBpbXBvcnQoJy4uL2hlbGxvLXdvcmxkJyl9KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGR5bmFtaWNPcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGxvYWRhYmxlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLmxvYWRhYmxlT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLmR5bmFtaWNPcHRpb25zXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFN1cHBvcnQgZm9yIHBhc3Npbmcgb3B0aW9ucywgZWc6IGR5bmFtaWMoaW1wb3J0KCcuLi9oZWxsby13b3JsZCcpLCB7bG9hZGluZzogKCkgPT4gPHA+TG9hZGluZyBzb21ldGhpbmc8L3A+fSlcbiAgICBsb2FkYWJsZU9wdGlvbnMgPSB7XG4gICAgICAgIC4uLmxvYWRhYmxlT3B0aW9ucyxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG4gICAgY29uc3QgbG9hZGVyRm4gPSBsb2FkYWJsZU9wdGlvbnMubG9hZGVyO1xuICAgIGNvbnN0IGxvYWRlciA9ICgpPT5sb2FkZXJGbiAhPSBudWxsID8gbG9hZGVyRm4oKS50aGVuKGNvbnZlcnRNb2R1bGUpIDogUHJvbWlzZS5yZXNvbHZlKGNvbnZlcnRNb2R1bGUoKCk9Pm51bGwpKTtcbiAgICAvLyBjb21pbmcgZnJvbSBidWlsZC9iYWJlbC9wbHVnaW5zL3JlYWN0LWxvYWRhYmxlLXBsdWdpbi5qc1xuICAgIGlmIChsb2FkYWJsZU9wdGlvbnMubG9hZGFibGVHZW5lcmF0ZWQpIHtcbiAgICAgICAgbG9hZGFibGVPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4ubG9hZGFibGVPcHRpb25zLFxuICAgICAgICAgICAgLi4ubG9hZGFibGVPcHRpb25zLmxvYWRhYmxlR2VuZXJhdGVkXG4gICAgICAgIH07XG4gICAgICAgIGRlbGV0ZSBsb2FkYWJsZU9wdGlvbnMubG9hZGFibGVHZW5lcmF0ZWQ7XG4gICAgfVxuICAgIC8vIHN1cHBvcnQgZm9yIGRpc2FibGluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGVnOiBkeW5hbWljKCgpID0+IGltcG9ydCgnLi4vaGVsbG8td29ybGQnKSwge3NzcjogZmFsc2V9KS5cbiAgICBpZiAodHlwZW9mIGxvYWRhYmxlT3B0aW9ucy5zc3IgPT09IFwiYm9vbGVhblwiICYmICFsb2FkYWJsZU9wdGlvbnMuc3NyKSB7XG4gICAgICAgIGRlbGV0ZSBsb2FkYWJsZU9wdGlvbnMud2VicGFjaztcbiAgICAgICAgZGVsZXRlIGxvYWRhYmxlT3B0aW9ucy5tb2R1bGVzO1xuICAgICAgICByZXR1cm4gbm9TU1IobG9hZGFibGVGbiwgbG9hZGFibGVPcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvYWRhYmxlRm4oe1xuICAgICAgICAuLi5sb2FkYWJsZU9wdGlvbnMsXG4gICAgICAgIGxvYWRlcjogbG9hZGVyXG4gICAgfSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR5bmFtaWMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwibm9TU1IiLCJkZWZhdWx0IiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZHluYW1pYyIsIl9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfIiwiX2xvYWRhYmxlIiwiaXNTZXJ2ZXJTaWRlIiwiY29udmVydE1vZHVsZSIsIm1vZCIsIkxvYWRhYmxlSW5pdGlhbGl6ZXIiLCJsb2FkYWJsZU9wdGlvbnMiLCJ3ZWJwYWNrIiwibW9kdWxlcyIsIkxvYWRpbmciLCJsb2FkaW5nIiwiY3JlYXRlRWxlbWVudCIsImVycm9yIiwiaXNMb2FkaW5nIiwicGFzdERlbGF5IiwidGltZWRPdXQiLCJkeW5hbWljT3B0aW9ucyIsIm9wdGlvbnMiLCJsb2FkYWJsZUZuIiwicGFyYW0iLCJtZXNzYWdlIiwic3RhY2siLCJQcm9taXNlIiwibG9hZGVyIiwibG9hZGVyRm4iLCJ0aGVuIiwicmVzb2x2ZSIsImxvYWRhYmxlR2VuZXJhdGVkIiwic3NyIiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/dynamic.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/loadable-context.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/loadable-context.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"LoadableContext\", ({\n  enumerable: true,\n  get: function () {\n    return LoadableContext;\n  }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst LoadableContext = _react.default.createContext(null);\nif (true) {\n  LoadableContext.displayName = \"LoadableContext\";\n} //# sourceMappingURL=loadable-context.js.map\n\n;\n// Wrapped in an IIFE to avoid polluting the global scope\n;\n(function () {\n  var _a, _b;\n  // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n  if (typeof self !== 'undefined' &&\n  // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports;\n    // @ts-ignore __webpack_module__ is global\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n    // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n      module.hot.accept();\n      // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbG9hZGFibGUtY29udGV4dC5qcyIsIm1hcHBpbmdzIjoib0RBQ2E7O0FBQ2JBLDhDQUE2QztFQUN6Q0csS0FBQSxFQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILG1EQUFrRDtFQUM5Q0ksVUFBQSxFQUFZO0VBQ1pDLEdBQUEsRUFBSyxTQUFBQSxDQUFBO0lBQ0QsT0FBT0MsZUFBQTtFQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsd0JBQUEsR0FBMkJDLG1CQUFBLENBQVEsNEdBQXlDO0FBQ2xGLE1BQU1DLE1BQUEsR0FBUyxhQUFjRix3QkFBQSxDQUF5QkcsQ0FBQyxDQUFDRixtQkFBQSxDQUFRLDRDQUFPO0FBRXZFLE1BQU1GLGVBQUEsR0FBa0JHLE1BQUEsQ0FBT0UsT0FBTyxDQUFDQyxhQUFhLENBQUM7QUFDckQsSUFBSSxJQUFxQyxFQUFFO0VBQ3ZDTixlQUFBLENBQWdCTyxXQUFXLEdBQUc7QUFDbEMsRUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbG9hZGFibGUtY29udGV4dC5qcz9lYzI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2FkYWJsZUNvbnRleHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIExvYWRhYmxlQ29udGV4dDtcbiAgICB9XG59KTtcbmNvbnN0IF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvXy9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHRcIik7XG5jb25zdCBfcmVhY3QgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5fKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmNvbnN0IExvYWRhYmxlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgTG9hZGFibGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2FkYWJsZUNvbnRleHRcIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZGFibGUtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiTG9hZGFibGVDb250ZXh0IiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl8iLCJkZWZhdWx0IiwiY3JlYXRlQ29udGV4dCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/loadable-context.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/loadable.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/loadable.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// TODO: Remove use of `any` type.\n/**\n@copyright (c) 2017-present James Kyle <me@thejameskyle.com>\n MIT License\n Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\n*/ // https://github.com/jamiebuilds/react-loadable/blob/v5.5.0/src/index.js\n// Modified to be compatible with webpack 4 / Next.js\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst _loadablecontext = __webpack_require__(/*! ./loadable-context */ \"./node_modules/next/dist/shared/lib/loadable-context.js\");\nfunction resolve(obj) {\n  return obj && obj.default ? obj.default : obj;\n}\nconst ALL_INITIALIZERS = [];\nconst READY_INITIALIZERS = [];\nlet initialized = false;\nfunction load(loader) {\n  let promise = loader();\n  let state = {\n    loading: true,\n    loaded: null,\n    error: null\n  };\n  state.promise = promise.then(loaded => {\n    state.loading = false;\n    state.loaded = loaded;\n    return loaded;\n  }).catch(err => {\n    state.loading = false;\n    state.error = err;\n    throw err;\n  });\n  return state;\n}\nfunction createLoadableComponent(loadFn, options) {\n  var _s = $RefreshSig$(),\n    _s1 = $RefreshSig$();\n  let opts = Object.assign({\n    loader: null,\n    loading: null,\n    delay: 200,\n    timeout: null,\n    webpack: null,\n    modules: null\n  }, options);\n  /** @type LoadableSubscription */\n  let subscription = null;\n  function init() {\n    if (!subscription) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const sub = new LoadableSubscription(loadFn, opts);\n      subscription = {\n        getCurrentValue: sub.getCurrentValue.bind(sub),\n        subscribe: sub.subscribe.bind(sub),\n        retry: sub.retry.bind(sub),\n        promise: sub.promise.bind(sub)\n      };\n    }\n    return subscription.promise();\n  }\n  // Server only\n  if (false) {}\n  // Client only\n  if (!initialized && \"object\" !== \"undefined\") {\n    // require.resolveWeak check is needed for environments that don't have it available like Jest\n    const moduleIds = opts.webpack && \"function\" === \"function\" ? opts.webpack() : opts.modules;\n    if (moduleIds) {\n      READY_INITIALIZERS.push(ids => {\n        for (const moduleId of moduleIds) {\n          if (ids.includes(moduleId)) {\n            return init();\n          }\n        }\n      });\n    }\n  }\n  function useLoadableModule() {\n    _s();\n    init();\n    const context = _react.default.useContext(_loadablecontext.LoadableContext);\n    if (context && Array.isArray(opts.modules)) {\n      opts.modules.forEach(moduleName => {\n        context(moduleName);\n      });\n    }\n  }\n  _s(useLoadableModule, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  function LoadableComponent(props, ref) {\n    _s1();\n    useLoadableModule();\n    const state = _react.default.useSyncExternalStore(subscription.subscribe, subscription.getCurrentValue, subscription.getCurrentValue);\n    _react.default.useImperativeHandle(ref, () => ({\n      retry: subscription.retry\n    }), []);\n    return _react.default.useMemo(() => {\n      if (state.loading || state.error) {\n        return /*#__PURE__*/_react.default.createElement(opts.loading, {\n          isLoading: state.loading,\n          pastDelay: state.pastDelay,\n          timedOut: state.timedOut,\n          error: state.error,\n          retry: subscription.retry\n        });\n      } else if (state.loaded) {\n        return /*#__PURE__*/_react.default.createElement(resolve(state.loaded), props);\n      } else {\n        return null;\n      }\n    }, [props, state]);\n  }\n  _s1(LoadableComponent, \"FetqI339RA+IfltT8VNzX8RMZ2Q=\", false, function () {\n    return [useLoadableModule];\n  });\n  LoadableComponent.preload = () => init();\n  LoadableComponent.displayName = \"LoadableComponent\";\n  return /*#__PURE__*/_react.default.forwardRef(LoadableComponent);\n}\nclass LoadableSubscription {\n  promise() {\n    return this._res.promise;\n  }\n  retry() {\n    this._clearTimeouts();\n    this._res = this._loadFn(this._opts.loader);\n    this._state = {\n      pastDelay: false,\n      timedOut: false\n    };\n    const {\n      _res: res,\n      _opts: opts\n    } = this;\n    if (res.loading) {\n      if (typeof opts.delay === \"number\") {\n        if (opts.delay === 0) {\n          this._state.pastDelay = true;\n        } else {\n          this._delay = setTimeout(() => {\n            this._update({\n              pastDelay: true\n            });\n          }, opts.delay);\n        }\n      }\n      if (typeof opts.timeout === \"number\") {\n        this._timeout = setTimeout(() => {\n          this._update({\n            timedOut: true\n          });\n        }, opts.timeout);\n      }\n    }\n    this._res.promise.then(() => {\n      this._update({});\n      this._clearTimeouts();\n    }).catch(_err => {\n      this._update({});\n      this._clearTimeouts();\n    });\n    this._update({});\n  }\n  _update(partial) {\n    this._state = {\n      ...this._state,\n      error: this._res.error,\n      loaded: this._res.loaded,\n      loading: this._res.loading,\n      ...partial\n    };\n    this._callbacks.forEach(callback => callback());\n  }\n  _clearTimeouts() {\n    clearTimeout(this._delay);\n    clearTimeout(this._timeout);\n  }\n  getCurrentValue() {\n    return this._state;\n  }\n  subscribe(callback) {\n    this._callbacks.add(callback);\n    return () => {\n      this._callbacks.delete(callback);\n    };\n  }\n  constructor(loadFn, opts) {\n    this._loadFn = loadFn;\n    this._opts = opts;\n    this._callbacks = new Set();\n    this._delay = null;\n    this._timeout = null;\n    this.retry();\n  }\n}\nfunction Loadable(opts) {\n  return createLoadableComponent(load, opts);\n}\n_c = Loadable;\nfunction flushInitializers(initializers, ids) {\n  let promises = [];\n  while (initializers.length) {\n    let init = initializers.pop();\n    promises.push(init(ids));\n  }\n  return Promise.all(promises).then(() => {\n    if (initializers.length) {\n      return flushInitializers(initializers, ids);\n    }\n  });\n}\nLoadable.preloadAll = () => {\n  return new Promise((resolveInitializers, reject) => {\n    flushInitializers(ALL_INITIALIZERS).then(resolveInitializers, reject);\n  });\n};\nLoadable.preloadReady = ids => {\n  if (ids === void 0) ids = [];\n  return new Promise(resolvePreload => {\n    const res = () => {\n      initialized = true;\n      return resolvePreload();\n    };\n    // We always will resolve, errors should be handled within loading UIs.\n    flushInitializers(READY_INITIALIZERS, ids).then(res, res);\n  });\n};\nif (true) {\n  window.__NEXT_PRELOADREADY = Loadable.preloadReady;\n}\nconst _default = Loadable; //# sourceMappingURL=loadable.js.map\nvar _c;\n$RefreshReg$(_c, \"Loadable\");\n;\n// Wrapped in an IIFE to avoid polluting the global scope\n;\n(function () {\n  var _a, _b;\n  // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n  if (typeof self !== 'undefined' &&\n  // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports;\n    // @ts-ignore __webpack_module__ is global\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n    // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n      // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n      module.hot.accept();\n      // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/loadable.js\n"));

/***/ }),

/***/ "./node_modules/next/dynamic.js":
/*!**************************************!*\
  !*** ./node_modules/next/dynamic.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/dynamic */ \"./node_modules/next/dist/shared/lib/dynamic.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9keW5hbWljLmpzIiwibWFwcGluZ3MiOiJBQUFBQSx1SEFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZHluYW1pYy5qcz83M2Q0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3NoYXJlZC9saWIvZHluYW1pYycpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dynamic.js\n"));

/***/ }),

/***/ "./node_modules/next/router.js":
/*!*************************************!*\
  !*** ./node_modules/next/router.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/router */ \"./node_modules/next/dist/client/router.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9yb3V0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLDZHQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9yb3V0ZXIuanM/MWJiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9jbGllbnQvcm91dGVyJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/router.js\n"));

/***/ }),

/***/ "../../../../node_modules/base64-js/index.js":
/*!***************************************************!*\
  !*** ../../../../node_modules/base64-js/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\nfunction getLens(b64) {\n  var len = b64.length;\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0;\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  return arr;\n}\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('');\n}\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n  return parts.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsa0JBQWtCLEdBQUdDLFVBQVU7QUFDL0JELG1CQUFtQixHQUFHRSxXQUFXO0FBQ2pDRixxQkFBcUIsR0FBR0csYUFBYTtBQUVyQyxJQUFJQyxNQUFNLEdBQUcsRUFBRTtBQUNmLElBQUlDLFNBQVMsR0FBRyxFQUFFO0FBQ2xCLElBQUlDLEdBQUcsR0FBRyxPQUFPQyxVQUFVLEtBQUssV0FBVyxHQUFHQSxVQUFVLEdBQUdDLEtBQUs7QUFFaEUsSUFBSUMsSUFBSSxHQUFHLGtFQUFrRTtBQUM3RSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR0YsSUFBSSxDQUFDRyxNQUFNLEVBQUVGLENBQUMsR0FBR0MsR0FBRyxFQUFFLEVBQUVELENBQUMsRUFBRTtFQUMvQ04sTUFBTSxDQUFDTSxDQUFDLENBQUMsR0FBR0QsSUFBSSxDQUFDQyxDQUFDLENBQUM7RUFDbkJMLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDSSxVQUFVLENBQUNILENBQUMsQ0FBQyxDQUFDLEdBQUdBLENBQUM7QUFDbkM7O0FBRUE7QUFDQTtBQUNBTCxTQUFTLENBQUMsR0FBRyxDQUFDUSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO0FBQ2pDUixTQUFTLENBQUMsR0FBRyxDQUFDUSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO0FBRWpDLFNBQVNDLE9BQU9BLENBQUVDLEdBQUcsRUFBRTtFQUNyQixJQUFJSixHQUFHLEdBQUdJLEdBQUcsQ0FBQ0gsTUFBTTtFQUVwQixJQUFJRCxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNmLE1BQU0sSUFBSUssS0FBSyxDQUFDLGdEQUFnRCxDQUFDO0VBQ25FOztFQUVBO0VBQ0E7RUFDQSxJQUFJQyxRQUFRLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLEdBQUcsQ0FBQztFQUMvQixJQUFJRCxRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQUVBLFFBQVEsR0FBR04sR0FBRztFQUVuQyxJQUFJUSxlQUFlLEdBQUdGLFFBQVEsS0FBS04sR0FBRyxHQUNsQyxDQUFDLEdBQ0QsQ0FBQyxHQUFJTSxRQUFRLEdBQUcsQ0FBRTtFQUV0QixPQUFPLENBQUNBLFFBQVEsRUFBRUUsZUFBZSxDQUFDO0FBQ3BDOztBQUVBO0FBQ0EsU0FBU2xCLFVBQVVBLENBQUVjLEdBQUcsRUFBRTtFQUN4QixJQUFJSyxJQUFJLEdBQUdOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0VBQ3ZCLElBQUlFLFFBQVEsR0FBR0csSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN0QixJQUFJRCxlQUFlLEdBQUdDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDN0IsT0FBUSxDQUFDSCxRQUFRLEdBQUdFLGVBQWUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFJQSxlQUFlO0FBQ2pFO0FBRUEsU0FBU0UsV0FBV0EsQ0FBRU4sR0FBRyxFQUFFRSxRQUFRLEVBQUVFLGVBQWUsRUFBRTtFQUNwRCxPQUFRLENBQUNGLFFBQVEsR0FBR0UsZUFBZSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUlBLGVBQWU7QUFDakU7QUFFQSxTQUFTakIsV0FBV0EsQ0FBRWEsR0FBRyxFQUFFO0VBQ3pCLElBQUlPLEdBQUc7RUFDUCxJQUFJRixJQUFJLEdBQUdOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0VBQ3ZCLElBQUlFLFFBQVEsR0FBR0csSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN0QixJQUFJRCxlQUFlLEdBQUdDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFFN0IsSUFBSUcsR0FBRyxHQUFHLElBQUlqQixHQUFHLENBQUNlLFdBQVcsQ0FBQ04sR0FBRyxFQUFFRSxRQUFRLEVBQUVFLGVBQWUsQ0FBQyxDQUFDO0VBRTlELElBQUlLLE9BQU8sR0FBRyxDQUFDOztFQUVmO0VBQ0EsSUFBSWIsR0FBRyxHQUFHUSxlQUFlLEdBQUcsQ0FBQyxHQUN6QkYsUUFBUSxHQUFHLENBQUMsR0FDWkEsUUFBUTtFQUVaLElBQUlQLENBQUM7RUFDTCxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdDLEdBQUcsRUFBRUQsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUMzQlksR0FBRyxHQUNBakIsU0FBUyxDQUFDVSxHQUFHLENBQUNGLFVBQVUsQ0FBQ0gsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQ2xDTCxTQUFTLENBQUNVLEdBQUcsQ0FBQ0YsVUFBVSxDQUFDSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFHLEdBQ3ZDTCxTQUFTLENBQUNVLEdBQUcsQ0FBQ0YsVUFBVSxDQUFDSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFFLEdBQ3ZDTCxTQUFTLENBQUNVLEdBQUcsQ0FBQ0YsVUFBVSxDQUFDSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbENhLEdBQUcsQ0FBQ0MsT0FBTyxFQUFFLENBQUMsR0FBSUYsR0FBRyxJQUFJLEVBQUUsR0FBSSxJQUFJO0lBQ25DQyxHQUFHLENBQUNDLE9BQU8sRUFBRSxDQUFDLEdBQUlGLEdBQUcsSUFBSSxDQUFDLEdBQUksSUFBSTtJQUNsQ0MsR0FBRyxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxHQUFHRixHQUFHLEdBQUcsSUFBSTtFQUM3QjtFQUVBLElBQUlILGVBQWUsS0FBSyxDQUFDLEVBQUU7SUFDekJHLEdBQUcsR0FDQWpCLFNBQVMsQ0FBQ1UsR0FBRyxDQUFDRixVQUFVLENBQUNILENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUNqQ0wsU0FBUyxDQUFDVSxHQUFHLENBQUNGLFVBQVUsQ0FBQ0gsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRTtJQUN6Q2EsR0FBRyxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxHQUFHRixHQUFHLEdBQUcsSUFBSTtFQUM3QjtFQUVBLElBQUlILGVBQWUsS0FBSyxDQUFDLEVBQUU7SUFDekJHLEdBQUcsR0FDQWpCLFNBQVMsQ0FBQ1UsR0FBRyxDQUFDRixVQUFVLENBQUNILENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUNsQ0wsU0FBUyxDQUFDVSxHQUFHLENBQUNGLFVBQVUsQ0FBQ0gsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRSxHQUN0Q0wsU0FBUyxDQUFDVSxHQUFHLENBQUNGLFVBQVUsQ0FBQ0gsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRTtJQUN6Q2EsR0FBRyxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxHQUFJRixHQUFHLElBQUksQ0FBQyxHQUFJLElBQUk7SUFDbENDLEdBQUcsQ0FBQ0MsT0FBTyxFQUFFLENBQUMsR0FBR0YsR0FBRyxHQUFHLElBQUk7RUFDN0I7RUFFQSxPQUFPQyxHQUFHO0FBQ1o7QUFFQSxTQUFTRSxlQUFlQSxDQUFFQyxHQUFHLEVBQUU7RUFDN0IsT0FBT3RCLE1BQU0sQ0FBQ3NCLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQzdCdEIsTUFBTSxDQUFDc0IsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FDeEJ0QixNQUFNLENBQUNzQixHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUN2QnRCLE1BQU0sQ0FBQ3NCLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDdEI7QUFFQSxTQUFTQyxXQUFXQSxDQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsR0FBRyxFQUFFO0VBQ3ZDLElBQUlSLEdBQUc7RUFDUCxJQUFJUyxNQUFNLEdBQUcsRUFBRTtFQUNmLEtBQUssSUFBSXJCLENBQUMsR0FBR21CLEtBQUssRUFBRW5CLENBQUMsR0FBR29CLEdBQUcsRUFBRXBCLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDbkNZLEdBQUcsR0FDRCxDQUFFTSxLQUFLLENBQUNsQixDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUksUUFBUSxLQUMxQmtCLEtBQUssQ0FBQ2xCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUksTUFBTSxDQUFDLElBQzdCa0IsS0FBSyxDQUFDbEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN2QnFCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUCxlQUFlLENBQUNILEdBQUcsQ0FBQyxDQUFDO0VBQ25DO0VBQ0EsT0FBT1MsTUFBTSxDQUFDRSxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3hCO0FBRUEsU0FBUzlCLGFBQWFBLENBQUV5QixLQUFLLEVBQUU7RUFDN0IsSUFBSU4sR0FBRztFQUNQLElBQUlYLEdBQUcsR0FBR2lCLEtBQUssQ0FBQ2hCLE1BQU07RUFDdEIsSUFBSXNCLFVBQVUsR0FBR3ZCLEdBQUcsR0FBRyxDQUFDLEVBQUM7RUFDekIsSUFBSXdCLEtBQUssR0FBRyxFQUFFO0VBQ2QsSUFBSUMsY0FBYyxHQUFHLEtBQUssRUFBQzs7RUFFM0I7RUFDQSxLQUFLLElBQUkxQixDQUFDLEdBQUcsQ0FBQyxFQUFFMkIsSUFBSSxHQUFHMUIsR0FBRyxHQUFHdUIsVUFBVSxFQUFFeEIsQ0FBQyxHQUFHMkIsSUFBSSxFQUFFM0IsQ0FBQyxJQUFJMEIsY0FBYyxFQUFFO0lBQ3RFRCxLQUFLLENBQUNILElBQUksQ0FBQ0wsV0FBVyxDQUFDQyxLQUFLLEVBQUVsQixDQUFDLEVBQUdBLENBQUMsR0FBRzBCLGNBQWMsR0FBSUMsSUFBSSxHQUFHQSxJQUFJLEdBQUkzQixDQUFDLEdBQUcwQixjQUFlLENBQUMsQ0FBQztFQUM5Rjs7RUFFQTtFQUNBLElBQUlGLFVBQVUsS0FBSyxDQUFDLEVBQUU7SUFDcEJaLEdBQUcsR0FBR00sS0FBSyxDQUFDakIsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQndCLEtBQUssQ0FBQ0gsSUFBSSxDQUNSNUIsTUFBTSxDQUFDa0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUNoQmxCLE1BQU0sQ0FBRWtCLEdBQUcsSUFBSSxDQUFDLEdBQUksSUFBSSxDQUFDLEdBQ3pCLElBQ0YsQ0FBQztFQUNILENBQUMsTUFBTSxJQUFJWSxVQUFVLEtBQUssQ0FBQyxFQUFFO0lBQzNCWixHQUFHLEdBQUcsQ0FBQ00sS0FBSyxDQUFDakIsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSWlCLEtBQUssQ0FBQ2pCLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDNUN3QixLQUFLLENBQUNILElBQUksQ0FDUjVCLE1BQU0sQ0FBQ2tCLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FDakJsQixNQUFNLENBQUVrQixHQUFHLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQyxHQUN6QmxCLE1BQU0sQ0FBRWtCLEdBQUcsSUFBSSxDQUFDLEdBQUksSUFBSSxDQUFDLEdBQ3pCLEdBQ0YsQ0FBQztFQUNIO0VBRUEsT0FBT2EsS0FBSyxDQUFDRixJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzM4NjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImJ5dGVMZW5ndGgiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlQXJyYXkiLCJsb29rdXAiLCJyZXZMb29rdXAiLCJBcnIiLCJVaW50OEFycmF5IiwiQXJyYXkiLCJjb2RlIiwiaSIsImxlbiIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJnZXRMZW5zIiwiYjY0IiwiRXJyb3IiLCJ2YWxpZExlbiIsImluZGV4T2YiLCJwbGFjZUhvbGRlcnNMZW4iLCJsZW5zIiwiX2J5dGVMZW5ndGgiLCJ0bXAiLCJhcnIiLCJjdXJCeXRlIiwidHJpcGxldFRvQmFzZTY0IiwibnVtIiwiZW5jb2RlQ2h1bmsiLCJ1aW50OCIsInN0YXJ0IiwiZW5kIiwib3V0cHV0IiwicHVzaCIsImpvaW4iLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../../node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "../../../../node_modules/buffer/index.js":
/*!************************************************!*\
  !*** ../../../../node_modules/buffer/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"../../../../node_modules/base64-js/index.js\");\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"../../../../node_modules/ieee754/index.js\");\nvar customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation\n? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n: null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nvar K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n}\nfunction typedArraySupport() {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1);\n    var proto = {\n      foo: function () {\n        return 42;\n      }\n    };\n    Object.setPrototypeOf(proto, Uint8Array.prototype);\n    Object.setPrototypeOf(arr, proto);\n    return arr.foo() === 42;\n  } catch (e) {\n    return false;\n  }\n}\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.buffer;\n  }\n});\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.byteOffset;\n  }\n});\nfunction createBuffer(length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length);\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError('The \"string\" argument must be of type string. Received type number');\n    }\n    return allocUnsafe(arg);\n  }\n  return from(arg, encodingOrOffset, length);\n}\nBuffer.poolSize = 8192; // not used by this implementation\n\nfunction from(value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset);\n  }\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value);\n  }\n  if (value == null) {\n    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n  }\n  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n  }\n  var valueOf = value.valueOf && value.valueOf();\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length);\n  }\n  var b = fromObject(value);\n  if (b) return b;\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n  }\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length);\n};\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number');\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n  }\n}\nfunction alloc(size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(size);\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n  }\n  return createBuffer(size);\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n  assertSize(size);\n  return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding);\n  }\n  var length = byteLength(string, encoding) | 0;\n  var buf = createBuffer(length);\n  var actual = buf.write(string, encoding);\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n  }\n  return buf;\n}\nfunction fromArrayLike(array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  var buf = createBuffer(length);\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255;\n  }\n  return buf;\n}\nfunction fromArrayView(arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView);\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n  }\n  return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds');\n  }\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds');\n  }\n  var buf;\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array);\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset);\n  } else {\n    buf = new Uint8Array(array, byteOffset, length);\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\nfunction fromObject(obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    var buf = createBuffer(len);\n    if (buf.length === 0) {\n      return buf;\n    }\n    obj.copy(buf, 0, 0, len);\n    return buf;\n  }\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0);\n    }\n    return fromArrayLike(obj);\n  }\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data);\n  }\n}\nfunction checked(length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n  }\n  return length | 0;\n}\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length);\n}\nBuffer.isBuffer = function isBuffer(b) {\n  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n};\n\nBuffer.compare = function compare(a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n  }\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n    default:\n      return false;\n  }\n};\nBuffer.concat = function concat(list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos);\n      } else {\n        Uint8Array.prototype.set.call(buffer, buf, pos);\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    } else {\n      buf.copy(buffer, pos);\n    }\n    pos += buf.length;\n  }\n  return buffer;\n};\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength;\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n  }\n  var len = string.length;\n  var mustMatch = arguments.length > 2 && arguments[2] === true;\n  if (!mustMatch && len === 0) return 0;\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length;\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n      case 'hex':\n        return len >>> 1;\n      case 'base64':\n        return base64ToBytes(string).length;\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n        }\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return '';\n  }\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n  if (end <= 0) {\n    return '';\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n  if (end <= start) {\n    return '';\n  }\n  if (!encoding) encoding = 'utf8';\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n      case 'ascii':\n        return asciiSlice(this, start, end);\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n      case 'base64':\n        return base64Slice(this, start, end);\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this;\n};\nBuffer.prototype.toString = function toString() {\n  var length = this.length;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n  if (this.length > max) str += ' ... ';\n  return '<Buffer ' + str + '>';\n};\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength);\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n  }\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n  if (start >= end) {\n    return 1;\n  }\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1;\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset; // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n  throw new TypeError('val must be string, number or Buffer');\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n      if (found) return i;\n    }\n  }\n  return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n  var strLen = string.length;\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (numberIsNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n  return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0;\n    if (isFinite(length)) {\n      length = length >>> 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length);\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n  return decodeCodePointsArray(res);\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n  return res;\n}\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret;\n}\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret;\n}\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]];\n  }\n  return out;\n}\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n  if (end < start) end = start;\n  var newBuf = this.subarray(start, end);\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype);\n  return newBuf;\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n  return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset + 3] = value >>> 24;\n  this[offset + 2] = value >>> 16;\n  this[offset + 1] = value >>> 8;\n  this[offset] = value & 0xff;\n  return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n  return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  this[offset + 2] = value >>> 16;\n  this[offset + 3] = value >>> 24;\n  return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0;\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n  var len = end - start;\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n  }\n  return len;\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code;\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } else if (typeof val === 'boolean') {\n    val = Number(val);\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n  if (end <= start) {\n    return this;\n  }\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n    var len = bytes.length;\n    if (len === 0) {\n      throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n  return this;\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0];\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return '';\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str;\n}\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n  return bytes;\n}\nfunction asciiToBytes(str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n  return byteArray;\n}\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n  return i;\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n  // For IE11 support\n  return obj !== obj; // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = function () {\n  var alphabet = '0123456789abcdef';\n  var table = new Array(256);\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16;\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n  }\n  return table;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/buffer/index.js\n"));

/***/ }),

/***/ "../../../../node_modules/ieee754/index.js":
/*!*************************************************!*\
  !*** ../../../../node_modules/ieee754/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n  buffer[offset + i - d] |= s * 128;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wmde-markdown {\\n  font-size: 16px;\\n  line-height: 1.5;\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;\\n}\\n.wmde-markdown > :first-child {\\n  margin-top: 0 !important;\\n}\\n.wmde-markdown > :last-child {\\n  margin-bottom: 0 !important;\\n}\\n.wmde-markdown code[class*=\\\"language-\\\"],\\n.wmde-markdown pre[class*=\\\"language-\\\"] {\\n  color: black;\\n  text-align: left;\\n  white-space: pre;\\n  word-spacing: normal;\\n  word-break: normal;\\n  word-wrap: normal;\\n  -webkit-hyphens: none;\\n          hyphens: none;\\n}\\n.wmde-markdown pre code {\\n  background: none;\\n  overflow-wrap: normal;\\n  white-space: inherit;\\n  tab-size: 2;\\n  padding: 16px;\\n  font-size: 95%;\\n  line-height: 1.5;\\n  display: block;\\n  text-shadow: 0 1px #fff;\\n}\\n.wmde-markdown pre {\\n  margin-bottom: 18px;\\n  font-size: 85%;\\n  line-height: 1.45;\\n  position: relative;\\n  overflow-x: auto;\\n  background-color: #f6f8fa;\\n  border-radius: 3px;\\n}\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  background-color: rgba(27, 31, 35, 0.05);\\n  border-radius: 3px;\\n  font-size: 85%;\\n  margin: 0;\\n  padding: 0.2em 0.4em;\\n}\\n.wmde-markdown pre,\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\\n}\\n.wmde-markdown img {\\n  max-width: 100%;\\n}\\n.wmde-markdown input {\\n  vertical-align: middle;\\n  margin: 0 0.2em 0.25em -1.6em;\\n}\\n.wmde-markdown input + p {\\n  display: inline;\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2 {\\n  border-bottom: 1px solid #eaecef;\\n  padding-bottom: 0.3em;\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  font-weight: 600;\\n  line-height: 1.25;\\n  margin-bottom: 16px;\\n  margin-top: 24px;\\n}\\n.wmde-markdown h1 .anchor,\\n.wmde-markdown h2 .anchor,\\n.wmde-markdown h3 .anchor,\\n.wmde-markdown h4 .anchor,\\n.wmde-markdown h5 .anchor,\\n.wmde-markdown h6 .anchor {\\n  float: left;\\n  padding-right: 4px;\\n  margin-left: -20px;\\n  line-height: 1;\\n}\\n.wmde-markdown h1 .octicon-link,\\n.wmde-markdown h2 .octicon-link,\\n.wmde-markdown h3 .octicon-link,\\n.wmde-markdown h4 .octicon-link,\\n.wmde-markdown h5 .octicon-link,\\n.wmde-markdown h6 .octicon-link {\\n  visibility: hidden;\\n  vertical-align: middle;\\n}\\n.wmde-markdown h1:hover .octicon-link,\\n.wmde-markdown h2:hover .octicon-link,\\n.wmde-markdown h3:hover .octicon-link,\\n.wmde-markdown h4:hover .octicon-link,\\n.wmde-markdown h5:hover .octicon-link,\\n.wmde-markdown h6:hover .octicon-link {\\n  visibility: visible;\\n}\\n.wmde-markdown h1 {\\n  font-size: 2em;\\n}\\n.wmde-markdown h2 {\\n  font-size: 1.5em;\\n}\\n.wmde-markdown h3 {\\n  font-size: 1.25em;\\n}\\n.wmde-markdown h4 {\\n  font-size: 1em;\\n}\\n.wmde-markdown h5 {\\n  font-size: 0.875em;\\n}\\n.wmde-markdown h6 {\\n  font-size: 0.85em;\\n}\\n.wmde-markdown ol,\\n.wmde-markdown ul {\\n  padding-left: 2em;\\n}\\n.wmde-markdown ol > p,\\n.wmde-markdown ul > p {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown ul {\\n  margin-bottom: 16px;\\n  margin-top: 0;\\n  list-style: initial;\\n}\\n.wmde-markdown > blockquote,\\n.wmde-markdown > blockquote blockquote {\\n  margin: 0;\\n  border-left: 0.25em solid #dfe2e5;\\n  color: #6a737d;\\n  padding: 0 1em;\\n}\\n.wmde-markdown > blockquote > :last-child,\\n.wmde-markdown > blockquote blockquote > :last-child {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown > blockquote > :first-child,\\n.wmde-markdown > blockquote blockquote > :first-child {\\n  margin-top: 0;\\n}\\n.wmde-markdown hr {\\n  margin: 1.5em auto;\\n  border: 0;\\n  border-top: 2px dotted #eee;\\n  height: 1px;\\n}\\n.wmde-markdown > table,\\n.wmde-markdown > blockquote table {\\n  display: block;\\n  overflow: auto;\\n  width: 100%;\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n  font-size: 14px;\\n}\\n.wmde-markdown > table tr,\\n.wmde-markdown > blockquote table tr {\\n  background-color: #fff;\\n  border-top: 1px solid #c6cbd1;\\n}\\n.wmde-markdown > table td,\\n.wmde-markdown > blockquote table td,\\n.wmde-markdown > table th,\\n.wmde-markdown > blockquote table th {\\n  border: 1px solid #dfe2e5;\\n  padding: 6px 13px;\\n}\\n.wmde-markdown blockquote,\\n.wmde-markdown details,\\n.wmde-markdown dl,\\n.wmde-markdown ol,\\n.wmde-markdown p,\\n.wmde-markdown pre,\\n.wmde-markdown table,\\n.wmde-markdown ul {\\n  margin-bottom: 16px;\\n  margin-top: 0;\\n}\\n.wmde-markdown a {\\n  color: #0366d6;\\n  text-decoration: none;\\n}\\n.wmde-markdown a:hover {\\n  text-decoration: underline;\\n}\\n.wmde-markdown .namespace {\\n  opacity: 0.7;\\n}\\n.wmde-markdown .token.important {\\n  font-weight: normal;\\n}\\n.wmde-markdown .token.bold {\\n  font-weight: bold;\\n}\\n.wmde-markdown .token.italic {\\n  font-style: italic;\\n}\\n.wmde-markdown .token.entity {\\n  cursor: help;\\n}\\n.wmde-markdown kbd {\\n  background-color: #fafbfc;\\n  border-bottom-color: #d1d5da;\\n  border: 1px solid #d1d5da;\\n  border-radius: 3px;\\n  box-shadow: inset 0 -1px 0 #d1d5da;\\n  color: #56595d;\\n  display: inline-block;\\n  font-size: 10px;\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Consolas, Liberation Mono, Menlo, monospace;\\n  line-height: 10px;\\n  padding: 2px 4px;\\n  vertical-align: middle;\\n}\\n.wmde-markdown-color .token.tag .attr-value {\\n  color: #032f62;\\n}\\n.wmde-markdown-color .token.property,\\n.wmde-markdown-color .token.tag,\\n.wmde-markdown-color .token.boolean,\\n.wmde-markdown-color .token.number,\\n.wmde-markdown-color .token.function-name,\\n.wmde-markdown-color .token.constant,\\n.wmde-markdown-color .token.symbol,\\n.wmde-markdown-color .token.deleted {\\n  color: #0060c9;\\n}\\n.wmde-markdown-color .token.punctuation {\\n  color: #a0a0a0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] {\\n  color: black;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.selector,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.attr-name,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.string,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.char,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.function,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.builtin {\\n  color: #6f42c1;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.inserted {\\n  color: #22863a;\\n  background-color: #f0fff4;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.deleted {\\n  color: #b31d28;\\n  background-color: #ffeef0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.class-name {\\n  color: #6f42c1;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .code-block {\\n  color: #032f62;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.comment,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.block-comment,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.prolog,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.doctype,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.cdata {\\n  color: #7D8B99;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.punctuation {\\n  color: #a0a0a0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.operator,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.entity,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.url,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.variable {\\n  color: #d73a49;\\n  background: rgba(255, 255, 255, 0.5);\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.atrule,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.attr-value {\\n  color: #004698;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.keyword {\\n  color: #d63200;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.regex,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.important {\\n  color: #e90;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.string {\\n  color: #0a53c1;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://node_modules/@uiw/react-markdown-preview/markdown.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAe;EACf,gBAAgB;EAChB,yHAAyH;AAC3H;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,2BAA2B;AAC7B;AACA;;EAEE,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;EAChB,oBAAoB;EACpB,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;UACb,aAAa;AACvB;AACA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,oBAAoB;EAEf,WAAW;EAChB,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,cAAc;EACd,uBAAuB;AACzB;AACA;EACE,mBAAmB;EACnB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,yBAAyB;EACzB,kBAAkB;AACpB;AACA;;EAEE,wCAAwC;EACxC,kBAAkB;EAClB,cAAc;EACd,SAAS;EACT,oBAAoB;AACtB;AACA;;;EAGE,wEAAwE;AAC1E;AACA;EACE,eAAe;AACjB;AACA;EACE,sBAAsB;EACtB,6BAA6B;AAC/B;AACA;EACE,eAAe;AACjB;AACA;;EAEE,gCAAgC;EAChC,qBAAqB;AACvB;AACA;;;;;;EAME,gBAAgB;EAChB,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB;AAClB;AACA;;;;;;EAME,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;AAChB;AACA;;;;;;EAME,kBAAkB;EAClB,sBAAsB;AACxB;AACA;;;;;;EAME,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,iBAAiB;AACnB;AACA;;EAEE,iBAAiB;AACnB;AACA;;EAEE,gBAAgB;AAClB;AACA;EACE,mBAAmB;EACnB,aAAa;EACb,mBAAmB;AACrB;AACA;;EAEE,SAAS;EACT,iCAAiC;EACjC,cAAc;EACd,cAAc;AAChB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,2BAA2B;EAC3B,WAAW;AACb;AACA;;EAEE,cAAc;EACd,cAAc;EACd,WAAW;EACX,yBAAyB;EACzB,iBAAiB;EACjB,eAAe;AACjB;AACA;;EAEE,sBAAsB;EACtB,6BAA6B;AAC/B;AACA;;;;EAIE,yBAAyB;EACzB,iBAAiB;AACnB;AACA;;;;;;;;EAQE,mBAAmB;EACnB,aAAa;AACf;AACA;EACE,cAAc;EACd,qBAAqB;AACvB;AACA;EACE,0BAA0B;AAC5B;AACA;EACE,YAAY;AACd;AACA;EACE,mBAAmB;AACrB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,YAAY;AACd;AACA;EACE,yBAAyB;EACzB,4BAA4B;EAC5B,yBAAyB;EACzB,kBAAkB;EAClB,kCAAkC;EAClC,cAAc;EACd,qBAAqB;EACrB,eAAe;EACf,+FAA+F;EAC/F,iBAAiB;EACjB,gBAAgB;EAChB,sBAAsB;AACxB;AACA;EACE,cAAc;AAChB;AACA;;;;;;;;EAQE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,YAAY;AACd;AACA;;;;;;EAME,cAAc;AAChB;AACA;EACE,cAAc;EACd,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,yBAAyB;AAC3B;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;;;;EAKE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;;;EAIE,cAAc;EACd,oCAAoC;AACtC;AACA;;EAEE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;EAEE,WAAW;AACb;AACA;EACE,cAAc;AAChB\",\"sourcesContent\":[\".wmde-markdown {\\n  font-size: 16px;\\n  line-height: 1.5;\\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;\\n}\\n.wmde-markdown > :first-child {\\n  margin-top: 0 !important;\\n}\\n.wmde-markdown > :last-child {\\n  margin-bottom: 0 !important;\\n}\\n.wmde-markdown code[class*=\\\"language-\\\"],\\n.wmde-markdown pre[class*=\\\"language-\\\"] {\\n  color: black;\\n  text-align: left;\\n  white-space: pre;\\n  word-spacing: normal;\\n  word-break: normal;\\n  word-wrap: normal;\\n  -webkit-hyphens: none;\\n          hyphens: none;\\n}\\n.wmde-markdown pre code {\\n  background: none;\\n  overflow-wrap: normal;\\n  white-space: inherit;\\n  -moz-tab-size: 2;\\n       tab-size: 2;\\n  padding: 16px;\\n  font-size: 95%;\\n  line-height: 1.5;\\n  display: block;\\n  text-shadow: 0 1px #fff;\\n}\\n.wmde-markdown pre {\\n  margin-bottom: 18px;\\n  font-size: 85%;\\n  line-height: 1.45;\\n  position: relative;\\n  overflow-x: auto;\\n  background-color: #f6f8fa;\\n  border-radius: 3px;\\n}\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  background-color: rgba(27, 31, 35, 0.05);\\n  border-radius: 3px;\\n  font-size: 85%;\\n  margin: 0;\\n  padding: 0.2em 0.4em;\\n}\\n.wmde-markdown pre,\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\\n}\\n.wmde-markdown img {\\n  max-width: 100%;\\n}\\n.wmde-markdown input {\\n  vertical-align: middle;\\n  margin: 0 0.2em 0.25em -1.6em;\\n}\\n.wmde-markdown input + p {\\n  display: inline;\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2 {\\n  border-bottom: 1px solid #eaecef;\\n  padding-bottom: 0.3em;\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  font-weight: 600;\\n  line-height: 1.25;\\n  margin-bottom: 16px;\\n  margin-top: 24px;\\n}\\n.wmde-markdown h1 .anchor,\\n.wmde-markdown h2 .anchor,\\n.wmde-markdown h3 .anchor,\\n.wmde-markdown h4 .anchor,\\n.wmde-markdown h5 .anchor,\\n.wmde-markdown h6 .anchor {\\n  float: left;\\n  padding-right: 4px;\\n  margin-left: -20px;\\n  line-height: 1;\\n}\\n.wmde-markdown h1 .octicon-link,\\n.wmde-markdown h2 .octicon-link,\\n.wmde-markdown h3 .octicon-link,\\n.wmde-markdown h4 .octicon-link,\\n.wmde-markdown h5 .octicon-link,\\n.wmde-markdown h6 .octicon-link {\\n  visibility: hidden;\\n  vertical-align: middle;\\n}\\n.wmde-markdown h1:hover .octicon-link,\\n.wmde-markdown h2:hover .octicon-link,\\n.wmde-markdown h3:hover .octicon-link,\\n.wmde-markdown h4:hover .octicon-link,\\n.wmde-markdown h5:hover .octicon-link,\\n.wmde-markdown h6:hover .octicon-link {\\n  visibility: visible;\\n}\\n.wmde-markdown h1 {\\n  font-size: 2em;\\n}\\n.wmde-markdown h2 {\\n  font-size: 1.5em;\\n}\\n.wmde-markdown h3 {\\n  font-size: 1.25em;\\n}\\n.wmde-markdown h4 {\\n  font-size: 1em;\\n}\\n.wmde-markdown h5 {\\n  font-size: 0.875em;\\n}\\n.wmde-markdown h6 {\\n  font-size: 0.85em;\\n}\\n.wmde-markdown ol,\\n.wmde-markdown ul {\\n  padding-left: 2em;\\n}\\n.wmde-markdown ol > p,\\n.wmde-markdown ul > p {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown ul {\\n  margin-bottom: 16px;\\n  margin-top: 0;\\n  list-style: initial;\\n}\\n.wmde-markdown > blockquote,\\n.wmde-markdown > blockquote blockquote {\\n  margin: 0;\\n  border-left: 0.25em solid #dfe2e5;\\n  color: #6a737d;\\n  padding: 0 1em;\\n}\\n.wmde-markdown > blockquote > :last-child,\\n.wmde-markdown > blockquote blockquote > :last-child {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown > blockquote > :first-child,\\n.wmde-markdown > blockquote blockquote > :first-child {\\n  margin-top: 0;\\n}\\n.wmde-markdown hr {\\n  margin: 1.5em auto;\\n  border: 0;\\n  border-top: 2px dotted #eee;\\n  height: 1px;\\n}\\n.wmde-markdown > table,\\n.wmde-markdown > blockquote table {\\n  display: block;\\n  overflow: auto;\\n  width: 100%;\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n  font-size: 14px;\\n}\\n.wmde-markdown > table tr,\\n.wmde-markdown > blockquote table tr {\\n  background-color: #fff;\\n  border-top: 1px solid #c6cbd1;\\n}\\n.wmde-markdown > table td,\\n.wmde-markdown > blockquote table td,\\n.wmde-markdown > table th,\\n.wmde-markdown > blockquote table th {\\n  border: 1px solid #dfe2e5;\\n  padding: 6px 13px;\\n}\\n.wmde-markdown blockquote,\\n.wmde-markdown details,\\n.wmde-markdown dl,\\n.wmde-markdown ol,\\n.wmde-markdown p,\\n.wmde-markdown pre,\\n.wmde-markdown table,\\n.wmde-markdown ul {\\n  margin-bottom: 16px;\\n  margin-top: 0;\\n}\\n.wmde-markdown a {\\n  color: #0366d6;\\n  text-decoration: none;\\n}\\n.wmde-markdown a:hover {\\n  text-decoration: underline;\\n}\\n.wmde-markdown .namespace {\\n  opacity: 0.7;\\n}\\n.wmde-markdown .token.important {\\n  font-weight: normal;\\n}\\n.wmde-markdown .token.bold {\\n  font-weight: bold;\\n}\\n.wmde-markdown .token.italic {\\n  font-style: italic;\\n}\\n.wmde-markdown .token.entity {\\n  cursor: help;\\n}\\n.wmde-markdown kbd {\\n  background-color: #fafbfc;\\n  border-bottom-color: #d1d5da;\\n  border: 1px solid #d1d5da;\\n  border-radius: 3px;\\n  box-shadow: inset 0 -1px 0 #d1d5da;\\n  color: #56595d;\\n  display: inline-block;\\n  font-size: 10px;\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Consolas, Liberation Mono, Menlo, monospace;\\n  line-height: 10px;\\n  padding: 2px 4px;\\n  vertical-align: middle;\\n}\\n.wmde-markdown-color .token.tag .attr-value {\\n  color: #032f62;\\n}\\n.wmde-markdown-color .token.property,\\n.wmde-markdown-color .token.tag,\\n.wmde-markdown-color .token.boolean,\\n.wmde-markdown-color .token.number,\\n.wmde-markdown-color .token.function-name,\\n.wmde-markdown-color .token.constant,\\n.wmde-markdown-color .token.symbol,\\n.wmde-markdown-color .token.deleted {\\n  color: #0060c9;\\n}\\n.wmde-markdown-color .token.punctuation {\\n  color: #a0a0a0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] {\\n  color: black;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.selector,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.attr-name,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.string,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.char,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.function,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.builtin {\\n  color: #6f42c1;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.inserted {\\n  color: #22863a;\\n  background-color: #f0fff4;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.deleted {\\n  color: #b31d28;\\n  background-color: #ffeef0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.class-name {\\n  color: #6f42c1;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .code-block {\\n  color: #032f62;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.comment,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.block-comment,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.prolog,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.doctype,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.cdata {\\n  color: #7D8B99;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.punctuation {\\n  color: #a0a0a0;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.operator,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.entity,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.url,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.variable {\\n  color: #d73a49;\\n  background: rgba(255, 255, 255, 0.5);\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.atrule,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.attr-value {\\n  color: #004698;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.keyword {\\n  color: #d63200;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.regex,\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.important {\\n  color: #e90;\\n}\\n.wmde-markdown-color code[class*=\\\"language-\\\"] .token.string {\\n  color: #0a53c1;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".w-md-editor-bar {\\n  position: absolute;\\n  cursor: s-resize;\\n  right: 0;\\n  margin-top: -11px;\\n  margin-right: 0;\\n  width: 14px;\\n  z-index: 3;\\n  height: 10px;\\n  border-radius: 0 0 3px 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n.w-md-editor-bar svg {\\n  display: block;\\n  margin: 0 auto;\\n}\\n.w-md-editor-aree {\\n  overflow: auto;\\n  border-radius: 5px;\\n}\\n.w-md-editor-text {\\n  min-height: 100%;\\n  position: relative;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-break: keep-all;\\n  overflow-wrap: break-word;\\n  box-sizing: border-box;\\n  padding: 10px;\\n  margin: 0;\\n  font-size: 14px;\\n  line-height: 18px;\\n  font-variant-ligatures: common-ligatures;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input,\\n.w-md-editor-text > .w-md-editor-text-pre {\\n  margin: 0;\\n  border: 0;\\n  background: none;\\n  box-sizing: inherit;\\n  display: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  font-style: inherit;\\n  font-variant-ligatures: inherit;\\n  font-weight: inherit;\\n  letter-spacing: inherit;\\n  line-height: inherit;\\n  tab-size: inherit;\\n  text-indent: inherit;\\n  text-rendering: inherit;\\n  text-transform: inherit;\\n  white-space: inherit;\\n  overflow-wrap: inherit;\\n  word-break: inherit;\\n  word-break: normal;\\n  padding: 0;\\n}\\n.w-md-editor-text-pre > code,\\n.w-md-editor-text-input > code,\\n.w-md-editor-text > .w-md-editor-text-pre > code {\\n  font-family: inherit;\\n}\\n.w-md-editor-text-pre {\\n  position: relative;\\n  margin: 0px;\\n  pointer-events: none;\\n}\\n.w-md-editor-text-input {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  height: 100%;\\n  width: 100%;\\n  resize: none;\\n  color: inherit;\\n  overflow: hidden;\\n  outline: 0;\\n  padding: inherit;\\n  -webkit-font-smoothing: antialiased;\\n  -webkit-text-fill-color: transparent;\\n}\\n.w-md-editor-text-input:empty {\\n  -webkit-text-fill-color: inherit !important;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input {\\n  word-wrap: pre;\\n  word-break: break-word;\\n  white-space: pre-wrap;\\n}\\n/**\\n * Hack to apply on some CSS on IE10 and IE11\\n */\\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\\n  /**\\n    * IE doesn't support '-webkit-text-fill-color'\\n    * So we use 'color: transparent' to make the text transparent on IE\\n    * Unlike other browsers, it doesn't affect caret color in IE\\n    */\\n  .w-md-editor-text-input {\\n    color: transparent !important;\\n  }\\n  .w-md-editor-text-input::selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n}\\n.w-md-editor-text-pre {\\n  color: #333;\\n}\\n.w-md-editor-text-pre .table .punctuation {\\n  color: #c3c3c3;\\n}\\n.w-md-editor-text-pre .table .table-header {\\n  color: #000;\\n}\\n.w-md-editor-text-pre .url {\\n  color: #032f62 !important;\\n}\\n.w-md-editor-text-pre .url .content {\\n  color: #0366d6;\\n}\\n.w-md-editor-text-pre .hr {\\n  color: #999;\\n}\\n.w-md-editor-text-pre .blockquote {\\n  color: #a6a6a6;\\n}\\n.w-md-editor-text-pre .title,\\n.w-md-editor-text-pre .bold {\\n  color: #000 !important;\\n}\\n.w-md-editor-text-pre .title {\\n  line-height: unset !important;\\n  font-size: unset !important;\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .code.keyword {\\n  color: #596394 !important;\\n}\\n.w-md-editor-text-pre .strike {\\n  color: #bf4ca0;\\n}\\n.w-md-editor-toolbar-child {\\n  position: absolute;\\n  border-radius: 3px;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.1), 0 0 0 rgba(16, 22, 26, 0), 0 1px 1px rgba(16, 22, 26, 0.2);\\n  background-color: #fff;\\n  z-index: 1;\\n  display: none;\\n}\\n.w-md-editor-toolbar-child.active {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar {\\n  border-bottom: 0;\\n  padding: 3px;\\n  border-radius: 3px;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li button {\\n  width: -webkit-fill-available;\\n  height: initial;\\n  box-sizing: border-box;\\n  padding: 3px 4px 2px 4px;\\n  margin: 0;\\n}\\n.w-md-editor-toolbar {\\n  border-bottom: 1px solid #dfdfe0;\\n  background-color: #fbfbfb;\\n  padding: 0 5px 0 5px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border-radius: 3px 3px 0 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n.w-md-editor-toolbar ul,\\n.w-md-editor-toolbar li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n}\\n.w-md-editor-toolbar li {\\n  display: inline-block;\\n  font-size: 14px;\\n}\\n.w-md-editor-toolbar li > button {\\n  border: none;\\n  height: 20px;\\n  line-height: 14px;\\n  background: none;\\n  color: #586069;\\n  padding: 4px;\\n  margin: 0 1px;\\n  border-radius: 2px;\\n  text-transform: none;\\n  font-weight: normal;\\n  overflow: visible;\\n  outline: none;\\n  cursor: pointer;\\n  transition: all 0.3s;\\n  white-space: nowrap;\\n}\\n.w-md-editor-toolbar li > button:hover,\\n.w-md-editor-toolbar li > button:focus {\\n  color: #06c;\\n  background-color: #dcdcdc;\\n}\\n.w-md-editor-toolbar li > button:active {\\n  color: #6a57ff;\\n  background-color: #dcdcdc;\\n}\\n.w-md-editor-toolbar li > button:disabled {\\n  color: #ccc;\\n  cursor: not-allowed;\\n}\\n.w-md-editor-toolbar li > button:disabled:hover {\\n  background-color: transparent;\\n  color: #ccc;\\n}\\n.w-md-editor-toolbar li.active > button {\\n  color: #06c;\\n  background-color: #e8e8e8;\\n}\\n.w-md-editor-toolbar-divider {\\n  height: 14px;\\n  width: 1px;\\n  margin: -3px 3px 0 3px !important;\\n  vertical-align: middle;\\n  background-color: #ccc;\\n}\\n.w-md-editor {\\n  color: #24292e;\\n  text-align: left;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.1), 0 0 0 rgba(16, 22, 26, 0), 0 1px 1px rgba(16, 22, 26, 0.2);\\n  border-radius: 3px;\\n  padding-bottom: 1px;\\n  position: relative;\\n  background-color: #fff;\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\\n}\\n.w-md-editor-content {\\n  position: relative;\\n  border-radius: 0 0 3px 0;\\n  height: calc(100% - 39.1px);\\n}\\n.w-md-editor-input {\\n  width: 50%;\\n  height: 100%;\\n}\\n.w-md-editor-preview {\\n  width: 50%;\\n  box-sizing: border-box;\\n  box-shadow: inset 1px 0 0 0 #dfdfe0;\\n  position: absolute;\\n  padding: 10px 20px;\\n  overflow: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n.w-md-editor-preview .anchor {\\n  display: none;\\n}\\n.w-md-editor-preview .contains-task-list {\\n  list-style: none;\\n}\\n.w-md-editor-show-preview .w-md-editor-input {\\n  width: 0%;\\n  overflow: hidden;\\n  background-color: #fdfdfd;\\n}\\n.w-md-editor-show-preview .w-md-editor-preview {\\n  width: 100%;\\n  box-shadow: inset 0 0 0 0;\\n}\\n.w-md-editor-show-edit .w-md-editor-input {\\n  width: 100%;\\n}\\n.w-md-editor-show-edit .w-md-editor-preview {\\n  width: 0%;\\n  padding: 0;\\n}\\n.w-md-editor-fullscreen {\\n  overflow: hidden;\\n  position: fixed;\\n  z-index: 9999;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n.w-md-editor-fullscreen .w-md-editor-content {\\n  height: 100%;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://node_modules/@uiw/react-md-editor/markdown-editor.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,QAAQ;EACR,iBAAiB;EACjB,eAAe;EACf,WAAW;EACX,UAAU;EACV,YAAY;EACZ,wBAAwB;EACxB,yBAAyB;UACjB,iBAAiB;AAC3B;AACA;EACE,cAAc;EACd,cAAc;AAChB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;EAChB,qBAAqB;EACrB,oBAAoB;EACpB,yBAAyB;EACzB,sBAAsB;EACtB,aAAa;EACb,SAAS;EACT,eAAe;EACf,iBAAiB;EAET,wCAAwC;AAClD;AACA;;;EAGE,SAAS;EACT,SAAS;EACT,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;EAChB,oBAAoB;EACpB,kBAAkB;EAClB,mBAAmB;EAEX,+BAA+B;EACvC,oBAAoB;EACpB,uBAAuB;EACvB,oBAAoB;EAEf,iBAAiB;EACtB,oBAAoB;EACpB,uBAAuB;EACvB,uBAAuB;EACvB,oBAAoB;EACpB,sBAAsB;EACtB,mBAAmB;EACnB,kBAAkB;EAClB,UAAU;AACZ;AACA;;;EAGE,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,cAAc;EACd,gBAAgB;EAChB,UAAU;EACV,gBAAgB;EAChB,mCAAmC;EACnC,oCAAoC;AACtC;AACA;EACE,2CAA2C;AAC7C;AACA;;EAEE,cAAc;EACd,sBAAsB;EACtB,qBAAqB;AACvB;AACA;;EAEE;AACF;EACE;;;;KAIG;EACH;IACE,6BAA6B;EAC/B;EACA;IACE,oCAAoC;IACpC,6BAA6B;EAC/B;AACF;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,cAAc;AAChB;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;AAChB;AACA;;EAEE,sBAAsB;AACxB;AACA;EACE,6BAA6B;EAC7B,2BAA2B;EAC3B,6BAA6B;AAC/B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,uGAAuG;EACvG,sBAAsB;EACtB,UAAU;EACV,aAAa;AACf;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;AACpB;AACA;EACE,cAAc;AAChB;AACA;EACE,6BAA6B;EAC7B,eAAe;EACf,sBAAsB;EACtB,wBAAwB;EACxB,SAAS;AACX;AACA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,oBAAoB;EACpB,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,0BAA0B;EAC1B,yBAAyB;UACjB,iBAAiB;AAC3B;AACA;;EAEE,SAAS;EACT,UAAU;EACV,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,eAAe;AACjB;AACA;EACE,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;EACd,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,oBAAoB;EACpB,mBAAmB;AACrB;AACA;;EAEE,WAAW;EACX,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,yBAAyB;AAC3B;AACA;EACE,WAAW;EACX,mBAAmB;AACrB;AACA;EACE,6BAA6B;EAC7B,WAAW;AACb;AACA;EACE,WAAW;EACX,yBAAyB;AAC3B;AACA;EACE,YAAY;EACZ,UAAU;EACV,iCAAiC;EACjC,sBAAsB;EACtB,sBAAsB;AACxB;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,uGAAuG;EACvG,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;EACtB,2DAA2D;AAC7D;AACA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,2BAA2B;AAC7B;AACA;EACE,UAAU;EACV,YAAY;AACd;AACA;EACE,UAAU;EACV,sBAAsB;EACtB,mCAAmC;EACnC,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;EACd,MAAM;EACN,QAAQ;EACR,SAAS;AACX;AACA;EACE,aAAa;AACf;AACA;EACE,gBAAgB;AAClB;AACA;EACE,SAAS;EACT,gBAAgB;EAChB,yBAAyB;AAC3B;AACA;EACE,WAAW;EACX,yBAAyB;AAC3B;AACA;EACE,WAAW;AACb;AACA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;AACX;AACA;EACE,YAAY;AACd\",\"sourcesContent\":[\".w-md-editor-bar {\\n  position: absolute;\\n  cursor: s-resize;\\n  right: 0;\\n  margin-top: -11px;\\n  margin-right: 0;\\n  width: 14px;\\n  z-index: 3;\\n  height: 10px;\\n  border-radius: 0 0 3px 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n.w-md-editor-bar svg {\\n  display: block;\\n  margin: 0 auto;\\n}\\n.w-md-editor-aree {\\n  overflow: auto;\\n  border-radius: 5px;\\n}\\n.w-md-editor-text {\\n  min-height: 100%;\\n  position: relative;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-break: keep-all;\\n  overflow-wrap: break-word;\\n  box-sizing: border-box;\\n  padding: 10px;\\n  margin: 0;\\n  font-size: 14px;\\n  line-height: 18px;\\n  -webkit-font-variant-ligatures: common-ligatures;\\n          font-variant-ligatures: common-ligatures;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input,\\n.w-md-editor-text > .w-md-editor-text-pre {\\n  margin: 0;\\n  border: 0;\\n  background: none;\\n  box-sizing: inherit;\\n  display: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  font-style: inherit;\\n  -webkit-font-variant-ligatures: inherit;\\n          font-variant-ligatures: inherit;\\n  font-weight: inherit;\\n  letter-spacing: inherit;\\n  line-height: inherit;\\n  -moz-tab-size: inherit;\\n       tab-size: inherit;\\n  text-indent: inherit;\\n  text-rendering: inherit;\\n  text-transform: inherit;\\n  white-space: inherit;\\n  overflow-wrap: inherit;\\n  word-break: inherit;\\n  word-break: normal;\\n  padding: 0;\\n}\\n.w-md-editor-text-pre > code,\\n.w-md-editor-text-input > code,\\n.w-md-editor-text > .w-md-editor-text-pre > code {\\n  font-family: inherit;\\n}\\n.w-md-editor-text-pre {\\n  position: relative;\\n  margin: 0px;\\n  pointer-events: none;\\n}\\n.w-md-editor-text-input {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  height: 100%;\\n  width: 100%;\\n  resize: none;\\n  color: inherit;\\n  overflow: hidden;\\n  outline: 0;\\n  padding: inherit;\\n  -webkit-font-smoothing: antialiased;\\n  -webkit-text-fill-color: transparent;\\n}\\n.w-md-editor-text-input:empty {\\n  -webkit-text-fill-color: inherit !important;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input {\\n  word-wrap: pre;\\n  word-break: break-word;\\n  white-space: pre-wrap;\\n}\\n/**\\n * Hack to apply on some CSS on IE10 and IE11\\n */\\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\\n  /**\\n    * IE doesn't support '-webkit-text-fill-color'\\n    * So we use 'color: transparent' to make the text transparent on IE\\n    * Unlike other browsers, it doesn't affect caret color in IE\\n    */\\n  .w-md-editor-text-input {\\n    color: transparent !important;\\n  }\\n  .w-md-editor-text-input::selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n}\\n.w-md-editor-text-pre {\\n  color: #333;\\n}\\n.w-md-editor-text-pre .table .punctuation {\\n  color: #c3c3c3;\\n}\\n.w-md-editor-text-pre .table .table-header {\\n  color: #000;\\n}\\n.w-md-editor-text-pre .url {\\n  color: #032f62 !important;\\n}\\n.w-md-editor-text-pre .url .content {\\n  color: #0366d6;\\n}\\n.w-md-editor-text-pre .hr {\\n  color: #999;\\n}\\n.w-md-editor-text-pre .blockquote {\\n  color: #a6a6a6;\\n}\\n.w-md-editor-text-pre .title,\\n.w-md-editor-text-pre .bold {\\n  color: #000 !important;\\n}\\n.w-md-editor-text-pre .title {\\n  line-height: unset !important;\\n  font-size: unset !important;\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .code.keyword {\\n  color: #596394 !important;\\n}\\n.w-md-editor-text-pre .strike {\\n  color: #bf4ca0;\\n}\\n.w-md-editor-toolbar-child {\\n  position: absolute;\\n  border-radius: 3px;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.1), 0 0 0 rgba(16, 22, 26, 0), 0 1px 1px rgba(16, 22, 26, 0.2);\\n  background-color: #fff;\\n  z-index: 1;\\n  display: none;\\n}\\n.w-md-editor-toolbar-child.active {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar {\\n  border-bottom: 0;\\n  padding: 3px;\\n  border-radius: 3px;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li button {\\n  width: -webkit-fill-available;\\n  height: initial;\\n  box-sizing: border-box;\\n  padding: 3px 4px 2px 4px;\\n  margin: 0;\\n}\\n.w-md-editor-toolbar {\\n  border-bottom: 1px solid #dfdfe0;\\n  background-color: #fbfbfb;\\n  padding: 0 5px 0 5px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border-radius: 3px 3px 0 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n.w-md-editor-toolbar ul,\\n.w-md-editor-toolbar li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n}\\n.w-md-editor-toolbar li {\\n  display: inline-block;\\n  font-size: 14px;\\n}\\n.w-md-editor-toolbar li > button {\\n  border: none;\\n  height: 20px;\\n  line-height: 14px;\\n  background: none;\\n  color: #586069;\\n  padding: 4px;\\n  margin: 0 1px;\\n  border-radius: 2px;\\n  text-transform: none;\\n  font-weight: normal;\\n  overflow: visible;\\n  outline: none;\\n  cursor: pointer;\\n  transition: all 0.3s;\\n  white-space: nowrap;\\n}\\n.w-md-editor-toolbar li > button:hover,\\n.w-md-editor-toolbar li > button:focus {\\n  color: #06c;\\n  background-color: #dcdcdc;\\n}\\n.w-md-editor-toolbar li > button:active {\\n  color: #6a57ff;\\n  background-color: #dcdcdc;\\n}\\n.w-md-editor-toolbar li > button:disabled {\\n  color: #ccc;\\n  cursor: not-allowed;\\n}\\n.w-md-editor-toolbar li > button:disabled:hover {\\n  background-color: transparent;\\n  color: #ccc;\\n}\\n.w-md-editor-toolbar li.active > button {\\n  color: #06c;\\n  background-color: #e8e8e8;\\n}\\n.w-md-editor-toolbar-divider {\\n  height: 14px;\\n  width: 1px;\\n  margin: -3px 3px 0 3px !important;\\n  vertical-align: middle;\\n  background-color: #ccc;\\n}\\n.w-md-editor {\\n  color: #24292e;\\n  text-align: left;\\n  box-shadow: 0 0 0 1px rgba(16, 22, 26, 0.1), 0 0 0 rgba(16, 22, 26, 0), 0 1px 1px rgba(16, 22, 26, 0.2);\\n  border-radius: 3px;\\n  padding-bottom: 1px;\\n  position: relative;\\n  background-color: #fff;\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\\n}\\n.w-md-editor-content {\\n  position: relative;\\n  border-radius: 0 0 3px 0;\\n  height: calc(100% - 39.1px);\\n}\\n.w-md-editor-input {\\n  width: 50%;\\n  height: 100%;\\n}\\n.w-md-editor-preview {\\n  width: 50%;\\n  box-sizing: border-box;\\n  box-shadow: inset 1px 0 0 0 #dfdfe0;\\n  position: absolute;\\n  padding: 10px 20px;\\n  overflow: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n.w-md-editor-preview .anchor {\\n  display: none;\\n}\\n.w-md-editor-preview .contains-task-list {\\n  list-style: none;\\n}\\n.w-md-editor-show-preview .w-md-editor-input {\\n  width: 0%;\\n  overflow: hidden;\\n  background-color: #fdfdfd;\\n}\\n.w-md-editor-show-preview .w-md-editor-preview {\\n  width: 100%;\\n  box-shadow: inset 0 0 0 0;\\n}\\n.w-md-editor-show-edit .w-md-editor-input {\\n  width: 100%;\\n}\\n.w-md-editor-show-edit .w-md-editor-preview {\\n  width: 0%;\\n  padding: 0;\\n}\\n.w-md-editor-fullscreen {\\n  overflow: hidden;\\n  position: fixed;\\n  z-index: 9999;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n.w-md-editor-fullscreen .w-md-editor-content {\\n  height: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmalja%5CDesktop%5Cprojects%5Ccollaborative-texteditor%5Cfrontend%5Csrc%5Cpages%5Cindex.tsx&page=%2F!":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmalja%5CDesktop%5Cprojects%5Ccollaborative-texteditor%5Cfrontend%5Csrc%5Cpages%5Cindex.tsx&page=%2F! ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./src/pages/index.tsx */ \"./src/pages/index.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNtYWxqYSU1Q0Rlc2t0b3AlNUNwcm9qZWN0cyU1Q2NvbGxhYm9yYXRpdmUtdGV4dGVkaXRvciU1Q2Zyb250ZW5kJTVDc3JjJTVDcGFnZXMlNUNpbmRleC50c3gmcGFnZT0lMkYhIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsb0RBQXVCO0FBQzlDO0FBQ0E7QUFDQSxPQUFPLElBQVU7QUFDakIsTUFBTSxVQUFVO0FBQ2hCO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9hMmYyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICh3aW5kb3cuX19ORVhUX1AgPSB3aW5kb3cuX19ORVhUX1AgfHwgW10pLnB1c2goW1xuICAgICAgXCIvXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwiLi9zcmMvcGFnZXMvaW5kZXgudHN4XCIpO1xuICAgICAgfVxuICAgIF0pO1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5fX05FWFRfUC5wdXNoKFtcIi9cIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmalja%5CDesktop%5Cprojects%5Ccollaborative-texteditor%5Cfrontend%5Csrc%5Cpages%5Cindex.tsx&page=%2F!\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-markdown-preview/markdown.css":
/*!***************************************************************!*\
  !*** ./node_modules/@uiw/react-markdown-preview/markdown.css ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1tYXJrZG93bi1wcmV2aWV3L21hcmtkb3duLmNzcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsME1BQThGO0FBQ2hILDBCQUEwQixtQkFBTyxDQUFDLDJmQUE4Tjs7QUFFaFE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLDJmQUE4TjtBQUNwTztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDJmQUE4Tjs7QUFFeFA7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B1aXcvcmVhY3QtbWFya2Rvd24tcHJldmlldy9tYXJrZG93bi5jc3M/NjA1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzExXS51c2VbMV0hLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbMTFdLnVzZVsyXSEuL21hcmtkb3duLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAvLyBvZiA8aGVhZD4uIFRoaXMgY2F1c2VzIG9yZGVyaW5nIHByb2JsZW1zIGJldHdlZW4gZGV2XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBwcm9kLiBUbyBmaXggdGhpcywgd2UgcmVuZGVyIGEgPG5vc2NyaXB0PiB0YWcgYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgX2JlZm9yZV8gPHN0eWxlIGpzeCBnbG9iYWw+LlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBlbGVtZW50cyBzaG91bGQgYWx3YXlzIGV4aXN0LiBJZiB0aGV5IGRvIG5vdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFuY2hvckVsZW1lbnQucGFyZW50Tm9kZS8vIE5vcm1hbGx5IDxoZWFkPlxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxuICAgICAgICAgICAgICAgICAgICAvLyBhbmNob3IuIEJ5IGluc2VydGluZyBiZWZvcmUgYW5kIG5vdCBhZnRlciwgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdHJhY2sgdGhlIGxhc3QgaW5zZXJ0ZWQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfTtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICAgIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcDtcbiAgICBmb3IocCBpbiBhKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKHAgaW4gYil7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS5vbmVPZlsxMV0udXNlWzFdIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzExXS51c2VbMl0hLi9tYXJrZG93bi5jc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbMTFdLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS5vbmVPZlsxMV0udXNlWzJdIS4vbWFya2Rvd24uY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-markdown-preview/markdown.css\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-md-editor/markdown-editor.css":
/*!***************************************************************!*\
  !*** ./node_modules/@uiw/react-md-editor/markdown-editor.css ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[11].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1tZC1lZGl0b3IvbWFya2Rvd24tZWRpdG9yLmNzcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsME1BQThGO0FBQ2hILDBCQUEwQixtQkFBTyxDQUFDLGtnQkFBcU87O0FBRXZROztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxJQUFJLElBQVU7QUFDZCx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckIsTUFBTSxrZ0JBQXFPO0FBQzNPO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsa2dCQUFxTzs7QUFFL1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B1aXcvcmVhY3QtbWQtZWRpdG9yL21hcmtkb3duLWVkaXRvci5jc3M/ZDhkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzExXS51c2VbMV0hLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbMTFdLnVzZVsyXSEuL21hcmtkb3duLWVkaXRvci5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgPGhlYWQ+LiBUaGlzIGNhdXNlcyBvcmRlcmluZyBwcm9ibGVtcyBiZXR3ZWVuIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIF9iZWZvcmVfIDxzdHlsZSBqc3ggZ2xvYmFsPi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhbmNob3JFbGVtZW50LnBhcmVudE5vZGUvLyBOb3JtYWxseSA8aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN0eWxlIHRhZyBzaG91bGQgYmUgcGxhY2VkIHJpZ2h0IGJlZm9yZSBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaG9yLiBCeSBpbnNlcnRpbmcgYmVmb3JlIGFuZCBub3QgYWZ0ZXIsIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMgfHwgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKSB7XG4gICAgdmFyIGlzRXF1YWxMb2NhbHMgPSBmdW5jdGlvbiBpc0VxdWFsTG9jYWxzKGEsIGIsIGlzTmFtZWRFeHBvcnQpIHtcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgZm9yKHAgaW4gYSl7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihwIGluIGIpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbMTFdLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS5vbmVPZlsxMV0udXNlWzJdIS4vbWFya2Rvd24tZWRpdG9yLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS5vbmVPZlsxMV0udXNlWzFdIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzExXS51c2VbMl0hLi9tYXJrZG93bi1lZGl0b3IuY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-md-editor/markdown-editor.css\n"));

/***/ }),

/***/ "./src/components/Content.tsx":
/*!************************************!*\
  !*** ./src/components/Content.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Content; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uiw/react-md-editor/markdown-editor.css */ \"./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n/* harmony import */ var _uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uiw/react-markdown-preview/markdown.css */ \"./node_modules/@uiw/react-markdown-preview/markdown.css\");\n/* harmony import */ var _uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_4__);\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst MDEditor = next_dynamic__WEBPACK_IMPORTED_MODULE_4___default()(()=>__webpack_require__.e(/*! import() */ \"node_modules_uiw_react-md-editor_esm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @uiw/react-md-editor */ \"./node_modules/@uiw/react-md-editor/esm/index.js\")), {\n    loadableGenerated: {\n        modules: [\n            \"..\\\\components\\\\Content.tsx -> \" + \"@uiw/react-md-editor\"\n        ]\n    },\n    ssr: false\n});\n_c = MDEditor;\nfunction Content(param) {\n    let { text, setText, socket, router } = param;\n    var _ref;\n    _s();\n    const [divHeight, setDivHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _ref_current, _ref;\n        //@ts-ignore\n        setDivHeight((_ref = ref) === null || _ref === void 0 ? void 0 : (_ref_current = _ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.clientHeight);\n    }, [\n        ref,\n        (_ref = ref) === null || _ref === void 0 ? void 0 : _ref.current\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: ref,\n        className: \"h-full w-full flex-1\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MDEditor, {\n            height: divHeight,\n            value: text,\n            onChange: (e)=>{\n                socket.emit(\"send-text\", e, router.asPath.split(\"#\")[1]);\n                setText(e || \"\");\n            }\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Content.tsx\",\n            lineNumber: 39,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Content.tsx\",\n        lineNumber: 38,\n        columnNumber: 5\n    }, this);\n}\n_s(Content, \"SJoRqXN0cWWz+34mv5Q/pO3mua4=\");\n_c1 = Content;\nvar _c, _c1;\n$RefreshReg$(_c, \"MDEditor\");\n$RefreshReg$(_c1, \"Content\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Db250ZW50LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBTWU7QUFDbUM7QUFDQTtBQUNmO0FBRW5DLE1BQU1JLFdBQVdELG1EQUFPQSxDQUFDLElBQU0sME5BQU87Ozs7OztJQUNwQ0UsS0FBSzs7S0FEREQ7QUFXUyxTQUFTRSxRQUFRLEtBS3hCO1FBTHdCLEVBQzlCQyxJQUFJLEVBQ0pDLE9BQU8sRUFDUEMsTUFBTSxFQUNOQyxNQUFNLEVBQ0EsR0FMd0I7UUFZckJDOztJQU5ULE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHWCwrQ0FBUUEsQ0FBQztJQUMzQyxNQUFNUyxNQUFNViw2Q0FBTUEsQ0FBQztJQUVuQkQsZ0RBQVNBLENBQUM7WUFFS1csY0FBQUE7UUFEYixZQUFZO1FBQ1pFLGNBQWFGLE9BQUFBLGlCQUFBQSw0QkFBQUEsZUFBQUEsS0FBS0csT0FBTyxjQUFaSCxtQ0FBQUEsYUFBY0ksWUFBWTtJQUN6QyxHQUFHO1FBQUNKO1NBQUtBLE9BQUFBLGlCQUFBQSwyQkFBQUEsS0FBS0csT0FBTztLQUFDO0lBRXRCLHFCQUNFLDhEQUFDRTtRQUFJTCxLQUFLQTtRQUFLTSxXQUFVO2tCQUN2Qiw0RUFBQ2I7WUFDQ2MsUUFBUU47WUFDUk8sT0FBT1o7WUFDUGEsVUFBVSxDQUFDQztnQkFDVFosT0FBT2EsSUFBSSxDQUFDLGFBQWFELEdBQUdYLE9BQU9hLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN2RGhCLFFBQVFhLEtBQUs7WUFDZjs7Ozs7Ozs7Ozs7QUFJUjtHQTFCd0JmO01BQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL0NvbnRlbnQudHN4PzM5M2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXNwYXRjaCxcclxuICBTZXRTdGF0ZUFjdGlvbixcclxuICB1c2VFZmZlY3QsXHJcbiAgdXNlUmVmLFxyXG4gIHVzZVN0YXRlLFxyXG59IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICdAdWl3L3JlYWN0LW1kLWVkaXRvci9tYXJrZG93bi1lZGl0b3IuY3NzJztcclxuaW1wb3J0ICdAdWl3L3JlYWN0LW1hcmtkb3duLXByZXZpZXcvbWFya2Rvd24uY3NzJztcclxuaW1wb3J0IGR5bmFtaWMgZnJvbSAnbmV4dC9keW5hbWljJztcclxuXHJcbmNvbnN0IE1ERWRpdG9yID0gZHluYW1pYygoKSA9PiBpbXBvcnQoJ0B1aXcvcmVhY3QtbWQtZWRpdG9yJyksIHtcclxuICBzc3I6IGZhbHNlLFxyXG59KTtcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIHNldFRleHQ6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPGFueT4+O1xyXG4gIHNvY2tldDogYW55O1xyXG4gIHJvdXRlcjogYW55O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb250ZW50KHtcclxuICB0ZXh0LFxyXG4gIHNldFRleHQsXHJcbiAgc29ja2V0LFxyXG4gIHJvdXRlcixcclxufTogUHJvcHMpIHtcclxuICBjb25zdCBbZGl2SGVpZ2h0LCBzZXREaXZIZWlnaHRdID0gdXNlU3RhdGUoMCk7XHJcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBzZXREaXZIZWlnaHQocmVmPy5jdXJyZW50Py5jbGllbnRIZWlnaHQpO1xyXG4gIH0sIFtyZWYsIHJlZj8uY3VycmVudF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiByZWY9e3JlZn0gY2xhc3NOYW1lPVwiaC1mdWxsIHctZnVsbCBmbGV4LTFcIj5cclxuICAgICAgPE1ERWRpdG9yXHJcbiAgICAgICAgaGVpZ2h0PXtkaXZIZWlnaHR9XHJcbiAgICAgICAgdmFsdWU9e3RleHR9XHJcbiAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XHJcbiAgICAgICAgICBzb2NrZXQuZW1pdCgnc2VuZC10ZXh0JywgZSwgcm91dGVyLmFzUGF0aC5zcGxpdCgnIycpWzFdKTtcclxuICAgICAgICAgIHNldFRleHQoZSB8fCAnJyk7XHJcbiAgICAgICAgfX1cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwiZHluYW1pYyIsIk1ERWRpdG9yIiwic3NyIiwiQ29udGVudCIsInRleHQiLCJzZXRUZXh0Iiwic29ja2V0Iiwicm91dGVyIiwicmVmIiwiZGl2SGVpZ2h0Iiwic2V0RGl2SGVpZ2h0IiwiY3VycmVudCIsImNsaWVudEhlaWdodCIsImRpdiIsImNsYXNzTmFtZSIsImhlaWdodCIsInZhbHVlIiwib25DaGFuZ2UiLCJlIiwiZW1pdCIsImFzUGF0aCIsInNwbGl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Content.tsx\n"));

/***/ }),

/***/ "./src/components/Footer.tsx":
/*!***********************************!*\
  !*** ./src/components/Footer.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Footer; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction Footer() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"py-1 flex flex-col justify-center bg-gray-100 items-center w-full\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n            className: \"text-sm text-[#363636] font-medium\",\n            children: [\n                \"Created by:\",\n                \" \",\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                    href: \"https://maxaljadery.com\",\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    className: \"hover:underline\",\n                    children: \"Max Aljadery\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Footer.tsx\",\n                    lineNumber: 6,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Footer.tsx\",\n            lineNumber: 4,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Footer.tsx\",\n        lineNumber: 3,\n        columnNumber: 5\n    }, this);\n}\n_c = Footer;\nvar _c;\n$RefreshReg$(_c, \"Footer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Gb290ZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZSxTQUFTQTtJQUN0QixxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTtrQkFDYiw0RUFBQ0M7WUFBRUQsV0FBVTs7Z0JBQXFDO2dCQUNwQzs4QkFDWiw4REFBQ0U7b0JBQ0NDLE1BQUs7b0JBQ0xDLFFBQU87b0JBQ1BDLEtBQUk7b0JBQ0pMLFdBQVU7OEJBQ1g7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTVQ7S0FoQndCRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9Gb290ZXIudHN4PzM1MWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9vdGVyKCkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTEgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBiZy1ncmF5LTEwMCBpdGVtcy1jZW50ZXIgdy1mdWxsXCI+XHJcbiAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1bIzM2MzYzNl0gZm9udC1tZWRpdW1cIj5cclxuICAgICAgICBDcmVhdGVkIGJ5OnsnICd9XHJcbiAgICAgICAgPGFcclxuICAgICAgICAgIGhyZWY9XCJodHRwczovL21heGFsamFkZXJ5LmNvbVwiXHJcbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJob3Zlcjp1bmRlcmxpbmVcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIE1heCBBbGphZGVyeVxyXG4gICAgICAgIDwvYT5cclxuICAgICAgPC9wPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiRm9vdGVyIiwiZGl2IiwiY2xhc3NOYW1lIiwicCIsImEiLCJocmVmIiwidGFyZ2V0IiwicmVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/Footer.tsx\n"));

/***/ }),

/***/ "./src/components/Header.tsx":
/*!***********************************!*\
  !*** ./src/components/Header.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Header; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction Header() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"bg-gray-200 py-1.5 flex flex-col jusitfy-center items-center\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n            className: \"text-sm font-semibold text-[#363636]\",\n            children: \"Collaborative Text Editor\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Header.tsx\",\n            lineNumber: 4,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Header.tsx\",\n        lineNumber: 3,\n        columnNumber: 5\n    }, this);\n}\n_c = Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9IZWFkZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZSxTQUFTQTtJQUN0QixxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTtrQkFDYiw0RUFBQ0M7WUFBRUQsV0FBVTtzQkFBdUM7Ozs7Ozs7Ozs7O0FBSzFEO0tBUndCRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIudHN4P2E2OTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVhZGVyKCkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktMjAwIHB5LTEuNSBmbGV4IGZsZXgtY29sIGp1c2l0ZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgdGV4dC1bIzM2MzYzNl1cIj5cclxuICAgICAgICBDb2xsYWJvcmF0aXZlIFRleHQgRWRpdG9yXHJcbiAgICAgIDwvcD5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkhlYWRlciIsImRpdiIsImNsYXNzTmFtZSIsInAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/Header.tsx\n"));

/***/ }),

/***/ "./src/components/Sidebar.tsx":
/*!************************************!*\
  !*** ./src/components/Sidebar.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sidebar; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"./node_modules/react-hot-toast/dist/index.mjs\");\n\nvar _s = $RefreshSig$();\n\n\nfunction Sidebar(param) {\n    let { connected } = param;\n    _s();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_1__.useRouter)();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-w-[340px] p-4 bg-[#F3F3F3] flex flex-col\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-row space-x-3\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"h-[10px] w-[10px] my-auto rounded-full \" + (connected ? \"bg-[#008140]\" : \"bg-[#FF0000]\")\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                        lineNumber: 13,\n                        columnNumber: 9\n                    }, this),\n                    !connected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm my-auto font-medium text-[#363636]\",\n                        children: \"Connecting...\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                        lineNumber: 20,\n                        columnNumber: 11\n                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm my-auto italic font-medium text-[#363636]\",\n                        children: \"You are connected!\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                        lineNumber: 24,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                lineNumber: 12,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-4 flex flex-col w-full space-y-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-base font-semibold\",\n                        children: \"Share Link\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                        lineNumber: 30,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"border w-full rounded flex flex-row bg-white space-x-3 py-1.5 px-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                value: \"http://localhost:3000\".concat(router.asPath),\n                                className: \"w-full text-sm font-regular text-gray-600 focus:ring-0 focus:outline-none focus:border-none\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                                lineNumber: 32,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    navigator.clipboard.writeText(\"http://localhost:3000\".concat(router.asPath));\n                                    react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].success(\"Copied to clipboard!\", {\n                                        className: \"text-sm text-[#363636] font-medium\"\n                                    });\n                                },\n                                className: \"my-auto h-full px-2 hover:bg-gray-300 rounded bg-gray-200 text-[#363636] text-sm font-medium\",\n                                children: \"Copy\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                                lineNumber: 36,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n                lineNumber: 29,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\components\\\\Sidebar.tsx\",\n        lineNumber: 11,\n        columnNumber: 5\n    }, this);\n}\n_s(Sidebar, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_1__.useRouter\n    ];\n});\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9TaWRlYmFyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF3QztBQUNKO0FBTXJCLFNBQVNFLFFBQVEsS0FBb0I7UUFBcEIsRUFBRUMsU0FBUyxFQUFTLEdBQXBCOztJQUM5QixNQUFNQyxTQUFTSixzREFBU0E7SUFDeEIscUJBQ0UsOERBQUNLO1FBQUlDLFdBQVU7OzBCQUNiLDhEQUFDRDtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUNEO3dCQUNDQyxXQUNFLDRDQUNDSCxDQUFBQSxZQUFZLGlCQUFpQixjQUFhOzs7Ozs7b0JBRzlDLENBQUNBLDBCQUNBLDhEQUFDSTt3QkFBRUQsV0FBVTtrQ0FBNkM7Ozs7OzZDQUkxRCw4REFBQ0M7d0JBQUVELFdBQVU7a0NBQW9EOzs7Ozs7Ozs7Ozs7MEJBS3JFLDhEQUFDRDtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUNDO3dCQUFFRCxXQUFVO2tDQUEwQjs7Ozs7O2tDQUN2Qyw4REFBQ0Q7d0JBQUlDLFdBQVU7OzBDQUNiLDhEQUFDRTtnQ0FDQ0MsT0FBTyx3QkFBc0MsT0FBZEwsT0FBT00sTUFBTTtnQ0FDNUNKLFdBQVU7Ozs7OzswQ0FFWiw4REFBQ0s7Z0NBQ0NDLFNBQVM7b0NBQ1BDLFVBQVVDLFNBQVMsQ0FBQ0MsU0FBUyxDQUMzQix3QkFBc0MsT0FBZFgsT0FBT00sTUFBTTtvQ0FFdkNULCtEQUFhLENBQUMsd0JBQXdCO3dDQUNwQ0ssV0FBVztvQ0FDYjtnQ0FDRjtnQ0FDQUEsV0FBVTswQ0FDWDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT1g7R0E3Q3dCSjs7UUFDUEYsa0RBQVNBOzs7S0FERkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvU2lkZWJhci50c3g/NTU1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcic7XHJcbmltcG9ydCB0b2FzdCBmcm9tICdyZWFjdC1ob3QtdG9hc3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjb25uZWN0ZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpZGViYXIoeyBjb25uZWN0ZWQgfTogUHJvcHMpIHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtaW4tdy1bMzQwcHhdIHAtNCBiZy1bI0YzRjNGM10gZmxleCBmbGV4LWNvbFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgc3BhY2UteC0zXCI+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgJ2gtWzEwcHhdIHctWzEwcHhdIG15LWF1dG8gcm91bmRlZC1mdWxsICcgK1xyXG4gICAgICAgICAgICAoY29ubmVjdGVkID8gJ2JnLVsjMDA4MTQwXScgOiAnYmctWyNGRjAwMDBdJylcclxuICAgICAgICAgIH1cclxuICAgICAgICAvPlxyXG4gICAgICAgIHshY29ubmVjdGVkID8gKFxyXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBteS1hdXRvIGZvbnQtbWVkaXVtIHRleHQtWyMzNjM2MzZdXCI+XHJcbiAgICAgICAgICAgIENvbm5lY3RpbmcuLi5cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICApIDogKFxyXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBteS1hdXRvIGl0YWxpYyBmb250LW1lZGl1bSB0ZXh0LVsjMzYzNjM2XVwiPlxyXG4gICAgICAgICAgICBZb3UgYXJlIGNvbm5lY3RlZCFcclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC00IGZsZXggZmxleC1jb2wgdy1mdWxsIHNwYWNlLXktMlwiPlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtYmFzZSBmb250LXNlbWlib2xkXCI+U2hhcmUgTGluazwvcD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlciB3LWZ1bGwgcm91bmRlZCBmbGV4IGZsZXgtcm93IGJnLXdoaXRlIHNwYWNlLXgtMyBweS0xLjUgcHgtMlwiPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIHZhbHVlPXtgaHR0cDovL2xvY2FsaG9zdDozMDAwJHtyb3V0ZXIuYXNQYXRofWB9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCB0ZXh0LXNtIGZvbnQtcmVndWxhciB0ZXh0LWdyYXktNjAwIGZvY3VzOnJpbmctMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6Ym9yZGVyLW5vbmVcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KFxyXG4gICAgICAgICAgICAgICAgYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCR7cm91dGVyLmFzUGF0aH1gXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0b2FzdC5zdWNjZXNzKCdDb3BpZWQgdG8gY2xpcGJvYXJkIScsIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RleHQtc20gdGV4dC1bIzM2MzYzNl0gZm9udC1tZWRpdW0nLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJteS1hdXRvIGgtZnVsbCBweC0yIGhvdmVyOmJnLWdyYXktMzAwIHJvdW5kZWQgYmctZ3JheS0yMDAgdGV4dC1bIzM2MzYzNl0gdGV4dC1zbSBmb250LW1lZGl1bVwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIENvcHlcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZVJvdXRlciIsInRvYXN0IiwiU2lkZWJhciIsImNvbm5lY3RlZCIsInJvdXRlciIsImRpdiIsImNsYXNzTmFtZSIsInAiLCJpbnB1dCIsInZhbHVlIiwiYXNQYXRoIiwiYnV0dG9uIiwib25DbGljayIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInN1Y2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/Sidebar.tsx\n"));

/***/ }),

/***/ "./src/pages/index.tsx":
/*!*****************************!*\
  !*** ./src/pages/index.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"./node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/Header */ \"./src/components/Header.tsx\");\n/* harmony import */ var _components_Footer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/Footer */ \"./src/components/Footer.tsx\");\n/* harmony import */ var _components_Sidebar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/Sidebar */ \"./src/components/Sidebar.tsx\");\n/* harmony import */ var _components_Content__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/Content */ \"./src/components/Content.tsx\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nfunction Home() {\n    _s();\n    const [connected, setConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [text, setText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)(\"http://localhost:5000\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (router.isReady) {\n            socket.on(\"connect\", ()=>{\n                setConnected(true);\n            });\n            socket.on(\"receive-text\", (text)=>{\n                setText(text);\n            });\n            if (router.asPath.split(\"#\")[1]) {\n                socket.emit(\"join-room\", String(router.asPath.split(\"#\")[1]));\n            } else {\n                const number = Math.floor(Math.random() * 10000000);\n                router.push(\"/#\" + number);\n            }\n        }\n    }, [\n        router.isReady\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col h-[100vh] w-[100vw]\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Header__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n                lineNumber: 36,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-row flex-1 h-full w-full\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Sidebar__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                        connected: connected\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n                        lineNumber: 38,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Content__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        text: text,\n                        setText: setText,\n                        socket: socket,\n                        router: router\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n                        lineNumber: 39,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n                lineNumber: 37,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Footer__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n                lineNumber: 46,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\malja\\\\Desktop\\\\projects\\\\collaborative-texteditor\\\\frontend\\\\src\\\\pages\\\\index.tsx\",\n        lineNumber: 35,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"B/mUZSLX+IyonfSrNcBflu0KHAs=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ047QUFDRTtBQUNDO0FBQ0E7QUFDRTtBQUNBO0FBRTVCLFNBQVNROztJQUN0QixNQUFNLENBQUNDLFdBQVdDLGFBQWEsR0FBR1YsK0NBQVFBLENBQUM7SUFDM0MsTUFBTSxDQUFDVyxNQUFNQyxRQUFRLEdBQUdaLCtDQUFRQSxDQUFDO0lBQ2pDLE1BQU1hLFNBQVNWLHNEQUFTQTtJQUN4QixNQUFNVyxTQUFTWixvREFBRUEsQ0FBQztJQUVsQkQsZ0RBQVNBLENBQUM7UUFDUixJQUFJWSxPQUFPRSxPQUFPLEVBQUU7WUFDbEJELE9BQU9FLEVBQUUsQ0FBQyxXQUFXO2dCQUNuQk4sYUFBYTtZQUNmO1lBRUFJLE9BQU9FLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQ0w7Z0JBQ3pCQyxRQUFRRDtZQUNWO1lBRUEsSUFBSUUsT0FBT0ksTUFBTSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDL0JKLE9BQU9LLElBQUksQ0FBQyxhQUFhQyxPQUFPUCxPQUFPSSxNQUFNLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3RCxPQUFPO2dCQUNMLE1BQU1HLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLO2dCQUMxQ1gsT0FBT1ksSUFBSSxDQUFDLE9BQU9KO1lBQ3JCO1FBQ0Y7SUFDRixHQUFHO1FBQUNSLE9BQU9FLE9BQU87S0FBQztJQUVuQixxQkFDRSw4REFBQ1c7UUFBSUMsV0FBVTs7MEJBQ2IsOERBQUN2QiwwREFBTUE7Ozs7OzBCQUNQLDhEQUFDc0I7Z0JBQUlDLFdBQVU7O2tDQUNiLDhEQUFDckIsMkRBQU9BO3dCQUFDRyxXQUFXQTs7Ozs7O2tDQUNwQiw4REFBQ0YsMkRBQU9BO3dCQUNOSSxNQUFNQTt3QkFDTkMsU0FBU0E7d0JBQ1RFLFFBQVFBO3dCQUNSRCxRQUFRQTs7Ozs7Ozs7Ozs7OzBCQUdaLDhEQUFDUiwwREFBTUE7Ozs7Ozs7Ozs7O0FBR2I7R0F4Q3dCRzs7UUFHUEwsa0RBQVNBOzs7S0FIRksiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3BhZ2VzL2luZGV4LnRzeD8xOWEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbyB9IGZyb20gJ3NvY2tldC5pby1jbGllbnQnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInO1xuaW1wb3J0IEhlYWRlciBmcm9tICdAL2NvbXBvbmVudHMvSGVhZGVyJztcbmltcG9ydCBGb290ZXIgZnJvbSAnQC9jb21wb25lbnRzL0Zvb3Rlcic7XG5pbXBvcnQgU2lkZWJhciBmcm9tICdAL2NvbXBvbmVudHMvU2lkZWJhcic7XG5pbXBvcnQgQ29udGVudCBmcm9tICdAL2NvbXBvbmVudHMvQ29udGVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7XG4gIGNvbnN0IFtjb25uZWN0ZWQsIHNldENvbm5lY3RlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt0ZXh0LCBzZXRUZXh0XSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IHNvY2tldCA9IGlvKCdodHRwOi8vbG9jYWxob3N0OjUwMDAnKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyb3V0ZXIuaXNSZWFkeSkge1xuICAgICAgc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBzZXRDb25uZWN0ZWQodHJ1ZSk7XG4gICAgICB9KTtcblxuICAgICAgc29ja2V0Lm9uKCdyZWNlaXZlLXRleHQnLCAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldFRleHQodGV4dCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJvdXRlci5hc1BhdGguc3BsaXQoJyMnKVsxXSkge1xuICAgICAgICBzb2NrZXQuZW1pdCgnam9pbi1yb29tJywgU3RyaW5nKHJvdXRlci5hc1BhdGguc3BsaXQoJyMnKVsxXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDApO1xuICAgICAgICByb3V0ZXIucHVzaCgnLyMnICsgbnVtYmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtyb3V0ZXIuaXNSZWFkeV0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGgtWzEwMHZoXSB3LVsxMDB2d11cIj5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXJvdyBmbGV4LTEgaC1mdWxsIHctZnVsbFwiPlxuICAgICAgICA8U2lkZWJhciBjb25uZWN0ZWQ9e2Nvbm5lY3RlZH0gLz5cbiAgICAgICAgPENvbnRlbnRcbiAgICAgICAgICB0ZXh0PXt0ZXh0fVxuICAgICAgICAgIHNldFRleHQ9e3NldFRleHR9XG4gICAgICAgICAgc29ja2V0PXtzb2NrZXR9XG4gICAgICAgICAgcm91dGVyPXtyb3V0ZXJ9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxGb290ZXIgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImlvIiwidXNlUm91dGVyIiwiSGVhZGVyIiwiRm9vdGVyIiwiU2lkZWJhciIsIkNvbnRlbnQiLCJIb21lIiwiY29ubmVjdGVkIiwic2V0Q29ubmVjdGVkIiwidGV4dCIsInNldFRleHQiLCJyb3V0ZXIiLCJzb2NrZXQiLCJpc1JlYWR5Iiwib24iLCJhc1BhdGgiLCJzcGxpdCIsImVtaXQiLCJTdHJpbmciLCJudW1iZXIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwdXNoIiwiZGl2IiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/index.tsx\n"));

/***/ }),

/***/ "./node_modules/@socket.io/component-emitter/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@socket.io/component-emitter/index.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitter: function() { return /* binding */ Emitter; }\n/* harmony export */ });\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function (event, fn) {\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function (event) {\n  this._callbacks = this._callbacks || {};\n  var args = new Array(arguments.length - 1),\n    callbacks = this._callbacks['$' + event];\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function (event) {\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function (event) {\n  return !!this.listeners(event).length;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlci9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sU0FBU0EsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQzNCLElBQUlBLEdBQUcsRUFBRSxPQUFPQyxLQUFLLENBQUNELEdBQUcsQ0FBQztBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQyxLQUFLQSxDQUFDRCxHQUFHLEVBQUU7RUFDbEIsS0FBSyxJQUFJRSxHQUFHLElBQUlILE9BQU8sQ0FBQ0ksU0FBUyxFQUFFO0lBQ2pDSCxHQUFHLENBQUNFLEdBQUcsQ0FBQyxHQUFHSCxPQUFPLENBQUNJLFNBQVMsQ0FBQ0QsR0FBRyxDQUFDO0VBQ25DO0VBQ0EsT0FBT0YsR0FBRztBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFELE9BQU8sQ0FBQ0ksU0FBUyxDQUFDQyxFQUFFLEdBQ3BCTCxPQUFPLENBQUNJLFNBQVMsQ0FBQ0UsZ0JBQWdCLEdBQUcsVUFBU0MsS0FBSyxFQUFFQyxFQUFFLEVBQUM7RUFDdEQsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLENBQUMsSUFBSSxDQUFDQSxVQUFVLENBQUMsR0FBRyxHQUFHRixLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNFLFVBQVUsQ0FBQyxHQUFHLEdBQUdGLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFDL0RHLElBQUksQ0FBQ0YsRUFBRSxDQUFDO0VBQ1gsT0FBTyxJQUFJO0FBQ2IsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFSLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDTyxJQUFJLEdBQUcsVUFBU0osS0FBSyxFQUFFQyxFQUFFLEVBQUM7RUFDMUMsU0FBU0gsRUFBRUEsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDTyxHQUFHLENBQUNMLEtBQUssRUFBRUYsRUFBRSxDQUFDO0lBQ25CRyxFQUFFLENBQUNLLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztFQUMzQjtFQUVBVCxFQUFFLENBQUNHLEVBQUUsR0FBR0EsRUFBRTtFQUNWLElBQUksQ0FBQ0gsRUFBRSxDQUFDRSxLQUFLLEVBQUVGLEVBQUUsQ0FBQztFQUNsQixPQUFPLElBQUk7QUFDYixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUwsT0FBTyxDQUFDSSxTQUFTLENBQUNRLEdBQUcsR0FDckJaLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDVyxjQUFjLEdBQ2hDZixPQUFPLENBQUNJLFNBQVMsQ0FBQ1ksa0JBQWtCLEdBQ3BDaEIsT0FBTyxDQUFDSSxTQUFTLENBQUNhLG1CQUFtQixHQUFHLFVBQVNWLEtBQUssRUFBRUMsRUFBRSxFQUFDO0VBQ3pELElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxJQUFJLENBQUMsQ0FBQzs7RUFFdkM7RUFDQSxJQUFJLENBQUMsSUFBSUssU0FBUyxDQUFDSSxNQUFNLEVBQUU7SUFDekIsSUFBSSxDQUFDVCxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0VBQ0EsSUFBSVUsU0FBUyxHQUFHLElBQUksQ0FBQ1YsVUFBVSxDQUFDLEdBQUcsR0FBR0YsS0FBSyxDQUFDO0VBQzVDLElBQUksQ0FBQ1ksU0FBUyxFQUFFLE9BQU8sSUFBSTs7RUFFM0I7RUFDQSxJQUFJLENBQUMsSUFBSUwsU0FBUyxDQUFDSSxNQUFNLEVBQUU7SUFDekIsT0FBTyxJQUFJLENBQUNULFVBQVUsQ0FBQyxHQUFHLEdBQUdGLEtBQUssQ0FBQztJQUNuQyxPQUFPLElBQUk7RUFDYjs7RUFFQTtFQUNBLElBQUlhLEVBQUU7RUFDTixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsU0FBUyxDQUFDRCxNQUFNLEVBQUVHLENBQUMsRUFBRSxFQUFFO0lBQ3pDRCxFQUFFLEdBQUdELFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDO0lBQ2pCLElBQUlELEVBQUUsS0FBS1osRUFBRSxJQUFJWSxFQUFFLENBQUNaLEVBQUUsS0FBS0EsRUFBRSxFQUFFO01BQzdCVyxTQUFTLENBQUNHLE1BQU0sQ0FBQ0QsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUN0QjtJQUNGO0VBQ0Y7O0VBRUE7RUFDQTtFQUNBLElBQUlGLFNBQVMsQ0FBQ0QsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUMxQixPQUFPLElBQUksQ0FBQ1QsVUFBVSxDQUFDLEdBQUcsR0FBR0YsS0FBSyxDQUFDO0VBQ3JDO0VBRUEsT0FBTyxJQUFJO0FBQ2IsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVAsT0FBTyxDQUFDSSxTQUFTLENBQUNtQixJQUFJLEdBQUcsVUFBU2hCLEtBQUssRUFBQztFQUN0QyxJQUFJLENBQUNFLFVBQVUsR0FBRyxJQUFJLENBQUNBLFVBQVUsSUFBSSxDQUFDLENBQUM7RUFFdkMsSUFBSWUsSUFBSSxHQUFHLElBQUlDLEtBQUssQ0FBQ1gsU0FBUyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDQyxTQUFTLEdBQUcsSUFBSSxDQUFDVixVQUFVLENBQUMsR0FBRyxHQUFHRixLQUFLLENBQUM7RUFFNUMsS0FBSyxJQUFJYyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ0ksTUFBTSxFQUFFRyxDQUFDLEVBQUUsRUFBRTtJQUN6Q0csSUFBSSxDQUFDSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ08sQ0FBQyxDQUFDO0VBQzVCO0VBRUEsSUFBSUYsU0FBUyxFQUFFO0lBQ2JBLFNBQVMsR0FBR0EsU0FBUyxDQUFDTyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlCLEtBQUssSUFBSUwsQ0FBQyxHQUFHLENBQUMsRUFBRU0sR0FBRyxHQUFHUixTQUFTLENBQUNELE1BQU0sRUFBRUcsQ0FBQyxHQUFHTSxHQUFHLEVBQUUsRUFBRU4sQ0FBQyxFQUFFO01BQ3BERixTQUFTLENBQUNFLENBQUMsQ0FBQyxDQUFDUixLQUFLLENBQUMsSUFBSSxFQUFFVyxJQUFJLENBQUM7SUFDaEM7RUFDRjtFQUVBLE9BQU8sSUFBSTtBQUNiLENBQUM7O0FBRUQ7QUFDQXhCLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDd0IsWUFBWSxHQUFHNUIsT0FBTyxDQUFDSSxTQUFTLENBQUNtQixJQUFJOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQXZCLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDeUIsU0FBUyxHQUFHLFVBQVN0QixLQUFLLEVBQUM7RUFDM0MsSUFBSSxDQUFDRSxVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLE9BQU8sSUFBSSxDQUFDQSxVQUFVLENBQUMsR0FBRyxHQUFHRixLQUFLLENBQUMsSUFBSSxFQUFFO0FBQzNDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFQLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDMEIsWUFBWSxHQUFHLFVBQVN2QixLQUFLLEVBQUM7RUFDOUMsT0FBTyxDQUFDLENBQUUsSUFBSSxDQUFDc0IsU0FBUyxDQUFDdEIsS0FBSyxDQUFDLENBQUNXLE1BQU07QUFDeEMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlci9pbmRleC5tanM/MDViMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub24gPVxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxuICAgIC5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgZnVuY3Rpb24gb24oKSB7XG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb24uZm4gPSBmbjtcbiAgdGhpcy5vbihldmVudCwgb24pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICAvLyBhbGxcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcblxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXG4gIHZhciBjYjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBldmVudCBzcGVjaWZpYyBhcnJheXMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgbm9cbiAgLy8gb25lIGlzIHN1YnNjcmliZWQgZm9yIHRvIGF2b2lkIG1lbW9yeSBsZWFrLlxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtNaXhlZH0gLi4uXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgfVxuXG4gIGlmIChjYWxsYmFja3MpIHtcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gYWxpYXMgdXNlZCBmb3IgcmVzZXJ2ZWQgZXZlbnRzIChwcm90ZWN0ZWQgbWV0aG9kKVxuRW1pdHRlci5wcm90b3R5cGUuZW1pdFJlc2VydmVkID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcbn07XG4iXSwibmFtZXMiOlsiRW1pdHRlciIsIm9iaiIsIm1peGluIiwia2V5IiwicHJvdG90eXBlIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJwdXNoIiwib25jZSIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGVuZ3RoIiwiY2FsbGJhY2tzIiwiY2IiLCJpIiwic3BsaWNlIiwiZW1pdCIsImFyZ3MiLCJBcnJheSIsInNsaWNlIiwibGVuIiwiZW1pdFJlc2VydmVkIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@socket.io/component-emitter/index.mjs\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/contrib/has-cors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/contrib/has-cors.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasCORS: function() { return /* binding */ hasCORS; }\n/* harmony export */ });\n// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n  value = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n}\nconst hasCORS = value;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9oYXMtY29ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxJQUFJQSxLQUFLLEdBQUcsS0FBSztBQUNqQixJQUFJO0VBQ0FBLEtBQUssR0FBRyxPQUFPQyxjQUFjLEtBQUssV0FBVyxJQUN6QyxpQkFBaUIsSUFBSSxJQUFJQSxjQUFjLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQ0QsT0FBT0MsR0FBRyxFQUFFO0VBQ1I7RUFDQTtBQUFBO0FBRUcsTUFBTUMsT0FBTyxHQUFHSCxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL2hhcy1jb3JzLmpzPzExYzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY29tcG9uZW50L2hhcy1jb3JzXG5sZXQgdmFsdWUgPSBmYWxzZTtcbnRyeSB7XG4gICAgdmFsdWUgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufVxuY2F0Y2ggKGVycikge1xuICAgIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbn1cbmV4cG9ydCBjb25zdCBoYXNDT1JTID0gdmFsdWU7XG4iXSwibmFtZXMiOlsidmFsdWUiLCJYTUxIdHRwUmVxdWVzdCIsImVyciIsImhhc0NPUlMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/contrib/has-cors.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/contrib/parseqs.js":
/*!********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/contrib/parseqs.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nfunction encode(obj) {\n  let str = '';\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += '&';\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n    }\n  }\n  return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nfunction decode(qs) {\n  let qry = {};\n  let pairs = qs.split('&');\n  for (let i = 0, l = pairs.length; i < l; i++) {\n    let pair = pairs[i].split('=');\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9wYXJzZXFzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLE1BQU1BLENBQUNDLEdBQUcsRUFBRTtFQUN4QixJQUFJQyxHQUFHLEdBQUcsRUFBRTtFQUNaLEtBQUssSUFBSUMsQ0FBQyxJQUFJRixHQUFHLEVBQUU7SUFDZixJQUFJQSxHQUFHLENBQUNHLGNBQWMsQ0FBQ0QsQ0FBQyxDQUFDLEVBQUU7TUFDdkIsSUFBSUQsR0FBRyxDQUFDRyxNQUFNLEVBQ1ZILEdBQUcsSUFBSSxHQUFHO01BQ2RBLEdBQUcsSUFBSUksa0JBQWtCLENBQUNILENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBR0csa0JBQWtCLENBQUNMLEdBQUcsQ0FBQ0UsQ0FBQyxDQUFDLENBQUM7SUFDbkU7RUFDSjtFQUNBLE9BQU9ELEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNLLE1BQU1BLENBQUNDLEVBQUUsRUFBRTtFQUN2QixJQUFJQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ1osSUFBSUMsS0FBSyxHQUFHRixFQUFFLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDekIsS0FBSyxJQUFJUixDQUFDLEdBQUcsQ0FBQyxFQUFFUyxDQUFDLEdBQUdGLEtBQUssQ0FBQ0wsTUFBTSxFQUFFRixDQUFDLEdBQUdTLENBQUMsRUFBRVQsQ0FBQyxFQUFFLEVBQUU7SUFDMUMsSUFBSVUsSUFBSSxHQUFHSCxLQUFLLENBQUNQLENBQUMsQ0FBQyxDQUFDUSxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzlCRixHQUFHLENBQUNLLGtCQUFrQixDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHQyxrQkFBa0IsQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xFO0VBQ0EsT0FBT0osR0FBRztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL3BhcnNlcXMuanM/MzM1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWxrbi9xdWVyeXN0cmluZ1xuLyoqXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShvYmopIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgc3RyICs9ICcmJztcbiAgICAgICAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHFzKSB7XG4gICAgbGV0IHFyeSA9IHt9O1xuICAgIGxldCBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgICAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHFyeTtcbn1cbiJdLCJuYW1lcyI6WyJlbmNvZGUiLCJvYmoiLCJzdHIiLCJpIiwiaGFzT3duUHJvcGVydHkiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJxcyIsInFyeSIsInBhaXJzIiwic3BsaXQiLCJsIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/contrib/parseqs.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/contrib/parseuri.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/contrib/parseuri.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: function() { return /* binding */ parse; }\n/* harmony export */ });\n// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\nfunction parse(str) {\n  const src = str,\n    b = str.indexOf('['),\n    e = str.indexOf(']');\n  if (b != -1 && e != -1) {\n    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n  }\n  let m = re.exec(str || ''),\n    uri = {},\n    i = 14;\n  while (i--) {\n    uri[parts[i]] = m[i] || '';\n  }\n  if (b != -1 && e != -1) {\n    uri.source = src;\n    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n    uri.ipv6uri = true;\n  }\n  uri.pathNames = pathNames(uri, uri['path']);\n  uri.queryKey = queryKey(uri, uri['query']);\n  return uri;\n}\nfunction pathNames(obj, path) {\n  const regx = /\\/{2,9}/g,\n    names = path.replace(regx, \"/\").split(\"/\");\n  if (path.slice(0, 1) == '/' || path.length === 0) {\n    names.splice(0, 1);\n  }\n  if (path.slice(-1) == '/') {\n    names.splice(names.length - 1, 1);\n  }\n  return names;\n}\nfunction queryKey(uri, query) {\n  const data = {};\n  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n    if ($1) {\n      data[$1] = $2;\n    }\n  });\n  return data;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9wYXJzZXVyaS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxFQUFFLEdBQUcscVBBQXFQO0FBQ2hRLE1BQU1DLEtBQUssR0FBRyxDQUNWLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQ2hKO0FBQ00sU0FBU0MsS0FBS0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3ZCLE1BQU1DLEdBQUcsR0FBR0QsR0FBRztJQUFFRSxDQUFDLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUFFQyxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLEdBQUcsQ0FBQztFQUMzRCxJQUFJRCxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUlFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtJQUNwQkosR0FBRyxHQUFHQSxHQUFHLENBQUNLLFNBQVMsQ0FBQyxDQUFDLEVBQUVILENBQUMsQ0FBQyxHQUFHRixHQUFHLENBQUNLLFNBQVMsQ0FBQ0gsQ0FBQyxFQUFFRSxDQUFDLENBQUMsQ0FBQ0UsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBR04sR0FBRyxDQUFDSyxTQUFTLENBQUNELENBQUMsRUFBRUosR0FBRyxDQUFDTyxNQUFNLENBQUM7RUFDckc7RUFDQSxJQUFJQyxDQUFDLEdBQUdYLEVBQUUsQ0FBQ1ksSUFBSSxDQUFDVCxHQUFHLElBQUksRUFBRSxDQUFDO0lBQUVVLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFBRUMsQ0FBQyxHQUFHLEVBQUU7RUFDNUMsT0FBT0EsQ0FBQyxFQUFFLEVBQUU7SUFDUkQsR0FBRyxDQUFDWixLQUFLLENBQUNhLENBQUMsQ0FBQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0csQ0FBQyxDQUFDLElBQUksRUFBRTtFQUM5QjtFQUNBLElBQUlULENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0lBQ3BCTSxHQUFHLENBQUNFLE1BQU0sR0FBR1gsR0FBRztJQUNoQlMsR0FBRyxDQUFDRyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0csSUFBSSxDQUFDUixTQUFTLENBQUMsQ0FBQyxFQUFFSyxHQUFHLENBQUNHLElBQUksQ0FBQ04sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDRCxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUN4RUksR0FBRyxDQUFDSSxTQUFTLEdBQUdKLEdBQUcsQ0FBQ0ksU0FBUyxDQUFDUixPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDQSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDQSxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUNsRkksR0FBRyxDQUFDSyxPQUFPLEdBQUcsSUFBSTtFQUN0QjtFQUNBTCxHQUFHLENBQUNNLFNBQVMsR0FBR0EsU0FBUyxDQUFDTixHQUFHLEVBQUVBLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUMzQ0EsR0FBRyxDQUFDTyxRQUFRLEdBQUdBLFFBQVEsQ0FBQ1AsR0FBRyxFQUFFQSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDMUMsT0FBT0EsR0FBRztBQUNkO0FBQ0EsU0FBU00sU0FBU0EsQ0FBQ0UsR0FBRyxFQUFFQyxJQUFJLEVBQUU7RUFDMUIsTUFBTUMsSUFBSSxHQUFHLFVBQVU7SUFBRUMsS0FBSyxHQUFHRixJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDRSxLQUFLLENBQUMsR0FBRyxDQUFDO0VBQ25FLElBQUlILElBQUksQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUlKLElBQUksQ0FBQ1osTUFBTSxLQUFLLENBQUMsRUFBRTtJQUM5Q2MsS0FBSyxDQUFDRyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN0QjtFQUNBLElBQUlMLElBQUksQ0FBQ0ksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFO0lBQ3ZCRixLQUFLLENBQUNHLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDZCxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNyQztFQUNBLE9BQU9jLEtBQUs7QUFDaEI7QUFDQSxTQUFTSixRQUFRQSxDQUFDUCxHQUFHLEVBQUVlLEtBQUssRUFBRTtFQUMxQixNQUFNQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0VBQ2ZELEtBQUssQ0FBQ25CLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxVQUFVcUIsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRTtJQUM3RCxJQUFJRCxFQUFFLEVBQUU7TUFDSkYsSUFBSSxDQUFDRSxFQUFFLENBQUMsR0FBR0MsRUFBRTtJQUNqQjtFQUNKLENBQUMsQ0FBQztFQUNGLE9BQU9ILElBQUk7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9wYXJzZXVyaS5qcz8zYTVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dhbGtuL3BhcnNldXJpXG4vKipcbiAqIFBhcnNlcyBhIFVSSVxuICpcbiAqIE5vdGU6IHdlIGNvdWxkIGFsc28gaGF2ZSB1c2VkIHRoZSBidWlsdC1pbiBVUkwgb2JqZWN0LCBidXQgaXQgaXNuJ3Qgc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMuXG4gKlxuICogU2VlOlxuICogLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJMXG4gKiAtIGh0dHBzOi8vY2FuaXVzZS5jb20vdXJsXG4gKiAtIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqXG4gKiBIaXN0b3J5IG9mIHRoZSBwYXJzZSgpIG1ldGhvZDpcbiAqIC0gZmlyc3QgY29tbWl0OiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0aW8vc29ja2V0LmlvLWNsaWVudC9jb21taXQvNGVlMWQ1ZDk0YjM5MDZhOWMwNTJiNDU5ZjFhODE4YjE1ZjM4ZjkxY1xuICogLSBleHBvcnQgaW50byBpdHMgb3duIG1vZHVsZTogaHR0cHM6Ly9naXRodWIuY29tL3NvY2tldGlvL2VuZ2luZS5pby1jbGllbnQvY29tbWl0L2RlMmM1NjFlNDU2NGVmZWI3OGYxYmRiMWJhMzllZjgxYjI4MjJjYjNcbiAqIC0gcmVpbXBvcnQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NrZXRpby9lbmdpbmUuaW8tY2xpZW50L2NvbW1pdC9kZjMyMjc3YzNmNmQ2MjJlZWM1ZWQwOWY0OTNjYWUzZjMzOTFkMjQyXG4gKlxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmNvbnN0IHJlID0gL14oPzooPyFbXjpAXFwvPyNdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXFwvPyNdKikoPzo6KFteOkBcXC8/I10qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XG5jb25zdCBwYXJ0cyA9IFtcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcbl07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gICAgY29uc3Qgc3JjID0gc3RyLCBiID0gc3RyLmluZGV4T2YoJ1snKSwgZSA9IHN0ci5pbmRleE9mKCddJyk7XG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSwgdXJpID0ge30sIGkgPSAxNDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xuICAgIH1cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xuICAgIH1cbiAgICB1cmkucGF0aE5hbWVzID0gcGF0aE5hbWVzKHVyaSwgdXJpWydwYXRoJ10pO1xuICAgIHVyaS5xdWVyeUtleSA9IHF1ZXJ5S2V5KHVyaSwgdXJpWydxdWVyeSddKTtcbiAgICByZXR1cm4gdXJpO1xufVxuZnVuY3Rpb24gcGF0aE5hbWVzKG9iaiwgcGF0aCkge1xuICAgIGNvbnN0IHJlZ3ggPSAvXFwvezIsOX0vZywgbmFtZXMgPSBwYXRoLnJlcGxhY2UocmVneCwgXCIvXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBpZiAocGF0aC5zbGljZSgwLCAxKSA9PSAnLycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKDAsIDEpO1xuICAgIH1cbiAgICBpZiAocGF0aC5zbGljZSgtMSkgPT0gJy8nKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuZnVuY3Rpb24gcXVlcnlLZXkodXJpLCBxdWVyeSkge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBxdWVyeS5yZXBsYWNlKC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcbiAgICAgICAgaWYgKCQxKSB7XG4gICAgICAgICAgICBkYXRhWyQxXSA9ICQyO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG59XG4iXSwibmFtZXMiOlsicmUiLCJwYXJ0cyIsInBhcnNlIiwic3RyIiwic3JjIiwiYiIsImluZGV4T2YiLCJlIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsImxlbmd0aCIsIm0iLCJleGVjIiwidXJpIiwiaSIsInNvdXJjZSIsImhvc3QiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwicGF0aE5hbWVzIiwicXVlcnlLZXkiLCJvYmoiLCJwYXRoIiwicmVneCIsIm5hbWVzIiwic3BsaXQiLCJzbGljZSIsInNwbGljZSIsInF1ZXJ5IiwiZGF0YSIsIiQwIiwiJDEiLCIkMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/contrib/parseuri.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/contrib/yeast.js":
/*!******************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/contrib/yeast.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   yeast: function() { return /* binding */ yeast; }\n/* harmony export */ });\n// imported from https://github.com/unshiftio/yeast\n\n\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n  length = 64,\n  map = {};\nlet seed = 0,\n  i = 0,\n  prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  let encoded = '';\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n  return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  let decoded = 0;\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n  return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  const now = encode(+new Date());\n  if (now !== prev) return seed = 0, prev = now;\n  return now + '.' + encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi95ZWFzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNhOztBQUNiLE1BQU1BLFFBQVEsR0FBRyxrRUFBa0UsQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsQ0FBQztFQUFFQyxNQUFNLEdBQUcsRUFBRTtFQUFFQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3BILElBQUlDLElBQUksR0FBRyxDQUFDO0VBQUVDLENBQUMsR0FBRyxDQUFDO0VBQUVDLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxNQUFNQSxDQUFDQyxHQUFHLEVBQUU7RUFDeEIsSUFBSUMsT0FBTyxHQUFHLEVBQUU7RUFDaEIsR0FBRztJQUNDQSxPQUFPLEdBQUdULFFBQVEsQ0FBQ1EsR0FBRyxHQUFHTixNQUFNLENBQUMsR0FBR08sT0FBTztJQUMxQ0QsR0FBRyxHQUFHRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsR0FBRyxHQUFHTixNQUFNLENBQUM7RUFDbEMsQ0FBQyxRQUFRTSxHQUFHLEdBQUcsQ0FBQztFQUNoQixPQUFPQyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxNQUFNQSxDQUFDQyxHQUFHLEVBQUU7RUFDeEIsSUFBSUMsT0FBTyxHQUFHLENBQUM7RUFDZixLQUFLVCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdRLEdBQUcsQ0FBQ1gsTUFBTSxFQUFFRyxDQUFDLEVBQUUsRUFBRTtJQUM3QlMsT0FBTyxHQUFHQSxPQUFPLEdBQUdaLE1BQU0sR0FBR0MsR0FBRyxDQUFDVSxHQUFHLENBQUNFLE1BQU0sQ0FBQ1YsQ0FBQyxDQUFDLENBQUM7RUFDbkQ7RUFDQSxPQUFPUyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0UsS0FBS0EsQ0FBQSxFQUFHO0VBQ3BCLE1BQU1DLEdBQUcsR0FBR1YsTUFBTSxDQUFDLENBQUMsSUFBSVcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUMvQixJQUFJRCxHQUFHLEtBQUtYLElBQUksRUFDWixPQUFPRixJQUFJLEdBQUcsQ0FBQyxFQUFFRSxJQUFJLEdBQUdXLEdBQUc7RUFDL0IsT0FBT0EsR0FBRyxHQUFHLEdBQUcsR0FBR1YsTUFBTSxDQUFDSCxJQUFJLEVBQUUsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU9DLENBQUMsR0FBR0gsTUFBTSxFQUFFRyxDQUFDLEVBQUUsRUFDbEJGLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDSyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL3llYXN0LmpzPzE4OTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdW5zaGlmdGlvL3llYXN0XG4ndXNlIHN0cmljdCc7XG5jb25zdCBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJyksIGxlbmd0aCA9IDY0LCBtYXAgPSB7fTtcbmxldCBzZWVkID0gMCwgaSA9IDAsIHByZXY7XG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICAgIGxldCBlbmNvZGVkID0gJyc7XG4gICAgZG8ge1xuICAgICAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgICB9IHdoaWxlIChudW0gPiAwKTtcbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gICAgbGV0IGRlY29kZWQgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVkO1xufVxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHllYXN0KCkge1xuICAgIGNvbnN0IG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG4gICAgaWYgKG5vdyAhPT0gcHJldilcbiAgICAgICAgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICAgIHJldHVybiBub3cgKyAnLicgKyBlbmNvZGUoc2VlZCsrKTtcbn1cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG4iXSwibmFtZXMiOlsiYWxwaGFiZXQiLCJzcGxpdCIsImxlbmd0aCIsIm1hcCIsInNlZWQiLCJpIiwicHJldiIsImVuY29kZSIsIm51bSIsImVuY29kZWQiLCJNYXRoIiwiZmxvb3IiLCJkZWNvZGUiLCJzdHIiLCJkZWNvZGVkIiwiY2hhckF0IiwieWVhc3QiLCJub3ciLCJEYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/contrib/yeast.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/globalThis.browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/globalThis.browser.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalThisShim: function() { return /* binding */ globalThisShim; }\n/* harmony export */ });\nconst globalThisShim = (() => {\n  if (typeof self !== \"undefined\") {\n    return self;\n  } else if (typeof window !== \"undefined\") {\n    return window;\n  } else {\n    return Function(\"return this\")();\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vZ2xvYmFsVGhpcy5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxjQUFjLEdBQUcsQ0FBQyxNQUFNO0VBQ2pDLElBQUksT0FBT0MsSUFBSSxLQUFLLFdBQVcsRUFBRTtJQUM3QixPQUFPQSxJQUFJO0VBQ2YsQ0FBQyxNQUNJLElBQUksT0FBT0MsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNwQyxPQUFPQSxNQUFNO0VBQ2pCLENBQUMsTUFDSTtJQUNELE9BQU9DLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0VBQ3BDO0FBQ0osQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2dsb2JhbFRoaXMuYnJvd3Nlci5qcz9lMDMwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnbG9iYWxUaGlzU2hpbSA9ICgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuICAgIH1cbn0pKCk7XG4iXSwibmFtZXMiOlsiZ2xvYmFsVGhpc1NoaW0iLCJzZWxmIiwid2luZG93IiwiRnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/globalThis.browser.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Socket: function() { return /* reexport safe */ _socket_js__WEBPACK_IMPORTED_MODULE_0__.Socket; },\n/* harmony export */   Transport: function() { return /* reexport safe */ _transport_js__WEBPACK_IMPORTED_MODULE_1__.Transport; },\n/* harmony export */   installTimerFunctions: function() { return /* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_3__.installTimerFunctions; },\n/* harmony export */   nextTick: function() { return /* reexport safe */ _transports_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_5__.nextTick; },\n/* harmony export */   parse: function() { return /* reexport safe */ _contrib_parseuri_js__WEBPACK_IMPORTED_MODULE_4__.parse; },\n/* harmony export */   protocol: function() { return /* binding */ protocol; },\n/* harmony export */   transports: function() { return /* reexport safe */ _transports_index_js__WEBPACK_IMPORTED_MODULE_2__.transports; }\n/* harmony export */ });\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./socket.js */ \"./node_modules/engine.io-client/build/esm/socket.js\");\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transport.js */ \"./node_modules/engine.io-client/build/esm/transport.js\");\n/* harmony import */ var _transports_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transports/index.js */ \"./node_modules/engine.io-client/build/esm/transports/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"./node_modules/engine.io-client/build/esm/util.js\");\n/* harmony import */ var _contrib_parseuri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contrib/parseuri.js */ \"./node_modules/engine.io-client/build/esm/contrib/parseuri.js\");\n/* harmony import */ var _transports_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transports/websocket-constructor.js */ \"./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js\");\n\n\nconst protocol = _socket_js__WEBPACK_IMPORTED_MODULE_0__.Socket.protocol;\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNuQjtBQUNYLE1BQU1DLFFBQVEsR0FBR0QsOENBQU0sQ0FBQ0MsUUFBUTtBQUNJO0FBQ1E7QUFDRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcz85OTg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuZXhwb3J0IHsgU29ja2V0IH07XG5leHBvcnQgY29uc3QgcHJvdG9jb2wgPSBTb2NrZXQucHJvdG9jb2w7XG5leHBvcnQgeyBUcmFuc3BvcnQgfSBmcm9tIFwiLi90cmFuc3BvcnQuanNcIjtcbmV4cG9ydCB7IHRyYW5zcG9ydHMgfSBmcm9tIFwiLi90cmFuc3BvcnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBpbnN0YWxsVGltZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG5leHBvcnQgeyBwYXJzZSB9IGZyb20gXCIuL2NvbnRyaWIvcGFyc2V1cmkuanNcIjtcbmV4cG9ydCB7IG5leHRUaWNrIH0gZnJvbSBcIi4vdHJhbnNwb3J0cy93ZWJzb2NrZXQtY29uc3RydWN0b3IuanNcIjtcbiJdLCJuYW1lcyI6WyJTb2NrZXQiLCJwcm90b2NvbCIsIlRyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJpbnN0YWxsVGltZXJGdW5jdGlvbnMiLCJwYXJzZSIsIm5leHRUaWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/socket.js":
/*!***********************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/socket.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Socket: function() { return /* binding */ Socket; }\n/* harmony export */ });\n/* harmony import */ var _transports_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transports/index.js */ \"./node_modules/engine.io-client/build/esm/transports/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/engine.io-client/build/esm/util.js\");\n/* harmony import */ var _contrib_parseqs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contrib/parseqs.js */ \"./node_modules/engine.io-client/build/esm/contrib/parseqs.js\");\n/* harmony import */ var _contrib_parseuri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contrib/parseuri.js */ \"./node_modules/engine.io-client/build/esm/contrib/parseuri.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var engine_io_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/build/esm/index.js\");\n\n\n\n\n\n\nclass Socket extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_4__.Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  constructor(uri, opts = {}) {\n    super();\n    this.writeBuffer = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = (0,_contrib_parseuri_js__WEBPACK_IMPORTED_MODULE_3__.parse)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0,_contrib_parseuri_js__WEBPACK_IMPORTED_MODULE_3__.parse)(opts.host).host;\n    }\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.installTimerFunctions)(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\", \"webtransport\"];\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = (0,_contrib_parseqs_js__WEBPACK_IMPORTED_MODULE_2__.decode)(this.opts.query);\n    }\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this.beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n      }\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n    this.open();\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n  createTransport(name) {\n    const query = Object.assign({}, this.opts.query);\n    // append engine.io protocol identifier\n    query.EIO = engine_io_parser__WEBPACK_IMPORTED_MODULE_5__.protocol;\n    // transport name\n    query.transport = name;\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[name]);\n    return new _transports_index_js__WEBPACK_IMPORTED_MODULE_0__.transports[name](opts);\n  }\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @private\n   */\n  open() {\n    let transport;\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      this.transports.shift();\n      this.open();\n      return;\n    }\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @private\n   */\n  setTransport(transport) {\n    if (this.transport) {\n      this.transport.removeAllListeners();\n    }\n    // set up transport\n    this.transport = transport;\n    // set up transport listeners\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", reason => this.onClose(\"transport close\", reason));\n  }\n  /**\n   * Probes a transport.\n   *\n   * @param {String} name - transport name\n   * @private\n   */\n  probe(name) {\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n    const onTransportOpen = () => {\n      if (failed) return;\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          const err = new Error(\"probe error\");\n          // @ts-ignore\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n    function freezeTransport() {\n      if (failed) return;\n      // Any callback called by transport should be ignored since now\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      // @ts-ignore\n      error.transport = transport.name;\n      freezeTransport();\n      this.emitReserved(\"upgradeError\", error);\n    };\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        freezeTransport();\n      }\n    }\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    if (this.upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n      // favor WebTransport\n      this.setTimeoutFn(() => {\n        if (!failed) {\n          transport.open();\n        }\n      }, 200);\n    } else {\n      transport.open();\n    }\n  }\n  /**\n   * Called when connection is deemed open.\n   *\n   * @private\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\"open\" === this.readyState && this.opts.upgrade) {\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\n   * Handles a packet.\n   *\n   * @private\n   */\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.emitReserved(\"packet\", packet);\n      // Socket is live - any packet counts\n      this.emitReserved(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          // @ts-ignore\n          err.code = packet.data;\n          this.onError(err);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {}\n  }\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} data - handshake obj\n   * @private\n   */\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.maxPayload = data.maxPayload;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @private\n   */\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\n   * Called on `drain` event\n   *\n   * @private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\n   * Flush write buffers.\n   *\n   * @private\n   */\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this.getWritablePackets();\n      this.transport.send(packets);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n   * long-polling)\n   *\n   * @private\n   */\n  getWritablePackets() {\n    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n    let payloadSize = 1; // first packet type\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n      if (data) {\n        payloadSize += (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.byteLength)(data);\n      }\n      if (i > 0 && payloadSize > this.maxPayload) {\n        return this.writeBuffer.slice(0, i);\n      }\n      payloadSize += 2; // separator + packet type\n    }\n\n    return this.writeBuffer;\n  }\n  /**\n   * Sends a message.\n   *\n   * @param {String} msg - message.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @return {Socket} for chaining.\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param {String} type: packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\n   * Closes the connection.\n   */\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      this.transport.close();\n    };\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    return this;\n  }\n  /**\n   * Called upon transport error\n   *\n   * @private\n   */\n  onError(err) {\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @private\n   */\n  onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      // clear timers\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n      // ensure transport won't stay open\n      this.transport.close();\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n      // set ready state\n      this.readyState = \"closed\";\n      // clear session id\n      this.id = null;\n      // emit close event\n      this.emitReserved(\"close\", reason, description);\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} upgrades - server upgrades\n   * @private\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\nSocket.protocol = engine_io_parser__WEBPACK_IMPORTED_MODULE_5__.protocol;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/socket.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transport.js":
/*!**************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transport.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transport: function() { return /* binding */ Transport; }\n/* harmony export */ });\n/* harmony import */ var engine_io_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/build/esm/index.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"./node_modules/engine.io-client/build/esm/util.js\");\n/* harmony import */ var _contrib_parseqs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contrib/parseqs.js */ \"./node_modules/engine.io-client/build/esm/contrib/parseqs.js\");\n\n\n\n\nclass TransportError extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n}\nclass Transport extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} opts - options\n   * @protected\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.installTimerFunctions)(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} reason\n   * @param description\n   * @param context - the error context\n   * @return {Transport} for chaining\n   * @protected\n   */\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  /**\n   * Opens the transport.\n   */\n  open() {\n    this.readyState = \"opening\";\n    this.doOpen();\n    return this;\n  }\n  /**\n   * Closes the transport.\n   */\n  close() {\n    if (this.readyState === \"opening\" || this.readyState === \"open\") {\n      this.doClose();\n      this.onClose();\n    }\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   */\n  send(packets) {\n    if (this.readyState === \"open\") {\n      this.write(packets);\n    } else {\n      // this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @protected\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @protected\n   */\n  onData(data) {\n    const packet = (0,engine_io_parser__WEBPACK_IMPORTED_MODULE_0__.decodePacket)(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   *\n   * @protected\n   */\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @protected\n   */\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n  /**\n   * Pauses the transport, in order not to lose packets during an upgrade.\n   *\n   * @param onPause\n   */\n  pause(onPause) {}\n  createUri(schema, query = {}) {\n    return schema + \"://\" + this._hostname() + this._port() + this.opts.path + this._query(query);\n  }\n  _hostname() {\n    const hostname = this.opts.hostname;\n    return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n  }\n  _port() {\n    if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {\n      return \":\" + this.opts.port;\n    } else {\n      return \"\";\n    }\n  }\n  _query(query) {\n    const encodedQuery = (0,_contrib_parseqs_js__WEBPACK_IMPORTED_MODULE_3__.encode)(query);\n    return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transport.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transports: function() { return /* binding */ transports; }\n/* harmony export */ });\n/* harmony import */ var _polling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polling.js */ \"./node_modules/engine.io-client/build/esm/transports/polling.js\");\n/* harmony import */ var _websocket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websocket.js */ \"./node_modules/engine.io-client/build/esm/transports/websocket.js\");\n/* harmony import */ var _webtransport_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webtransport.js */ \"./node_modules/engine.io-client/build/esm/transports/webtransport.js\");\n\n\n\nconst transports = {\n  websocket: _websocket_js__WEBPACK_IMPORTED_MODULE_1__.WS,\n  webtransport: _webtransport_js__WEBPACK_IMPORTED_MODULE_2__.WT,\n  polling: _polling_js__WEBPACK_IMPORTED_MODULE_0__.Polling\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ0g7QUFDRztBQUNoQyxNQUFNRyxVQUFVLEdBQUc7RUFDdEJDLFNBQVMsRUFBRUgsNkNBQUU7RUFDYkksWUFBWSxFQUFFSCxnREFBRTtFQUNoQkksT0FBTyxFQUFFTixnREFBT0E7QUFDcEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9pbmRleC5qcz83MThhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvbGxpbmcgfSBmcm9tIFwiLi9wb2xsaW5nLmpzXCI7XG5pbXBvcnQgeyBXUyB9IGZyb20gXCIuL3dlYnNvY2tldC5qc1wiO1xuaW1wb3J0IHsgV1QgfSBmcm9tIFwiLi93ZWJ0cmFuc3BvcnQuanNcIjtcbmV4cG9ydCBjb25zdCB0cmFuc3BvcnRzID0ge1xuICAgIHdlYnNvY2tldDogV1MsXG4gICAgd2VidHJhbnNwb3J0OiBXVCxcbiAgICBwb2xsaW5nOiBQb2xsaW5nLFxufTtcbiJdLCJuYW1lcyI6WyJQb2xsaW5nIiwiV1MiLCJXVCIsInRyYW5zcG9ydHMiLCJ3ZWJzb2NrZXQiLCJ3ZWJ0cmFuc3BvcnQiLCJwb2xsaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/index.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/polling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/polling.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Polling: function() { return /* binding */ Polling; },\n/* harmony export */   Request: function() { return /* binding */ Request; }\n/* harmony export */ });\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transport.js */ \"./node_modules/engine.io-client/build/esm/transport.js\");\n/* harmony import */ var _contrib_yeast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contrib/yeast.js */ \"./node_modules/engine.io-client/build/esm/contrib/yeast.js\");\n/* harmony import */ var engine_io_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/build/esm/index.js\");\n/* harmony import */ var _xmlhttprequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./xmlhttprequest.js */ \"./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util.js */ \"./node_modules/engine.io-client/build/esm/util.js\");\n/* harmony import */ var _globalThis_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../globalThis.js */ \"./node_modules/engine.io-client/build/esm/globalThis.browser.js\");\n\n\n\n\n\n\n\nfunction empty() {}\nconst hasXHR2 = function () {\n  const xhr = new _xmlhttprequest_js__WEBPACK_IMPORTED_MODULE_3__.XHR({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\nclass Polling extends _transport_js__WEBPACK_IMPORTED_MODULE_0__.Transport {\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @package\n   */\n  constructor(opts) {\n    super(opts);\n    this.polling = false;\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port;\n      // some user agents have empty `location.port`\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n    }\n    /**\n     * XHR supports binary\n     */\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n    if (this.opts.withCredentials) {\n      this.cookieJar = (0,_xmlhttprequest_js__WEBPACK_IMPORTED_MODULE_3__.createCookieJar)();\n    }\n  }\n  get name() {\n    return \"polling\";\n  }\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @protected\n   */\n  doOpen() {\n    this.poll();\n  }\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n   * @package\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n    const pause = () => {\n      this.readyState = \"paused\";\n      onPause();\n    };\n    if (this.polling || !this.writable) {\n      let total = 0;\n      if (this.polling) {\n        total++;\n        this.once(\"pollComplete\", function () {\n          --total || pause();\n        });\n      }\n      if (!this.writable) {\n        total++;\n        this.once(\"drain\", function () {\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\n   * Starts polling cycle.\n   *\n   * @private\n   */\n  poll() {\n    this.polling = true;\n    this.doPoll();\n    this.emitReserved(\"poll\");\n  }\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @protected\n   */\n  onData(data) {\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose({\n          description: \"transport closed by the server\"\n        });\n        return false;\n      }\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n    // decode payload\n    (0,engine_io_parser__WEBPACK_IMPORTED_MODULE_2__.decodePayload)(data, this.socket.binaryType).forEach(callback);\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emitReserved(\"pollComplete\");\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {}\n    }\n  }\n  /**\n   * For polling, send a close packet.\n   *\n   * @protected\n   */\n  doClose() {\n    const close = () => {\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n    if (\"open\" === this.readyState) {\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      this.once(\"open\", close);\n    }\n  }\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} packets - data packets\n   * @protected\n   */\n  write(packets) {\n    this.writable = false;\n    (0,engine_io_parser__WEBPACK_IMPORTED_MODULE_2__.encodePayload)(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emitReserved(\"drain\");\n      });\n    });\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n  uri() {\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    const query = this.query || {};\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0,_contrib_yeast_js__WEBPACK_IMPORTED_MODULE_1__.yeast)();\n    }\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n    return this.createUri(schema, query);\n  }\n  /**\n   * Creates a request.\n   *\n   * @param {String} method\n   * @private\n   */\n  request(opts = {}) {\n    Object.assign(opts, {\n      xd: this.xd,\n      cookieJar: this.cookieJar\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\n   * Sends data.\n   *\n   * @param {String} data to send.\n   * @param {Function} called upon flush.\n   * @private\n   */\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr post error\", xhrStatus, context);\n    });\n  }\n  /**\n   * Starts a poll cycle.\n   *\n   * @private\n   */\n  doPoll() {\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", (xhrStatus, context) => {\n      this.onError(\"xhr poll error\", xhrStatus, context);\n    });\n    this.pollXhr = req;\n  }\n}\nclass Request extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_4__.Emitter {\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @package\n   */\n  constructor(uri, opts) {\n    super();\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.installTimerFunctions)(this, opts);\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.create();\n  }\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @private\n   */\n  create() {\n    var _a;\n    const opts = (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.pick)(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this.opts.xd;\n    const xhr = this.xhr = new _xmlhttprequest_js__WEBPACK_IMPORTED_MODULE_3__.XHR(opts);\n    try {\n      xhr.open(this.method, this.uri, true);\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {}\n      (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n      // ie6 check\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n      xhr.onreadystatechange = () => {\n        var _a;\n        if (xhr.readyState === 3) {\n          (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(xhr);\n        }\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          this.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          this.setTimeoutFn(() => {\n            this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n          }, 0);\n        }\n      };\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      this.setTimeoutFn(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\n   * Called upon error.\n   *\n   * @private\n   */\n  onError(err) {\n    this.emitReserved(\"error\", err, this.xhr);\n    this.cleanup(true);\n  }\n  /**\n   * Cleans up house.\n   *\n   * @private\n   */\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    }\n    this.xhr.onreadystatechange = empty;\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n    this.xhr = null;\n  }\n  /**\n   * Called upon load.\n   *\n   * @private\n   */\n  onLoad() {\n    const data = this.xhr.responseText;\n    if (data !== null) {\n      this.emitReserved(\"data\", data);\n      this.emitReserved(\"success\");\n      this.cleanup();\n    }\n  }\n  /**\n   * Aborts the request.\n   *\n   * @package\n   */\n  abort() {\n    this.cleanup();\n  }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n  // @ts-ignore\n  if (typeof attachEvent === \"function\") {\n    // @ts-ignore\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in _globalThis_js__WEBPACK_IMPORTED_MODULE_6__.globalThisShim ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/polling.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocket: function() { return /* binding */ WebSocket; },\n/* harmony export */   defaultBinaryType: function() { return /* binding */ defaultBinaryType; },\n/* harmony export */   nextTick: function() { return /* binding */ nextTick; },\n/* harmony export */   usingBrowserWebSocket: function() { return /* binding */ usingBrowserWebSocket; }\n/* harmony export */ });\n/* harmony import */ var _globalThis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globalThis.js */ \"./node_modules/engine.io-client/build/esm/globalThis.browser.js\");\n\nconst nextTick = (() => {\n  const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n  if (isPromiseAvailable) {\n    return cb => Promise.resolve().then(cb);\n  } else {\n    return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n  }\n})();\nconst WebSocket = _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.WebSocket || _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.MozWebSocket;\nconst usingBrowserWebSocket = true;\nconst defaultBinaryType = \"arraybuffer\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy93ZWJzb2NrZXQtY29uc3RydWN0b3IuYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRTtBQUN6RCxNQUFNRSxRQUFRLEdBQUcsQ0FBQyxNQUFNO0VBQzNCLE1BQU1DLGtCQUFrQixHQUFHLE9BQU9DLE9BQU8sS0FBSyxVQUFVLElBQUksT0FBT0EsT0FBTyxDQUFDQyxPQUFPLEtBQUssVUFBVTtFQUNqRyxJQUFJRixrQkFBa0IsRUFBRTtJQUNwQixPQUFRRyxFQUFFLElBQUtGLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQ0UsSUFBSSxDQUFDRCxFQUFFLENBQUM7RUFDN0MsQ0FBQyxNQUNJO0lBQ0QsT0FBTyxDQUFDQSxFQUFFLEVBQUVFLFlBQVksS0FBS0EsWUFBWSxDQUFDRixFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3BEO0FBQ0osQ0FBQyxFQUFFLENBQUM7QUFDRyxNQUFNRyxTQUFTLEdBQUdSLDBEQUFVLENBQUNRLFNBQVMsSUFBSVIsMERBQVUsQ0FBQ1MsWUFBWTtBQUNqRSxNQUFNQyxxQkFBcUIsR0FBRyxJQUFJO0FBQ2xDLE1BQU1DLGlCQUFpQixHQUFHLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydHMvd2Vic29ja2V0LWNvbnN0cnVjdG9yLmJyb3dzZXIuanM/ZjE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnbG9iYWxUaGlzU2hpbSBhcyBnbG9iYWxUaGlzIH0gZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBjb25zdCBuZXh0VGljayA9ICgoKSA9PiB7XG4gICAgY29uc3QgaXNQcm9taXNlQXZhaWxhYmxlID0gdHlwZW9mIFByb21pc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgUHJvbWlzZS5yZXNvbHZlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgaWYgKGlzUHJvbWlzZUF2YWlsYWJsZSkge1xuICAgICAgICByZXR1cm4gKGNiKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoY2IsIHNldFRpbWVvdXRGbikgPT4gc2V0VGltZW91dEZuKGNiLCAwKTtcbiAgICB9XG59KSgpO1xuZXhwb3J0IGNvbnN0IFdlYlNvY2tldCA9IGdsb2JhbFRoaXMuV2ViU29ja2V0IHx8IGdsb2JhbFRoaXMuTW96V2ViU29ja2V0O1xuZXhwb3J0IGNvbnN0IHVzaW5nQnJvd3NlcldlYlNvY2tldCA9IHRydWU7XG5leHBvcnQgY29uc3QgZGVmYXVsdEJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4iXSwibmFtZXMiOlsiZ2xvYmFsVGhpc1NoaW0iLCJnbG9iYWxUaGlzIiwibmV4dFRpY2siLCJpc1Byb21pc2VBdmFpbGFibGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNiIiwidGhlbiIsInNldFRpbWVvdXRGbiIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsImRlZmF1bHRCaW5hcnlUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/websocket.js":
/*!*************************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/websocket.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WS: function() { return /* binding */ WS; }\n/* harmony export */ });\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transport.js */ \"./node_modules/engine.io-client/build/esm/transport.js\");\n/* harmony import */ var _contrib_yeast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contrib/yeast.js */ \"./node_modules/engine.io-client/build/esm/contrib/yeast.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util.js */ \"./node_modules/engine.io-client/build/esm/util.js\");\n/* harmony import */ var _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websocket-constructor.js */ \"./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js\");\n/* harmony import */ var engine_io_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/build/esm/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"../../../../node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nclass WS extends _transport_js__WEBPACK_IMPORTED_MODULE_0__.Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @param {Object} opts - connection options\n   * @protected\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n  get name() {\n    return \"websocket\";\n  }\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative ? {} : (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.pick)(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n    try {\n      this.ws = _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.usingBrowserWebSocket && !isReactNative ? protocols ? new _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.WebSocket(uri, protocols) : new _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.WebSocket(uri) : new _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n    this.ws.binaryType = this.socket.binaryType || _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.defaultBinaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @private\n   */\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n      this.onOpen();\n    };\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n    this.ws.onmessage = ev => this.onData(ev.data);\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n  write(packets) {\n    this.writable = false;\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      (0,engine_io_parser__WEBPACK_IMPORTED_MODULE_4__.encodePacket)(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n        if (!_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n          if (this.opts.perMessageDeflate) {\n            const len =\n            // @ts-ignore\n            \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {}\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          (0,_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.nextTick)(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @private\n   */\n  uri() {\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    const query = this.query || {};\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0,_contrib_yeast_js__WEBPACK_IMPORTED_MODULE_1__.yeast)();\n    }\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n    return this.createUri(schema, query);\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @private\n   */\n  check() {\n    return !!_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_3__.WebSocket;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/websocket.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/webtransport.js":
/*!****************************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/webtransport.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WT: function() { return /* binding */ WT; }\n/* harmony export */ });\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transport.js */ \"./node_modules/engine.io-client/build/esm/transport.js\");\n/* harmony import */ var _websocket_constructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websocket-constructor.js */ \"./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js\");\n/* harmony import */ var engine_io_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! engine.io-parser */ \"./node_modules/engine.io-parser/build/esm/index.js\");\n\n\n\nfunction shouldIncludeBinaryHeader(packet, encoded) {\n  // 48 === \"0\".charCodeAt(0) (OPEN packet type)\n  // 54 === \"6\".charCodeAt(0) (NOOP packet type)\n  return packet.type === \"message\" && typeof packet.data !== \"string\" && encoded[0] >= 48 && encoded[0] <= 54;\n}\nclass WT extends _transport_js__WEBPACK_IMPORTED_MODULE_0__.Transport {\n  get name() {\n    return \"webtransport\";\n  }\n  doOpen() {\n    // @ts-ignore\n    if (typeof WebTransport !== \"function\") {\n      return;\n    }\n    // @ts-ignore\n    this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n    this.transport.closed.then(() => {\n      this.onClose();\n    }).catch(err => {\n      this.onError(\"webtransport error\", err);\n    });\n    // note: we could have used async/await, but that would require some additional polyfills\n    this.transport.ready.then(() => {\n      this.transport.createBidirectionalStream().then(stream => {\n        const reader = stream.readable.getReader();\n        this.writer = stream.writable.getWriter();\n        let binaryFlag;\n        const read = () => {\n          reader.read().then(({\n            done,\n            value\n          }) => {\n            if (done) {\n              return;\n            }\n            if (!binaryFlag && value.byteLength === 1 && value[0] === 54) {\n              binaryFlag = true;\n            } else {\n              // TODO expose binarytype\n              this.onPacket((0,engine_io_parser__WEBPACK_IMPORTED_MODULE_2__.decodePacketFromBinary)(value, binaryFlag, \"arraybuffer\"));\n              binaryFlag = false;\n            }\n            read();\n          }).catch(err => {});\n        };\n        read();\n        const handshake = this.query.sid ? `0{\"sid\":\"${this.query.sid}\"}` : \"0\";\n        this.writer.write(new TextEncoder().encode(handshake)).then(() => this.onOpen());\n      });\n    });\n  }\n  write(packets) {\n    this.writable = false;\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      (0,engine_io_parser__WEBPACK_IMPORTED_MODULE_2__.encodePacketToBinary)(packet, data => {\n        if (shouldIncludeBinaryHeader(packet, data)) {\n          this.writer.write(Uint8Array.of(54));\n        }\n        this.writer.write(data).then(() => {\n          if (lastPacket) {\n            (0,_websocket_constructor_js__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {\n              this.writable = true;\n              this.emitReserved(\"drain\");\n            }, this.setTimeoutFn);\n          }\n        });\n      });\n    }\n  }\n  doClose() {\n    var _a;\n    (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy93ZWJ0cmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNVO0FBQzJCO0FBQ2pGLFNBQVNJLHlCQUF5QkEsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUU7RUFDaEQ7RUFDQTtFQUNBLE9BQVFELE1BQU0sQ0FBQ0UsSUFBSSxLQUFLLFNBQVMsSUFDN0IsT0FBT0YsTUFBTSxDQUFDRyxJQUFJLEtBQUssUUFBUSxJQUMvQkYsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFDaEJBLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO0FBQ3hCO0FBQ08sTUFBTUcsRUFBRSxTQUFTVCxvREFBUyxDQUFDO0VBQzlCLElBQUlVLElBQUlBLENBQUEsRUFBRztJQUNQLE9BQU8sY0FBYztFQUN6QjtFQUNBQyxNQUFNQSxDQUFBLEVBQUc7SUFDTDtJQUNBLElBQUksT0FBT0MsWUFBWSxLQUFLLFVBQVUsRUFBRTtNQUNwQztJQUNKO0lBQ0E7SUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJRCxZQUFZLENBQUMsSUFBSSxDQUFDRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxJQUFJLENBQUNDLGdCQUFnQixDQUFDLElBQUksQ0FBQ04sSUFBSSxDQUFDLENBQUM7SUFDakcsSUFBSSxDQUFDRyxTQUFTLENBQUNJLE1BQU0sQ0FDaEJDLElBQUksQ0FBQyxNQUFNO01BQ1osSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FDR0MsS0FBSyxDQUFFQyxHQUFHLElBQUs7TUFDaEIsSUFBSSxDQUFDQyxPQUFPLENBQUMsb0JBQW9CLEVBQUVELEdBQUcsQ0FBQztJQUMzQyxDQUFDLENBQUM7SUFDRjtJQUNBLElBQUksQ0FBQ1IsU0FBUyxDQUFDVSxLQUFLLENBQUNMLElBQUksQ0FBQyxNQUFNO01BQzVCLElBQUksQ0FBQ0wsU0FBUyxDQUFDVyx5QkFBeUIsQ0FBQyxDQUFDLENBQUNOLElBQUksQ0FBRU8sTUFBTSxJQUFLO1FBQ3hELE1BQU1DLE1BQU0sR0FBR0QsTUFBTSxDQUFDRSxRQUFRLENBQUNDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQ0MsTUFBTSxHQUFHSixNQUFNLENBQUNLLFFBQVEsQ0FBQ0MsU0FBUyxDQUFDLENBQUM7UUFDekMsSUFBSUMsVUFBVTtRQUNkLE1BQU1DLElBQUksR0FBR0EsQ0FBQSxLQUFNO1VBQ2ZQLE1BQU0sQ0FDRE8sSUFBSSxDQUFDLENBQUMsQ0FDTmYsSUFBSSxDQUFDLENBQUM7WUFBRWdCLElBQUk7WUFBRUM7VUFBTSxDQUFDLEtBQUs7WUFDM0IsSUFBSUQsSUFBSSxFQUFFO2NBQ047WUFDSjtZQUNBLElBQUksQ0FBQ0YsVUFBVSxJQUFJRyxLQUFLLENBQUNDLFVBQVUsS0FBSyxDQUFDLElBQUlELEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Y0FDMURILFVBQVUsR0FBRyxJQUFJO1lBQ3JCLENBQUMsTUFDSTtjQUNEO2NBQ0EsSUFBSSxDQUFDSyxRQUFRLENBQUNsQyx3RUFBc0IsQ0FBQ2dDLEtBQUssRUFBRUgsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2NBQ3ZFQSxVQUFVLEdBQUcsS0FBSztZQUN0QjtZQUNBQyxJQUFJLENBQUMsQ0FBQztVQUNWLENBQUMsQ0FBQyxDQUNHYixLQUFLLENBQUVDLEdBQUcsSUFBSyxDQUNwQixDQUFDLENBQUM7UUFDTixDQUFDO1FBQ0RZLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTUssU0FBUyxHQUFHLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLEdBQUksWUFBVyxJQUFJLENBQUNELEtBQUssQ0FBQ0MsR0FBSSxJQUFHLEdBQUcsR0FBRztRQUN2RSxJQUFJLENBQUNYLE1BQU0sQ0FDTlksS0FBSyxDQUFDLElBQUlDLFdBQVcsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0wsU0FBUyxDQUFDLENBQUMsQ0FDMUNwQixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMwQixNQUFNLENBQUMsQ0FBQyxDQUFDO01BQ2xDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNOO0VBQ0FILEtBQUtBLENBQUNJLE9BQU8sRUFBRTtJQUNYLElBQUksQ0FBQ2YsUUFBUSxHQUFHLEtBQUs7SUFDckIsS0FBSyxJQUFJZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxPQUFPLENBQUNFLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDckMsTUFBTXpDLE1BQU0sR0FBR3dDLE9BQU8sQ0FBQ0MsQ0FBQyxDQUFDO01BQ3pCLE1BQU1FLFVBQVUsR0FBR0YsQ0FBQyxLQUFLRCxPQUFPLENBQUNFLE1BQU0sR0FBRyxDQUFDO01BQzNDN0Msc0VBQW9CLENBQUNHLE1BQU0sRUFBR0csSUFBSSxJQUFLO1FBQ25DLElBQUlKLHlCQUF5QixDQUFDQyxNQUFNLEVBQUVHLElBQUksQ0FBQyxFQUFFO1VBQ3pDLElBQUksQ0FBQ3FCLE1BQU0sQ0FBQ1ksS0FBSyxDQUFDUSxVQUFVLENBQUNDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QztRQUNBLElBQUksQ0FBQ3JCLE1BQU0sQ0FBQ1ksS0FBSyxDQUFDakMsSUFBSSxDQUFDLENBQUNVLElBQUksQ0FBQyxNQUFNO1VBQy9CLElBQUk4QixVQUFVLEVBQUU7WUFDWi9DLG1FQUFRLENBQUMsTUFBTTtjQUNYLElBQUksQ0FBQzZCLFFBQVEsR0FBRyxJQUFJO2NBQ3BCLElBQUksQ0FBQ3FCLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFDOUIsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsWUFBWSxDQUFDO1VBQ3pCO1FBQ0osQ0FBQyxDQUFDO01BQ04sQ0FBQyxDQUFDO0lBQ047RUFDSjtFQUNBQyxPQUFPQSxDQUFBLEVBQUc7SUFDTixJQUFJQyxFQUFFO0lBQ04sQ0FBQ0EsRUFBRSxHQUFHLElBQUksQ0FBQ3pDLFNBQVMsTUFBTSxJQUFJLElBQUl5QyxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDekU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy93ZWJ0cmFuc3BvcnQuanM/MGEyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc3BvcnQgfSBmcm9tIFwiLi4vdHJhbnNwb3J0LmpzXCI7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gXCIuL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlUGFja2V0VG9CaW5hcnksIGRlY29kZVBhY2tldEZyb21CaW5hcnksIH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbmZ1bmN0aW9uIHNob3VsZEluY2x1ZGVCaW5hcnlIZWFkZXIocGFja2V0LCBlbmNvZGVkKSB7XG4gICAgLy8gNDggPT09IFwiMFwiLmNoYXJDb2RlQXQoMCkgKE9QRU4gcGFja2V0IHR5cGUpXG4gICAgLy8gNTQgPT09IFwiNlwiLmNoYXJDb2RlQXQoMCkgKE5PT1AgcGFja2V0IHR5cGUpXG4gICAgcmV0dXJuIChwYWNrZXQudHlwZSA9PT0gXCJtZXNzYWdlXCIgJiZcbiAgICAgICAgdHlwZW9mIHBhY2tldC5kYXRhICE9PSBcInN0cmluZ1wiICYmXG4gICAgICAgIGVuY29kZWRbMF0gPj0gNDggJiZcbiAgICAgICAgZW5jb2RlZFswXSA8PSA1NCk7XG59XG5leHBvcnQgY2xhc3MgV1QgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJ3ZWJ0cmFuc3BvcnRcIjtcbiAgICB9XG4gICAgZG9PcGVuKCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0eXBlb2YgV2ViVHJhbnNwb3J0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gbmV3IFdlYlRyYW5zcG9ydCh0aGlzLmNyZWF0ZVVyaShcImh0dHBzXCIpLCB0aGlzLm9wdHMudHJhbnNwb3J0T3B0aW9uc1t0aGlzLm5hbWVdKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2VkXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJ3ZWJ0cmFuc3BvcnQgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIG5vdGU6IHdlIGNvdWxkIGhhdmUgdXNlZCBhc3luYy9hd2FpdCwgYnV0IHRoYXQgd291bGQgcmVxdWlyZSBzb21lIGFkZGl0aW9uYWwgcG9seWZpbGxzXG4gICAgICAgIHRoaXMudHJhbnNwb3J0LnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY3JlYXRlQmlkaXJlY3Rpb25hbFN0cmVhbSgpLnRoZW4oKHN0cmVhbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5yZWFkYWJsZS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlciA9IHN0cmVhbS53cml0YWJsZS5nZXRXcml0ZXIoKTtcbiAgICAgICAgICAgICAgICBsZXQgYmluYXJ5RmxhZztcbiAgICAgICAgICAgICAgICBjb25zdCByZWFkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZWFkKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCh7IGRvbmUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFiaW5hcnlGbGFnICYmIHZhbHVlLmJ5dGVMZW5ndGggPT09IDEgJiYgdmFsdWVbMF0gPT09IDU0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5RmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGV4cG9zZSBiaW5hcnl0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblBhY2tldChkZWNvZGVQYWNrZXRGcm9tQmluYXJ5KHZhbHVlLCBiaW5hcnlGbGFnLCBcImFycmF5YnVmZmVyXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5hcnlGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlYWQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kc2hha2UgPSB0aGlzLnF1ZXJ5LnNpZCA/IGAwe1wic2lkXCI6XCIke3RoaXMucXVlcnkuc2lkfVwifWAgOiBcIjBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlclxuICAgICAgICAgICAgICAgICAgICAud3JpdGUobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGhhbmRzaGFrZSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMub25PcGVuKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3cml0ZShwYWNrZXRzKSB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYWNrZXQgPSBwYWNrZXRzW2ldO1xuICAgICAgICAgICAgY29uc3QgbGFzdFBhY2tldCA9IGkgPT09IHBhY2tldHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGVuY29kZVBhY2tldFRvQmluYXJ5KHBhY2tldCwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkSW5jbHVkZUJpbmFyeUhlYWRlcihwYWNrZXQsIGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVyLndyaXRlKFVpbnQ4QXJyYXkub2YoNTQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZXIud3JpdGUoZGF0YSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0UGFja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkcmFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuc2V0VGltZW91dEZuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9DbG9zZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLnRyYW5zcG9ydCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3NlKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlRyYW5zcG9ydCIsIm5leHRUaWNrIiwiZW5jb2RlUGFja2V0VG9CaW5hcnkiLCJkZWNvZGVQYWNrZXRGcm9tQmluYXJ5Iiwic2hvdWxkSW5jbHVkZUJpbmFyeUhlYWRlciIsInBhY2tldCIsImVuY29kZWQiLCJ0eXBlIiwiZGF0YSIsIldUIiwibmFtZSIsImRvT3BlbiIsIldlYlRyYW5zcG9ydCIsInRyYW5zcG9ydCIsImNyZWF0ZVVyaSIsIm9wdHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwiY2xvc2VkIiwidGhlbiIsIm9uQ2xvc2UiLCJjYXRjaCIsImVyciIsIm9uRXJyb3IiLCJyZWFkeSIsImNyZWF0ZUJpZGlyZWN0aW9uYWxTdHJlYW0iLCJzdHJlYW0iLCJyZWFkZXIiLCJyZWFkYWJsZSIsImdldFJlYWRlciIsIndyaXRlciIsIndyaXRhYmxlIiwiZ2V0V3JpdGVyIiwiYmluYXJ5RmxhZyIsInJlYWQiLCJkb25lIiwidmFsdWUiLCJieXRlTGVuZ3RoIiwib25QYWNrZXQiLCJoYW5kc2hha2UiLCJxdWVyeSIsInNpZCIsIndyaXRlIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJvbk9wZW4iLCJwYWNrZXRzIiwiaSIsImxlbmd0aCIsImxhc3RQYWNrZXQiLCJVaW50OEFycmF5Iiwib2YiLCJlbWl0UmVzZXJ2ZWQiLCJzZXRUaW1lb3V0Rm4iLCJkb0Nsb3NlIiwiX2EiLCJjbG9zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/webtransport.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XHR: function() { return /* binding */ XHR; },\n/* harmony export */   createCookieJar: function() { return /* binding */ createCookieJar; }\n/* harmony export */ });\n/* harmony import */ var _contrib_has_cors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../contrib/has-cors.js */ \"./node_modules/engine.io-client/build/esm/contrib/has-cors.js\");\n/* harmony import */ var _globalThis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globalThis.js */ \"./node_modules/engine.io-client/build/esm/globalThis.browser.js\");\n// browser shim for xmlhttprequest module\n\n\nfunction XHR(opts) {\n  const xdomain = opts.xdomain;\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || _contrib_has_cors_js__WEBPACK_IMPORTED_MODULE_0__.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) {}\n  if (!xdomain) {\n    try {\n      return new _globalThis_js__WEBPACK_IMPORTED_MODULE_1__.globalThisShim[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n    } catch (e) {}\n  }\n}\nfunction createCookieJar() {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy94bWxodHRwcmVxdWVzdC5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNpRDtBQUNlO0FBQ3pELFNBQVNHLEdBQUdBLENBQUNDLElBQUksRUFBRTtFQUN0QixNQUFNQyxPQUFPLEdBQUdELElBQUksQ0FBQ0MsT0FBTztFQUM1QjtFQUNBLElBQUk7SUFDQSxJQUFJLFdBQVcsS0FBSyxPQUFPQyxjQUFjLEtBQUssQ0FBQ0QsT0FBTyxJQUFJTCx5REFBTyxDQUFDLEVBQUU7TUFDaEUsT0FBTyxJQUFJTSxjQUFjLENBQUMsQ0FBQztJQUMvQjtFQUNKLENBQUMsQ0FDRCxPQUFPQyxDQUFDLEVBQUUsQ0FBRTtFQUNaLElBQUksQ0FBQ0YsT0FBTyxFQUFFO0lBQ1YsSUFBSTtNQUNBLE9BQU8sSUFBSUgsMERBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDTSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0lBQ3JGLENBQUMsQ0FDRCxPQUFPRixDQUFDLEVBQUUsQ0FBRTtFQUNoQjtBQUNKO0FBQ08sU0FBU0csZUFBZUEsQ0FBQSxFQUFHLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydHMveG1saHR0cHJlcXVlc3QuYnJvd3Nlci5qcz9hNDUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5pbXBvcnQgeyBoYXNDT1JTIH0gZnJvbSBcIi4uL2NvbnRyaWIvaGFzLWNvcnMuanNcIjtcbmltcG9ydCB7IGdsb2JhbFRoaXNTaGltIGFzIGdsb2JhbFRoaXMgfSBmcm9tIFwiLi4vZ2xvYmFsVGhpcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIFhIUihvcHRzKSB7XG4gICAgY29uc3QgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcbiAgICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgICB0cnkge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbiAgICBpZiAoIXhkb21haW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXShcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29va2llSmFyKCkgeyB9XG4iXSwibmFtZXMiOlsiaGFzQ09SUyIsImdsb2JhbFRoaXNTaGltIiwiZ2xvYmFsVGhpcyIsIlhIUiIsIm9wdHMiLCJ4ZG9tYWluIiwiWE1MSHR0cFJlcXVlc3QiLCJlIiwiY29uY2F0Iiwiam9pbiIsImNyZWF0ZUNvb2tpZUphciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-client/build/esm/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/engine.io-client/build/esm/util.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: function() { return /* binding */ byteLength; },\n/* harmony export */   installTimerFunctions: function() { return /* binding */ installTimerFunctions; },\n/* harmony export */   pick: function() { return /* binding */ pick; }\n/* harmony export */ });\n/* harmony import */ var _globalThis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globalThis.js */ \"./node_modules/engine.io-client/build/esm/globalThis.browser.js\");\n\nfunction pick(obj, ...attr) {\n  return attr.reduce((acc, k) => {\n    if (obj.hasOwnProperty(k)) {\n      acc[k] = obj[k];\n    }\n    return acc;\n  }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.clearTimeout;\nfunction installTimerFunctions(obj, opts) {\n  if (opts.useNativeTimers) {\n    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(_globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim);\n    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(_globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim);\n  } else {\n    obj.setTimeoutFn = _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.setTimeout.bind(_globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim);\n    obj.clearTimeoutFn = _globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim.clearTimeout.bind(_globalThis_js__WEBPACK_IMPORTED_MODULE_0__.globalThisShim);\n  }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nfunction byteLength(obj) {\n  if (typeof obj === \"string\") {\n    return utf8Length(obj);\n  }\n  // arraybuffer or blob\n  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n  let c = 0,\n    length = 0;\n  for (let i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      length += 1;\n    } else if (c < 0x800) {\n      length += 2;\n    } else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    } else {\n      i++;\n      length += 4;\n    }\n  }\n  return length;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStEO0FBQ3hELFNBQVNFLElBQUlBLENBQUNDLEdBQUcsRUFBRSxHQUFHQyxJQUFJLEVBQUU7RUFDL0IsT0FBT0EsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxDQUFDLEtBQUs7SUFDM0IsSUFBSUosR0FBRyxDQUFDSyxjQUFjLENBQUNELENBQUMsQ0FBQyxFQUFFO01BQ3ZCRCxHQUFHLENBQUNDLENBQUMsQ0FBQyxHQUFHSixHQUFHLENBQUNJLENBQUMsQ0FBQztJQUNuQjtJQUNBLE9BQU9ELEdBQUc7RUFDZCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDVjtBQUNBO0FBQ0EsTUFBTUcsa0JBQWtCLEdBQUdSLDBEQUFVLENBQUNTLFVBQVU7QUFDaEQsTUFBTUMsb0JBQW9CLEdBQUdWLDBEQUFVLENBQUNXLFlBQVk7QUFDN0MsU0FBU0MscUJBQXFCQSxDQUFDVixHQUFHLEVBQUVXLElBQUksRUFBRTtFQUM3QyxJQUFJQSxJQUFJLENBQUNDLGVBQWUsRUFBRTtJQUN0QlosR0FBRyxDQUFDYSxZQUFZLEdBQUdQLGtCQUFrQixDQUFDUSxJQUFJLENBQUNoQiwwREFBVSxDQUFDO0lBQ3RERSxHQUFHLENBQUNlLGNBQWMsR0FBR1Asb0JBQW9CLENBQUNNLElBQUksQ0FBQ2hCLDBEQUFVLENBQUM7RUFDOUQsQ0FBQyxNQUNJO0lBQ0RFLEdBQUcsQ0FBQ2EsWUFBWSxHQUFHZiwwREFBVSxDQUFDUyxVQUFVLENBQUNPLElBQUksQ0FBQ2hCLDBEQUFVLENBQUM7SUFDekRFLEdBQUcsQ0FBQ2UsY0FBYyxHQUFHakIsMERBQVUsQ0FBQ1csWUFBWSxDQUFDSyxJQUFJLENBQUNoQiwwREFBVSxDQUFDO0VBQ2pFO0FBQ0o7QUFDQTtBQUNBLE1BQU1rQixlQUFlLEdBQUcsSUFBSTtBQUM1QjtBQUNPLFNBQVNDLFVBQVVBLENBQUNqQixHQUFHLEVBQUU7RUFDNUIsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO0lBQ3pCLE9BQU9rQixVQUFVLENBQUNsQixHQUFHLENBQUM7RUFDMUI7RUFDQTtFQUNBLE9BQU9tQixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDcEIsR0FBRyxDQUFDaUIsVUFBVSxJQUFJakIsR0FBRyxDQUFDcUIsSUFBSSxJQUFJTCxlQUFlLENBQUM7QUFDcEU7QUFDQSxTQUFTRSxVQUFVQSxDQUFDSSxHQUFHLEVBQUU7RUFDckIsSUFBSUMsQ0FBQyxHQUFHLENBQUM7SUFBRUMsTUFBTSxHQUFHLENBQUM7RUFDckIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0UsTUFBTSxFQUFFQyxDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDeENGLENBQUMsR0FBR0QsR0FBRyxDQUFDSyxVQUFVLENBQUNGLENBQUMsQ0FBQztJQUNyQixJQUFJRixDQUFDLEdBQUcsSUFBSSxFQUFFO01BQ1ZDLE1BQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQyxNQUNJLElBQUlELENBQUMsR0FBRyxLQUFLLEVBQUU7TUFDaEJDLE1BQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQyxNQUNJLElBQUlELENBQUMsR0FBRyxNQUFNLElBQUlBLENBQUMsSUFBSSxNQUFNLEVBQUU7TUFDaENDLE1BQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQyxNQUNJO01BQ0RDLENBQUMsRUFBRTtNQUNIRCxNQUFNLElBQUksQ0FBQztJQUNmO0VBQ0o7RUFDQSxPQUFPQSxNQUFNO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS91dGlsLmpzPzJjZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2xvYmFsVGhpc1NoaW0gYXMgZ2xvYmFsVGhpcyB9IGZyb20gXCIuL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwaWNrKG9iaiwgLi4uYXR0cikge1xuICAgIHJldHVybiBhdHRyLnJlZHVjZSgoYWNjLCBrKSA9PiB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIGFjY1trXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn1cbi8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHJlYWwgdGltZW91dCBmdW5jdGlvbnMgc28gdGhleSBjYW4gYmUgdXNlZCB3aGVuIG92ZXJyaWRkZW5cbmNvbnN0IE5BVElWRV9TRVRfVElNRU9VVCA9IGdsb2JhbFRoaXMuc2V0VGltZW91dDtcbmNvbnN0IE5BVElWRV9DTEVBUl9USU1FT1VUID0gZ2xvYmFsVGhpcy5jbGVhclRpbWVvdXQ7XG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbFRpbWVyRnVuY3Rpb25zKG9iaiwgb3B0cykge1xuICAgIGlmIChvcHRzLnVzZU5hdGl2ZVRpbWVycykge1xuICAgICAgICBvYmouc2V0VGltZW91dEZuID0gTkFUSVZFX1NFVF9USU1FT1VULmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgICAgIG9iai5jbGVhclRpbWVvdXRGbiA9IE5BVElWRV9DTEVBUl9USU1FT1VULmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmouc2V0VGltZW91dEZuID0gZ2xvYmFsVGhpcy5zZXRUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgICAgIG9iai5jbGVhclRpbWVvdXRGbiA9IGdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgfVxufVxuLy8gYmFzZTY0IGVuY29kZWQgYnVmZmVycyBhcmUgYWJvdXQgMzMlIGJpZ2dlciAoaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0KVxuY29uc3QgQkFTRTY0X09WRVJIRUFEID0gMS4zMztcbi8vIHdlIGNvdWxkIGFsc28gaGF2ZSB1c2VkIGBuZXcgQmxvYihbb2JqXSkuc2l6ZWAsIGJ1dCBpdCBpc24ndCBzdXBwb3J0ZWQgaW4gSUU5XG5leHBvcnQgZnVuY3Rpb24gYnl0ZUxlbmd0aChvYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdXRmOExlbmd0aChvYmopO1xuICAgIH1cbiAgICAvLyBhcnJheWJ1ZmZlciBvciBibG9iXG4gICAgcmV0dXJuIE1hdGguY2VpbCgob2JqLmJ5dGVMZW5ndGggfHwgb2JqLnNpemUpICogQkFTRTY0X09WRVJIRUFEKTtcbn1cbmZ1bmN0aW9uIHV0ZjhMZW5ndGgoc3RyKSB7XG4gICAgbGV0IGMgPSAwLCBsZW5ndGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgbGVuZ3RoICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjIDwgMHhkODAwIHx8IGMgPj0gMHhlMDAwKSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGxlbmd0aCArPSA0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsVGhpc1NoaW0iLCJnbG9iYWxUaGlzIiwicGljayIsIm9iaiIsImF0dHIiLCJyZWR1Y2UiLCJhY2MiLCJrIiwiaGFzT3duUHJvcGVydHkiLCJOQVRJVkVfU0VUX1RJTUVPVVQiLCJzZXRUaW1lb3V0IiwiTkFUSVZFX0NMRUFSX1RJTUVPVVQiLCJjbGVhclRpbWVvdXQiLCJpbnN0YWxsVGltZXJGdW5jdGlvbnMiLCJvcHRzIiwidXNlTmF0aXZlVGltZXJzIiwic2V0VGltZW91dEZuIiwiYmluZCIsImNsZWFyVGltZW91dEZuIiwiQkFTRTY0X09WRVJIRUFEIiwiYnl0ZUxlbmd0aCIsInV0ZjhMZW5ndGgiLCJNYXRoIiwiY2VpbCIsInNpemUiLCJzdHIiLCJjIiwibGVuZ3RoIiwiaSIsImwiLCJjaGFyQ29kZUF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-client/build/esm/util.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-parser/build/esm/commons.js":
/*!************************************************************!*\
  !*** ./node_modules/engine.io-parser/build/esm/commons.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_PACKET: function() { return /* binding */ ERROR_PACKET; },\n/* harmony export */   PACKET_TYPES: function() { return /* binding */ PACKET_TYPES; },\n/* harmony export */   PACKET_TYPES_REVERSE: function() { return /* binding */ PACKET_TYPES_REVERSE; }\n/* harmony export */ });\nconst PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n  PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = {\n  type: \"error\",\n  data: \"parser error\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vY29tbW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUNGLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHO0FBQzFCQSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRztBQUMzQkEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUc7QUFDMUJBLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHO0FBQzFCQSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRztBQUM3QkEsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDN0JBLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHO0FBQzFCLE1BQU1HLG9CQUFvQixHQUFHRixNQUFNLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaERELE1BQU0sQ0FBQ0csSUFBSSxDQUFDSixZQUFZLENBQUMsQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLElBQUk7RUFDckNILG9CQUFvQixDQUFDSCxZQUFZLENBQUNNLEdBQUcsQ0FBQyxDQUFDLEdBQUdBLEdBQUc7QUFDakQsQ0FBQyxDQUFDO0FBQ0YsTUFBTUMsWUFBWSxHQUFHO0VBQUVDLElBQUksRUFBRSxPQUFPO0VBQUVDLElBQUksRUFBRTtBQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2NvbW1vbnMuanM/MWMxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQQUNLRVRfVFlQRVMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBubyBNYXAgPSBubyBwb2x5ZmlsbFxuUEFDS0VUX1RZUEVTW1wib3BlblwiXSA9IFwiMFwiO1xuUEFDS0VUX1RZUEVTW1wiY2xvc2VcIl0gPSBcIjFcIjtcblBBQ0tFVF9UWVBFU1tcInBpbmdcIl0gPSBcIjJcIjtcblBBQ0tFVF9UWVBFU1tcInBvbmdcIl0gPSBcIjNcIjtcblBBQ0tFVF9UWVBFU1tcIm1lc3NhZ2VcIl0gPSBcIjRcIjtcblBBQ0tFVF9UWVBFU1tcInVwZ3JhZGVcIl0gPSBcIjVcIjtcblBBQ0tFVF9UWVBFU1tcIm5vb3BcIl0gPSBcIjZcIjtcbmNvbnN0IFBBQ0tFVF9UWVBFU19SRVZFUlNFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbk9iamVjdC5rZXlzKFBBQ0tFVF9UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICAgIFBBQ0tFVF9UWVBFU19SRVZFUlNFW1BBQ0tFVF9UWVBFU1trZXldXSA9IGtleTtcbn0pO1xuY29uc3QgRVJST1JfUEFDS0VUID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfTtcbmV4cG9ydCB7IFBBQ0tFVF9UWVBFUywgUEFDS0VUX1RZUEVTX1JFVkVSU0UsIEVSUk9SX1BBQ0tFVCB9O1xuIl0sIm5hbWVzIjpbIlBBQ0tFVF9UWVBFUyIsIk9iamVjdCIsImNyZWF0ZSIsIlBBQ0tFVF9UWVBFU19SRVZFUlNFIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJFUlJPUl9QQUNLRVQiLCJ0eXBlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-parser/build/esm/commons.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nconst encode = arraybuffer => {\n  let bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64 = '';\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n  return base64;\n};\nconst decode = base64 => {\n  let bufferLength = base64.length * 0.75,\n    len = base64.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4;\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n  const arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n  return arraybuffer;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vY29udHJpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLE1BQU1BLEtBQUssR0FBRyxrRUFBa0U7QUFDaEY7QUFDQSxNQUFNQyxNQUFNLEdBQUcsT0FBT0MsVUFBVSxLQUFLLFdBQVcsR0FBRyxFQUFFLEdBQUcsSUFBSUEsVUFBVSxDQUFDLEdBQUcsQ0FBQztBQUMzRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0VBQ25DRixNQUFNLENBQUNELEtBQUssQ0FBQ0ssVUFBVSxDQUFDRixDQUFDLENBQUMsQ0FBQyxHQUFHQSxDQUFDO0FBQ25DO0FBQ08sTUFBTUcsTUFBTSxHQUFJQyxXQUFXLElBQUs7RUFDbkMsSUFBSUMsS0FBSyxHQUFHLElBQUlOLFVBQVUsQ0FBQ0ssV0FBVyxDQUFDO0lBQUVKLENBQUM7SUFBRU0sR0FBRyxHQUFHRCxLQUFLLENBQUNKLE1BQU07SUFBRU0sTUFBTSxHQUFHLEVBQUU7RUFDM0UsS0FBS1AsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTSxHQUFHLEVBQUVOLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDekJPLE1BQU0sSUFBSVYsS0FBSyxDQUFDUSxLQUFLLENBQUNMLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5Qk8sTUFBTSxJQUFJVixLQUFLLENBQUUsQ0FBQ1EsS0FBSyxDQUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFLSyxLQUFLLENBQUNMLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFFLENBQUM7SUFDNURPLE1BQU0sSUFBSVYsS0FBSyxDQUFFLENBQUNRLEtBQUssQ0FBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUtLLEtBQUssQ0FBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUUsQ0FBQztJQUNqRU8sTUFBTSxJQUFJVixLQUFLLENBQUNRLEtBQUssQ0FBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUN0QztFQUNBLElBQUlNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ2ZDLE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxFQUFFRCxNQUFNLENBQUNOLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO0VBQ3pELENBQUMsTUFDSSxJQUFJSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUNwQkMsTUFBTSxHQUFHQSxNQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUFDLEVBQUVELE1BQU0sQ0FBQ04sTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUk7RUFDMUQ7RUFDQSxPQUFPTSxNQUFNO0FBQ2pCLENBQUM7QUFDTSxNQUFNRSxNQUFNLEdBQUlGLE1BQU0sSUFBSztFQUM5QixJQUFJRyxZQUFZLEdBQUdILE1BQU0sQ0FBQ04sTUFBTSxHQUFHLElBQUk7SUFBRUssR0FBRyxHQUFHQyxNQUFNLENBQUNOLE1BQU07SUFBRUQsQ0FBQztJQUFFVyxDQUFDLEdBQUcsQ0FBQztJQUFFQyxRQUFRO0lBQUVDLFFBQVE7SUFBRUMsUUFBUTtJQUFFQyxRQUFRO0VBQzlHLElBQUlSLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQ25DUyxZQUFZLEVBQUU7SUFDZCxJQUFJSCxNQUFNLENBQUNBLE1BQU0sQ0FBQ04sTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtNQUNuQ1MsWUFBWSxFQUFFO0lBQ2xCO0VBQ0o7RUFDQSxNQUFNTixXQUFXLEdBQUcsSUFBSVksV0FBVyxDQUFDTixZQUFZLENBQUM7SUFBRUwsS0FBSyxHQUFHLElBQUlOLFVBQVUsQ0FBQ0ssV0FBVyxDQUFDO0VBQ3RGLEtBQUtKLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR00sR0FBRyxFQUFFTixDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3pCWSxRQUFRLEdBQUdkLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDTCxVQUFVLENBQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDYSxRQUFRLEdBQUdmLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDTCxVQUFVLENBQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQ2MsUUFBUSxHQUFHaEIsTUFBTSxDQUFDUyxNQUFNLENBQUNMLFVBQVUsQ0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDZSxRQUFRLEdBQUdqQixNQUFNLENBQUNTLE1BQU0sQ0FBQ0wsVUFBVSxDQUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0NLLEtBQUssQ0FBQ00sQ0FBQyxFQUFFLENBQUMsR0FBSUMsUUFBUSxJQUFJLENBQUMsR0FBS0MsUUFBUSxJQUFJLENBQUU7SUFDOUNSLEtBQUssQ0FBQ00sQ0FBQyxFQUFFLENBQUMsR0FBSSxDQUFDRSxRQUFRLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBS0MsUUFBUSxJQUFJLENBQUU7SUFDckRULEtBQUssQ0FBQ00sQ0FBQyxFQUFFLENBQUMsR0FBSSxDQUFDRyxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBS0MsUUFBUSxHQUFHLEVBQUc7RUFDeEQ7RUFDQSxPQUFPWCxXQUFXO0FBQ3RCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2NvbnRyaWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzPzRjZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0aW8vYmFzZTY0LWFycmF5YnVmZmVyXG5jb25zdCBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbi8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbmNvbnN0IGxvb2t1cCA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IFtdIDogbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xufVxuZXhwb3J0IGNvbnN0IGVuY29kZSA9IChhcnJheWJ1ZmZlcikgPT4ge1xuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSwgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSAnJztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cbiAgICBpZiAobGVuICUgMyA9PT0gMikge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArICc9JztcbiAgICB9XG4gICAgZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuICAgIHJldHVybiBiYXNlNjQ7XG59O1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IChiYXNlNjQpID0+IHtcbiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLCBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gJz0nKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMildO1xuICAgICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xufTtcbiJdLCJuYW1lcyI6WyJjaGFycyIsImxvb2t1cCIsIlVpbnQ4QXJyYXkiLCJpIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImVuY29kZSIsImFycmF5YnVmZmVyIiwiYnl0ZXMiLCJsZW4iLCJiYXNlNjQiLCJzdWJzdHJpbmciLCJkZWNvZGUiLCJidWZmZXJMZW5ndGgiLCJwIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJBcnJheUJ1ZmZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-parser/build/esm/decodePacket.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/engine.io-parser/build/esm/decodePacket.browser.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodePacket: function() { return /* binding */ decodePacket; }\n/* harmony export */ });\n/* harmony import */ var _commons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commons.js */ \"./node_modules/engine.io-parser/build/esm/commons.js\");\n/* harmony import */ var _contrib_base64_arraybuffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contrib/base64-arraybuffer.js */ \"./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js\");\n\n\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n  if (typeof encodedPacket !== \"string\") {\n    return {\n      type: \"message\",\n      data: mapBinary(encodedPacket, binaryType)\n    };\n  }\n  const type = encodedPacket.charAt(0);\n  if (type === \"b\") {\n    return {\n      type: \"message\",\n      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n    };\n  }\n  const packetType = _commons_js__WEBPACK_IMPORTED_MODULE_0__.PACKET_TYPES_REVERSE[type];\n  if (!packetType) {\n    return _commons_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_PACKET;\n  }\n  return encodedPacket.length > 1 ? {\n    type: _commons_js__WEBPACK_IMPORTED_MODULE_0__.PACKET_TYPES_REVERSE[type],\n    data: encodedPacket.substring(1)\n  } : {\n    type: _commons_js__WEBPACK_IMPORTED_MODULE_0__.PACKET_TYPES_REVERSE[type]\n  };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n  if (withNativeArrayBuffer) {\n    const decoded = (0,_contrib_base64_arraybuffer_js__WEBPACK_IMPORTED_MODULE_1__.decode)(data);\n    return mapBinary(decoded, binaryType);\n  } else {\n    return {\n      base64: true,\n      data\n    }; // fallback for old browsers\n  }\n};\n\nconst mapBinary = (data, binaryType) => {\n  switch (binaryType) {\n    case \"blob\":\n      if (data instanceof Blob) {\n        // from WebSocket + binaryType \"blob\"\n        return data;\n      } else {\n        // from HTTP long-polling or WebTransport\n        return new Blob([data]);\n      }\n    case \"arraybuffer\":\n    default:\n      if (data instanceof ArrayBuffer) {\n        // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n        return data;\n      } else {\n        // from WebTransport (Uint8Array)\n        return data.buffer;\n      }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vZGVjb2RlUGFja2V0LmJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtFO0FBQ1Q7QUFDekQsTUFBTUcscUJBQXFCLEdBQUcsT0FBT0MsV0FBVyxLQUFLLFVBQVU7QUFDeEQsTUFBTUMsWUFBWSxHQUFHQSxDQUFDQyxhQUFhLEVBQUVDLFVBQVUsS0FBSztFQUN2RCxJQUFJLE9BQU9ELGFBQWEsS0FBSyxRQUFRLEVBQUU7SUFDbkMsT0FBTztNQUNIRSxJQUFJLEVBQUUsU0FBUztNQUNmQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQ0osYUFBYSxFQUFFQyxVQUFVO0lBQzdDLENBQUM7RUFDTDtFQUNBLE1BQU1DLElBQUksR0FBR0YsYUFBYSxDQUFDSyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLElBQUlILElBQUksS0FBSyxHQUFHLEVBQUU7SUFDZCxPQUFPO01BQ0hBLElBQUksRUFBRSxTQUFTO01BQ2ZDLElBQUksRUFBRUcsa0JBQWtCLENBQUNOLGFBQWEsQ0FBQ08sU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFTixVQUFVO0lBQ25FLENBQUM7RUFDTDtFQUNBLE1BQU1PLFVBQVUsR0FBR2IsNkRBQW9CLENBQUNPLElBQUksQ0FBQztFQUM3QyxJQUFJLENBQUNNLFVBQVUsRUFBRTtJQUNiLE9BQU9kLHFEQUFZO0VBQ3ZCO0VBQ0EsT0FBT00sYUFBYSxDQUFDUyxNQUFNLEdBQUcsQ0FBQyxHQUN6QjtJQUNFUCxJQUFJLEVBQUVQLDZEQUFvQixDQUFDTyxJQUFJLENBQUM7SUFDaENDLElBQUksRUFBRUgsYUFBYSxDQUFDTyxTQUFTLENBQUMsQ0FBQztFQUNuQyxDQUFDLEdBQ0M7SUFDRUwsSUFBSSxFQUFFUCw2REFBb0IsQ0FBQ08sSUFBSTtFQUNuQyxDQUFDO0FBQ1QsQ0FBQztBQUNELE1BQU1JLGtCQUFrQixHQUFHQSxDQUFDSCxJQUFJLEVBQUVGLFVBQVUsS0FBSztFQUM3QyxJQUFJSixxQkFBcUIsRUFBRTtJQUN2QixNQUFNYSxPQUFPLEdBQUdkLHNFQUFNLENBQUNPLElBQUksQ0FBQztJQUM1QixPQUFPQyxTQUFTLENBQUNNLE9BQU8sRUFBRVQsVUFBVSxDQUFDO0VBQ3pDLENBQUMsTUFDSTtJQUNELE9BQU87TUFBRVUsTUFBTSxFQUFFLElBQUk7TUFBRVI7SUFBSyxDQUFDLENBQUMsQ0FBQztFQUNuQztBQUNKLENBQUM7O0FBQ0QsTUFBTUMsU0FBUyxHQUFHQSxDQUFDRCxJQUFJLEVBQUVGLFVBQVUsS0FBSztFQUNwQyxRQUFRQSxVQUFVO0lBQ2QsS0FBSyxNQUFNO01BQ1AsSUFBSUUsSUFBSSxZQUFZUyxJQUFJLEVBQUU7UUFDdEI7UUFDQSxPQUFPVCxJQUFJO01BQ2YsQ0FBQyxNQUNJO1FBQ0Q7UUFDQSxPQUFPLElBQUlTLElBQUksQ0FBQyxDQUFDVCxJQUFJLENBQUMsQ0FBQztNQUMzQjtJQUNKLEtBQUssYUFBYTtJQUNsQjtNQUNJLElBQUlBLElBQUksWUFBWUwsV0FBVyxFQUFFO1FBQzdCO1FBQ0EsT0FBT0ssSUFBSTtNQUNmLENBQUMsTUFDSTtRQUNEO1FBQ0EsT0FBT0EsSUFBSSxDQUFDVSxNQUFNO01BQ3RCO0VBQ1I7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcz9iNDc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVSUk9SX1BBQ0tFVCwgUEFDS0VUX1RZUEVTX1JFVkVSU0UgfSBmcm9tIFwiLi9jb21tb25zLmpzXCI7XG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tIFwiLi9jb250cmliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qc1wiO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgZGVjb2RlUGFja2V0ID0gKGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBpZiAodHlwZW9mIGVuY29kZWRQYWNrZXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgZGF0YTogbWFwQmluYXJ5KGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBlbmNvZGVkUGFja2V0LmNoYXJBdCgwKTtcbiAgICBpZiAodHlwZSA9PT0gXCJiXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgZGF0YTogZGVjb2RlQmFzZTY0UGFja2V0KGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpLCBiaW5hcnlUeXBlKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBwYWNrZXRUeXBlID0gUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV07XG4gICAgaWYgKCFwYWNrZXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkUGFja2V0Lmxlbmd0aCA+IDFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXSxcbiAgICAgICAgICAgIGRhdGE6IGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXVxuICAgICAgICB9O1xufTtcbmNvbnN0IGRlY29kZUJhc2U2NFBhY2tldCA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlcikge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlKGRhdGEpO1xuICAgICAgICByZXR1cm4gbWFwQmluYXJ5KGRlY29kZWQsIGJpbmFyeVR5cGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgYmFzZTY0OiB0cnVlLCBkYXRhIH07IC8vIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnNcbiAgICB9XG59O1xuY29uc3QgbWFwQmluYXJ5ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKGJpbmFyeVR5cGUpIHtcbiAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICAgICAgICAgIC8vIGZyb20gV2ViU29ja2V0ICsgYmluYXJ5VHlwZSBcImJsb2JcIlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZnJvbSBIVFRQIGxvbmctcG9sbGluZyBvciBXZWJUcmFuc3BvcnRcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW2RhdGFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gZnJvbSBIVFRQIGxvbmctcG9sbGluZyAoYmFzZTY0KSBvciBXZWJTb2NrZXQgKyBiaW5hcnlUeXBlIFwiYXJyYXlidWZmZXJcIlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZnJvbSBXZWJUcmFuc3BvcnQgKFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiRVJST1JfUEFDS0VUIiwiUEFDS0VUX1RZUEVTX1JFVkVSU0UiLCJkZWNvZGUiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImRlY29kZVBhY2tldCIsImVuY29kZWRQYWNrZXQiLCJiaW5hcnlUeXBlIiwidHlwZSIsImRhdGEiLCJtYXBCaW5hcnkiLCJjaGFyQXQiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJzdWJzdHJpbmciLCJwYWNrZXRUeXBlIiwibGVuZ3RoIiwiZGVjb2RlZCIsImJhc2U2NCIsIkJsb2IiLCJidWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/engine.io-parser/build/esm/decodePacket.browser.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-parser/build/esm/encodePacket.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/engine.io-parser/build/esm/encodePacket.browser.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodePacket: function() { return /* binding */ encodePacket; },\n/* harmony export */   encodePacketToBinary: function() { return /* binding */ encodePacketToBinary; }\n/* harmony export */ });\n/* harmony import */ var _commons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commons.js */ \"./node_modules/engine.io-parser/build/esm/commons.js\");\n\nconst withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n  return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({\n  type,\n  data\n}, supportsBinary, callback) => {\n  if (withNativeBlob && data instanceof Blob) {\n    if (supportsBinary) {\n      return callback(data);\n    } else {\n      return encodeBlobAsBase64(data, callback);\n    }\n  } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {\n    if (supportsBinary) {\n      return callback(data);\n    } else {\n      return encodeBlobAsBase64(new Blob([data]), callback);\n    }\n  }\n  // plain string\n  return callback(_commons_js__WEBPACK_IMPORTED_MODULE_0__.PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n  const fileReader = new FileReader();\n  fileReader.onload = function () {\n    const content = fileReader.result.split(\",\")[1];\n    callback(\"b\" + (content || \"\"));\n  };\n  return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n  if (data instanceof Uint8Array) {\n    return data;\n  } else if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data);\n  } else {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n  }\n}\nlet TEXT_ENCODER;\nfunction encodePacketToBinary(packet, callback) {\n  if (withNativeBlob && packet.data instanceof Blob) {\n    return packet.data.arrayBuffer().then(toArray).then(callback);\n  } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n    return callback(toArray(packet.data));\n  }\n  encodePacket(packet, false, encoded => {\n    if (!TEXT_ENCODER) {\n      TEXT_ENCODER = new TextEncoder();\n    }\n    callback(TEXT_ENCODER.encode(encoded));\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vZW5jb2RlUGFja2V0LmJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQzVDLE1BQU1DLGNBQWMsR0FBRyxPQUFPQyxJQUFJLEtBQUssVUFBVSxJQUM1QyxPQUFPQSxJQUFJLEtBQUssV0FBVyxJQUN4QkMsTUFBTSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSixJQUFJLENBQUMsS0FBSywwQkFBMkI7QUFDNUUsTUFBTUsscUJBQXFCLEdBQUcsT0FBT0MsV0FBVyxLQUFLLFVBQVU7QUFDL0Q7QUFDQSxNQUFNQyxNQUFNLEdBQUdDLEdBQUcsSUFBSTtFQUNsQixPQUFPLE9BQU9GLFdBQVcsQ0FBQ0MsTUFBTSxLQUFLLFVBQVUsR0FDekNELFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsR0FDdkJBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLFlBQVlILFdBQVc7QUFDbEQsQ0FBQztBQUNELE1BQU1JLFlBQVksR0FBR0EsQ0FBQztFQUFFQyxJQUFJO0VBQUVDO0FBQUssQ0FBQyxFQUFFQyxjQUFjLEVBQUVDLFFBQVEsS0FBSztFQUMvRCxJQUFJZixjQUFjLElBQUlhLElBQUksWUFBWVosSUFBSSxFQUFFO0lBQ3hDLElBQUlhLGNBQWMsRUFBRTtNQUNoQixPQUFPQyxRQUFRLENBQUNGLElBQUksQ0FBQztJQUN6QixDQUFDLE1BQ0k7TUFDRCxPQUFPRyxrQkFBa0IsQ0FBQ0gsSUFBSSxFQUFFRSxRQUFRLENBQUM7SUFDN0M7RUFDSixDQUFDLE1BQ0ksSUFBSVQscUJBQXFCLEtBQ3pCTyxJQUFJLFlBQVlOLFdBQVcsSUFBSUMsTUFBTSxDQUFDSyxJQUFJLENBQUMsQ0FBQyxFQUFFO0lBQy9DLElBQUlDLGNBQWMsRUFBRTtNQUNoQixPQUFPQyxRQUFRLENBQUNGLElBQUksQ0FBQztJQUN6QixDQUFDLE1BQ0k7TUFDRCxPQUFPRyxrQkFBa0IsQ0FBQyxJQUFJZixJQUFJLENBQUMsQ0FBQ1ksSUFBSSxDQUFDLENBQUMsRUFBRUUsUUFBUSxDQUFDO0lBQ3pEO0VBQ0o7RUFDQTtFQUNBLE9BQU9BLFFBQVEsQ0FBQ2hCLHFEQUFZLENBQUNhLElBQUksQ0FBQyxJQUFJQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNELE1BQU1HLGtCQUFrQixHQUFHQSxDQUFDSCxJQUFJLEVBQUVFLFFBQVEsS0FBSztFQUMzQyxNQUFNRSxVQUFVLEdBQUcsSUFBSUMsVUFBVSxDQUFDLENBQUM7RUFDbkNELFVBQVUsQ0FBQ0UsTUFBTSxHQUFHLFlBQVk7SUFDNUIsTUFBTUMsT0FBTyxHQUFHSCxVQUFVLENBQUNJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQ1AsUUFBUSxDQUFDLEdBQUcsSUFBSUssT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQ25DLENBQUM7RUFDRCxPQUFPSCxVQUFVLENBQUNNLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDO0FBQ3pDLENBQUM7QUFDRCxTQUFTVyxPQUFPQSxDQUFDWCxJQUFJLEVBQUU7RUFDbkIsSUFBSUEsSUFBSSxZQUFZWSxVQUFVLEVBQUU7SUFDNUIsT0FBT1osSUFBSTtFQUNmLENBQUMsTUFDSSxJQUFJQSxJQUFJLFlBQVlOLFdBQVcsRUFBRTtJQUNsQyxPQUFPLElBQUlrQixVQUFVLENBQUNaLElBQUksQ0FBQztFQUMvQixDQUFDLE1BQ0k7SUFDRCxPQUFPLElBQUlZLFVBQVUsQ0FBQ1osSUFBSSxDQUFDSCxNQUFNLEVBQUVHLElBQUksQ0FBQ2EsVUFBVSxFQUFFYixJQUFJLENBQUNjLFVBQVUsQ0FBQztFQUN4RTtBQUNKO0FBQ0EsSUFBSUMsWUFBWTtBQUNULFNBQVNDLG9CQUFvQkEsQ0FBQ0MsTUFBTSxFQUFFZixRQUFRLEVBQUU7RUFDbkQsSUFBSWYsY0FBYyxJQUFJOEIsTUFBTSxDQUFDakIsSUFBSSxZQUFZWixJQUFJLEVBQUU7SUFDL0MsT0FBTzZCLE1BQU0sQ0FBQ2pCLElBQUksQ0FDYmtCLFdBQVcsQ0FBQyxDQUFDLENBQ2JDLElBQUksQ0FBQ1IsT0FBTyxDQUFDLENBQ2JRLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQztFQUN2QixDQUFDLE1BQ0ksSUFBSVQscUJBQXFCLEtBQ3pCd0IsTUFBTSxDQUFDakIsSUFBSSxZQUFZTixXQUFXLElBQUlDLE1BQU0sQ0FBQ3NCLE1BQU0sQ0FBQ2pCLElBQUksQ0FBQyxDQUFDLEVBQUU7SUFDN0QsT0FBT0UsUUFBUSxDQUFDUyxPQUFPLENBQUNNLE1BQU0sQ0FBQ2pCLElBQUksQ0FBQyxDQUFDO0VBQ3pDO0VBQ0FGLFlBQVksQ0FBQ21CLE1BQU0sRUFBRSxLQUFLLEVBQUVHLE9BQU8sSUFBSTtJQUNuQyxJQUFJLENBQUNMLFlBQVksRUFBRTtNQUNmQSxZQUFZLEdBQUcsSUFBSU0sV0FBVyxDQUFDLENBQUM7SUFDcEM7SUFDQW5CLFFBQVEsQ0FBQ2EsWUFBWSxDQUFDTyxNQUFNLENBQUNGLE9BQU8sQ0FBQyxDQUFDO0VBQzFDLENBQUMsQ0FBQztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcz83NTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBBQ0tFVF9UWVBFUyB9IGZyb20gXCIuL2NvbW1vbnMuanNcIjtcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG4vLyBBcnJheUJ1ZmZlci5pc1ZpZXcgbWV0aG9kIGlzIG5vdCBkZWZpbmVkIGluIElFMTBcbmNvbnN0IGlzVmlldyA9IG9iaiA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqICYmIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCBlbmNvZGVQYWNrZXQgPSAoeyB0eXBlLCBkYXRhIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgPT4ge1xuICAgIGlmICh3aXRoTmF0aXZlQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJlxuICAgICAgICAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhkYXRhKSkpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KG5ldyBCbG9iKFtkYXRhXSksIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBwbGFpbiBzdHJpbmdcbiAgICByZXR1cm4gY2FsbGJhY2soUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICBjYWxsYmFjayhcImJcIiArIChjb250ZW50IHx8IFwiXCIpKTtcbiAgICB9O1xuICAgIHJldHVybiBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZGF0YSk7XG59O1xuZnVuY3Rpb24gdG9BcnJheShkYXRhKSB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgfVxufVxubGV0IFRFWFRfRU5DT0RFUjtcbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVQYWNrZXRUb0JpbmFyeShwYWNrZXQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHdpdGhOYXRpdmVCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICByZXR1cm4gcGFja2V0LmRhdGFcbiAgICAgICAgICAgIC5hcnJheUJ1ZmZlcigpXG4gICAgICAgICAgICAudGhlbih0b0FycmF5KVxuICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiZcbiAgICAgICAgKHBhY2tldC5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KHBhY2tldC5kYXRhKSkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRvQXJyYXkocGFja2V0LmRhdGEpKTtcbiAgICB9XG4gICAgZW5jb2RlUGFja2V0KHBhY2tldCwgZmFsc2UsIGVuY29kZWQgPT4ge1xuICAgICAgICBpZiAoIVRFWFRfRU5DT0RFUikge1xuICAgICAgICAgICAgVEVYVF9FTkNPREVSID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soVEVYVF9FTkNPREVSLmVuY29kZShlbmNvZGVkKSk7XG4gICAgfSk7XG59XG5leHBvcnQgeyBlbmNvZGVQYWNrZXQgfTtcbiJdLCJuYW1lcyI6WyJQQUNLRVRfVFlQRVMiLCJ3aXRoTmF0aXZlQmxvYiIsIkJsb2IiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsImJ1ZmZlciIsImVuY29kZVBhY2tldCIsInR5cGUiLCJkYXRhIiwic3VwcG9ydHNCaW5hcnkiLCJjYWxsYmFjayIsImVuY29kZUJsb2JBc0Jhc2U2NCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiY29udGVudCIsInJlc3VsdCIsInNwbGl0IiwicmVhZEFzRGF0YVVSTCIsInRvQXJyYXkiLCJVaW50OEFycmF5IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJURVhUX0VOQ09ERVIiLCJlbmNvZGVQYWNrZXRUb0JpbmFyeSIsInBhY2tldCIsImFycmF5QnVmZmVyIiwidGhlbiIsImVuY29kZWQiLCJUZXh0RW5jb2RlciIsImVuY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/engine.io-parser/build/esm/encodePacket.browser.js\n"));

/***/ }),

/***/ "./node_modules/engine.io-parser/build/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/engine.io-parser/build/esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodePacket: function() { return /* reexport safe */ _decodePacket_js__WEBPACK_IMPORTED_MODULE_1__.decodePacket; },\n/* harmony export */   decodePacketFromBinary: function() { return /* binding */ decodePacketFromBinary; },\n/* harmony export */   decodePayload: function() { return /* binding */ decodePayload; },\n/* harmony export */   encodePacket: function() { return /* reexport safe */ _encodePacket_js__WEBPACK_IMPORTED_MODULE_0__.encodePacket; },\n/* harmony export */   encodePacketToBinary: function() { return /* reexport safe */ _encodePacket_js__WEBPACK_IMPORTED_MODULE_0__.encodePacketToBinary; },\n/* harmony export */   encodePayload: function() { return /* binding */ encodePayload; },\n/* harmony export */   protocol: function() { return /* binding */ protocol; }\n/* harmony export */ });\n/* harmony import */ var _encodePacket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encodePacket.js */ \"./node_modules/engine.io-parser/build/esm/encodePacket.browser.js\");\n/* harmony import */ var _decodePacket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decodePacket.js */ \"./node_modules/engine.io-parser/build/esm/decodePacket.browser.js\");\n\n\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    (0,_encodePacket_js__WEBPACK_IMPORTED_MODULE_0__.encodePacket)(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = (0,_decodePacket_js__WEBPACK_IMPORTED_MODULE_1__.decodePacket)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nlet TEXT_DECODER;\nfunction decodePacketFromBinary(data, isBinary, binaryType) {\n  if (!TEXT_DECODER) {\n    // lazily created for compatibility with old browser platforms\n    TEXT_DECODER = new TextDecoder();\n  }\n  // 48 === \"0\".charCodeAt(0) (OPEN packet type)\n  // 54 === \"6\".charCodeAt(0) (NOOP packet type)\n  const isPlainBinary = isBinary || data[0] < 48 || data[0] > 54;\n  return (0,_decodePacket_js__WEBPACK_IMPORTED_MODULE_1__.decodePacket)(isPlainBinary ? data : TEXT_DECODER.decode(data), binaryType);\n}\nconst protocol = 4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ3RCO0FBQ2pELE1BQU1HLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzQyxNQUFNQyxhQUFhLEdBQUdBLENBQUNDLE9BQU8sRUFBRUMsUUFBUSxLQUFLO0VBQ3pDO0VBQ0EsTUFBTUMsTUFBTSxHQUFHRixPQUFPLENBQUNFLE1BQU07RUFDN0IsTUFBTUMsY0FBYyxHQUFHLElBQUlDLEtBQUssQ0FBQ0YsTUFBTSxDQUFDO0VBQ3hDLElBQUlHLEtBQUssR0FBRyxDQUFDO0VBQ2JMLE9BQU8sQ0FBQ00sT0FBTyxDQUFDLENBQUNDLE1BQU0sRUFBRUMsQ0FBQyxLQUFLO0lBQzNCO0lBQ0FmLDhEQUFZLENBQUNjLE1BQU0sRUFBRSxLQUFLLEVBQUVFLGFBQWEsSUFBSTtNQUN6Q04sY0FBYyxDQUFDSyxDQUFDLENBQUMsR0FBR0MsYUFBYTtNQUNqQyxJQUFJLEVBQUVKLEtBQUssS0FBS0gsTUFBTSxFQUFFO1FBQ3BCRCxRQUFRLENBQUNFLGNBQWMsQ0FBQ08sSUFBSSxDQUFDZCxTQUFTLENBQUMsQ0FBQztNQUM1QztJQUNKLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOLENBQUM7QUFDRCxNQUFNZSxhQUFhLEdBQUdBLENBQUNDLGNBQWMsRUFBRUMsVUFBVSxLQUFLO0VBQ2xELE1BQU1WLGNBQWMsR0FBR1MsY0FBYyxDQUFDRSxLQUFLLENBQUNsQixTQUFTLENBQUM7RUFDdEQsTUFBTUksT0FBTyxHQUFHLEVBQUU7RUFDbEIsS0FBSyxJQUFJUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLGNBQWMsQ0FBQ0QsTUFBTSxFQUFFTSxDQUFDLEVBQUUsRUFBRTtJQUM1QyxNQUFNTyxhQUFhLEdBQUdwQiw4REFBWSxDQUFDUSxjQUFjLENBQUNLLENBQUMsQ0FBQyxFQUFFSyxVQUFVLENBQUM7SUFDakViLE9BQU8sQ0FBQ2dCLElBQUksQ0FBQ0QsYUFBYSxDQUFDO0lBQzNCLElBQUlBLGFBQWEsQ0FBQ0UsSUFBSSxLQUFLLE9BQU8sRUFBRTtNQUNoQztJQUNKO0VBQ0o7RUFDQSxPQUFPakIsT0FBTztBQUNsQixDQUFDO0FBQ0QsSUFBSWtCLFlBQVk7QUFDVCxTQUFTQyxzQkFBc0JBLENBQUNDLElBQUksRUFBRUMsUUFBUSxFQUFFUixVQUFVLEVBQUU7RUFDL0QsSUFBSSxDQUFDSyxZQUFZLEVBQUU7SUFDZjtJQUNBQSxZQUFZLEdBQUcsSUFBSUksV0FBVyxDQUFDLENBQUM7RUFDcEM7RUFDQTtFQUNBO0VBQ0EsTUFBTUMsYUFBYSxHQUFHRixRQUFRLElBQUlELElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO0VBQzlELE9BQU96Qiw4REFBWSxDQUFDNEIsYUFBYSxHQUFHSCxJQUFJLEdBQUdGLFlBQVksQ0FBQ00sTUFBTSxDQUFDSixJQUFJLENBQUMsRUFBRVAsVUFBVSxDQUFDO0FBQ3JGO0FBQ08sTUFBTVksUUFBUSxHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2luZGV4LmpzP2RmNTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlUGFja2V0LCBlbmNvZGVQYWNrZXRUb0JpbmFyeSB9IGZyb20gXCIuL2VuY29kZVBhY2tldC5qc1wiO1xuaW1wb3J0IHsgZGVjb2RlUGFja2V0IH0gZnJvbSBcIi4vZGVjb2RlUGFja2V0LmpzXCI7XG5jb25zdCBTRVBBUkFUT1IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMwKTsgLy8gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlbGltaXRlciNBU0NJSV9kZWxpbWl0ZWRfdGV4dFxuY29uc3QgZW5jb2RlUGF5bG9hZCA9IChwYWNrZXRzLCBjYWxsYmFjaykgPT4ge1xuICAgIC8vIHNvbWUgcGFja2V0cyBtYXkgYmUgYWRkZWQgdG8gdGhlIGFycmF5IHdoaWxlIGVuY29kaW5nLCBzbyB0aGUgaW5pdGlhbCBsZW5ndGggbXVzdCBiZSBzYXZlZFxuICAgIGNvbnN0IGxlbmd0aCA9IHBhY2tldHMubGVuZ3RoO1xuICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBwYWNrZXRzLmZvckVhY2goKHBhY2tldCwgaSkgPT4ge1xuICAgICAgICAvLyBmb3JjZSBiYXNlNjQgZW5jb2RpbmcgZm9yIGJpbmFyeSBwYWNrZXRzXG4gICAgICAgIGVuY29kZVBhY2tldChwYWNrZXQsIGZhbHNlLCBlbmNvZGVkUGFja2V0ID0+IHtcbiAgICAgICAgICAgIGVuY29kZWRQYWNrZXRzW2ldID0gZW5jb2RlZFBhY2tldDtcbiAgICAgICAgICAgIGlmICgrK2NvdW50ID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlbmNvZGVkUGFja2V0cy5qb2luKFNFUEFSQVRPUikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZWNvZGVQYXlsb2FkID0gKGVuY29kZWRQYXlsb2FkLCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBlbmNvZGVkUGF5bG9hZC5zcGxpdChTRVBBUkFUT1IpO1xuICAgIGNvbnN0IHBhY2tldHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWRQYWNrZXQgPSBkZWNvZGVQYWNrZXQoZW5jb2RlZFBhY2tldHNbaV0sIGJpbmFyeVR5cGUpO1xuICAgICAgICBwYWNrZXRzLnB1c2goZGVjb2RlZFBhY2tldCk7XG4gICAgICAgIGlmIChkZWNvZGVkUGFja2V0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhY2tldHM7XG59O1xubGV0IFRFWFRfREVDT0RFUjtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVQYWNrZXRGcm9tQmluYXJ5KGRhdGEsIGlzQmluYXJ5LCBiaW5hcnlUeXBlKSB7XG4gICAgaWYgKCFURVhUX0RFQ09ERVIpIHtcbiAgICAgICAgLy8gbGF6aWx5IGNyZWF0ZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgYnJvd3NlciBwbGF0Zm9ybXNcbiAgICAgICAgVEVYVF9ERUNPREVSID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgfVxuICAgIC8vIDQ4ID09PSBcIjBcIi5jaGFyQ29kZUF0KDApIChPUEVOIHBhY2tldCB0eXBlKVxuICAgIC8vIDU0ID09PSBcIjZcIi5jaGFyQ29kZUF0KDApIChOT09QIHBhY2tldCB0eXBlKVxuICAgIGNvbnN0IGlzUGxhaW5CaW5hcnkgPSBpc0JpbmFyeSB8fCBkYXRhWzBdIDwgNDggfHwgZGF0YVswXSA+IDU0O1xuICAgIHJldHVybiBkZWNvZGVQYWNrZXQoaXNQbGFpbkJpbmFyeSA/IGRhdGEgOiBURVhUX0RFQ09ERVIuZGVjb2RlKGRhdGEpLCBiaW5hcnlUeXBlKTtcbn1cbmV4cG9ydCBjb25zdCBwcm90b2NvbCA9IDQ7XG5leHBvcnQgeyBlbmNvZGVQYWNrZXQsIGVuY29kZVBhY2tldFRvQmluYXJ5LCBlbmNvZGVQYXlsb2FkLCBkZWNvZGVQYWNrZXQsIGRlY29kZVBheWxvYWQgfTtcbiJdLCJuYW1lcyI6WyJlbmNvZGVQYWNrZXQiLCJlbmNvZGVQYWNrZXRUb0JpbmFyeSIsImRlY29kZVBhY2tldCIsIlNFUEFSQVRPUiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImVuY29kZVBheWxvYWQiLCJwYWNrZXRzIiwiY2FsbGJhY2siLCJsZW5ndGgiLCJlbmNvZGVkUGFja2V0cyIsIkFycmF5IiwiY291bnQiLCJmb3JFYWNoIiwicGFja2V0IiwiaSIsImVuY29kZWRQYWNrZXQiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImVuY29kZWRQYXlsb2FkIiwiYmluYXJ5VHlwZSIsInNwbGl0IiwiZGVjb2RlZFBhY2tldCIsInB1c2giLCJ0eXBlIiwiVEVYVF9ERUNPREVSIiwiZGVjb2RlUGFja2V0RnJvbUJpbmFyeSIsImRhdGEiLCJpc0JpbmFyeSIsIlRleHREZWNvZGVyIiwiaXNQbGFpbkJpbmFyeSIsImRlY29kZSIsInByb3RvY29sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/engine.io-parser/build/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/contrib/backo2.js":
/*!*******************************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/contrib/backo2.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Backoff: function() { return /* binding */ Backoff; }\n/* harmony export */ });\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand = Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n  this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n  this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n  this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n  this.jitter = jitter;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9iYWNrbzIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxPQUFPQSxDQUFDQyxJQUFJLEVBQUU7RUFDMUJBLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUMsQ0FBQztFQUNqQixJQUFJLENBQUNDLEVBQUUsR0FBR0QsSUFBSSxDQUFDRSxHQUFHLElBQUksR0FBRztFQUN6QixJQUFJLENBQUNDLEdBQUcsR0FBR0gsSUFBSSxDQUFDRyxHQUFHLElBQUksS0FBSztFQUM1QixJQUFJLENBQUNDLE1BQU0sR0FBR0osSUFBSSxDQUFDSSxNQUFNLElBQUksQ0FBQztFQUM5QixJQUFJLENBQUNDLE1BQU0sR0FBR0wsSUFBSSxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxJQUFJTCxJQUFJLENBQUNLLE1BQU0sSUFBSSxDQUFDLEdBQUdMLElBQUksQ0FBQ0ssTUFBTSxHQUFHLENBQUM7RUFDbkUsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBUCxPQUFPLENBQUNRLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFlBQVk7RUFDckMsSUFBSVAsRUFBRSxHQUFHLElBQUksQ0FBQ0EsRUFBRSxHQUFHUSxJQUFJLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNOLE1BQU0sRUFBRSxJQUFJLENBQUNFLFFBQVEsRUFBRSxDQUFDO0VBQ3pELElBQUksSUFBSSxDQUFDRCxNQUFNLEVBQUU7SUFDYixJQUFJTSxJQUFJLEdBQUdGLElBQUksQ0FBQ0csTUFBTSxDQUFDLENBQUM7SUFDeEIsSUFBSUMsU0FBUyxHQUFHSixJQUFJLENBQUNLLEtBQUssQ0FBQ0gsSUFBSSxHQUFHLElBQUksQ0FBQ04sTUFBTSxHQUFHSixFQUFFLENBQUM7SUFDbkRBLEVBQUUsR0FBRyxDQUFDUSxJQUFJLENBQUNLLEtBQUssQ0FBQ0gsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUdWLEVBQUUsR0FBR1ksU0FBUyxHQUFHWixFQUFFLEdBQUdZLFNBQVM7RUFDM0U7RUFDQSxPQUFPSixJQUFJLENBQUNQLEdBQUcsQ0FBQ0QsRUFBRSxFQUFFLElBQUksQ0FBQ0UsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNyQyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixPQUFPLENBQUNRLFNBQVMsQ0FBQ1EsS0FBSyxHQUFHLFlBQVk7RUFDbEMsSUFBSSxDQUFDVCxRQUFRLEdBQUcsQ0FBQztBQUNyQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBUCxPQUFPLENBQUNRLFNBQVMsQ0FBQ1MsTUFBTSxHQUFHLFVBQVVkLEdBQUcsRUFBRTtFQUN0QyxJQUFJLENBQUNELEVBQUUsR0FBR0MsR0FBRztBQUNqQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSCxPQUFPLENBQUNRLFNBQVMsQ0FBQ1UsTUFBTSxHQUFHLFVBQVVkLEdBQUcsRUFBRTtFQUN0QyxJQUFJLENBQUNBLEdBQUcsR0FBR0EsR0FBRztBQUNsQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixPQUFPLENBQUNRLFNBQVMsQ0FBQ1csU0FBUyxHQUFHLFVBQVViLE1BQU0sRUFBRTtFQUM1QyxJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtBQUN4QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL2JhY2tvMi5qcz9jOWUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gICAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gICAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24gKG1pbikge1xuICAgIHRoaXMubXMgPSBtaW47XG59O1xuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbiAobWF4KSB7XG4gICAgdGhpcy5tYXggPSBtYXg7XG59O1xuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uIChqaXR0ZXIpIHtcbiAgICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG4iXSwibmFtZXMiOlsiQmFja29mZiIsIm9wdHMiLCJtcyIsIm1pbiIsIm1heCIsImZhY3RvciIsImppdHRlciIsImF0dGVtcHRzIiwicHJvdG90eXBlIiwiZHVyYXRpb24iLCJNYXRoIiwicG93IiwicmFuZCIsInJhbmRvbSIsImRldmlhdGlvbiIsImZsb29yIiwicmVzZXQiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/contrib/backo2.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Manager: function() { return /* reexport safe */ _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager; },\n/* harmony export */   Socket: function() { return /* reexport safe */ _socket_js__WEBPACK_IMPORTED_MODULE_2__.Socket; },\n/* harmony export */   connect: function() { return /* binding */ lookup; },\n/* harmony export */   \"default\": function() { return /* binding */ lookup; },\n/* harmony export */   io: function() { return /* binding */ lookup; },\n/* harmony export */   protocol: function() { return /* reexport safe */ socket_io_parser__WEBPACK_IMPORTED_MODULE_3__.protocol; }\n/* harmony export */ });\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"./node_modules/socket.io-client/build/esm/url.js\");\n/* harmony import */ var _manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./manager.js */ \"./node_modules/socket.io-client/build/esm/manager.js\");\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./socket.js */ \"./node_modules/socket.io-client/build/esm/socket.js\");\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/build/esm/index.js\");\n\n\n\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n  if (typeof uri === \"object\") {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n  const parsed = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.url)(uri, opts.path || \"/socket.io\");\n  const source = parsed.source;\n  const id = parsed.id;\n  const path = parsed.path;\n  const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n  const newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n  let io;\n  if (newConnection) {\n    io = new _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      cache[id] = new _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager(source, opts);\n    }\n    io = cache[id];\n  }\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.queryKey;\n  }\n  return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n  Manager: _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager,\n  Socket: _socket_js__WEBPACK_IMPORTED_MODULE_2__.Socket,\n  io: lookup,\n  connect: lookup\n});\n/**\n * Protocol version.\n *\n * @public\n */\n\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNRO0FBQ0Y7QUFDckM7QUFDQTtBQUNBO0FBQ0EsTUFBTUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixTQUFTQyxNQUFNQSxDQUFDQyxHQUFHLEVBQUVDLElBQUksRUFBRTtFQUN2QixJQUFJLE9BQU9ELEdBQUcsS0FBSyxRQUFRLEVBQUU7SUFDekJDLElBQUksR0FBR0QsR0FBRztJQUNWQSxHQUFHLEdBQUdFLFNBQVM7RUFDbkI7RUFDQUQsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQyxDQUFDO0VBQ2pCLE1BQU1FLE1BQU0sR0FBR1IsNENBQUcsQ0FBQ0ssR0FBRyxFQUFFQyxJQUFJLENBQUNHLElBQUksSUFBSSxZQUFZLENBQUM7RUFDbEQsTUFBTUMsTUFBTSxHQUFHRixNQUFNLENBQUNFLE1BQU07RUFDNUIsTUFBTUMsRUFBRSxHQUFHSCxNQUFNLENBQUNHLEVBQUU7RUFDcEIsTUFBTUYsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7RUFDeEIsTUFBTUcsYUFBYSxHQUFHVCxLQUFLLENBQUNRLEVBQUUsQ0FBQyxJQUFJRixJQUFJLElBQUlOLEtBQUssQ0FBQ1EsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO0VBQzVELE1BQU1FLGFBQWEsR0FBR1AsSUFBSSxDQUFDUSxRQUFRLElBQy9CUixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFDNUIsS0FBSyxLQUFLQSxJQUFJLENBQUNTLFNBQVMsSUFDeEJILGFBQWE7RUFDakIsSUFBSUksRUFBRTtFQUNOLElBQUlILGFBQWEsRUFBRTtJQUNmRyxFQUFFLEdBQUcsSUFBSWYsZ0RBQU8sQ0FBQ1MsTUFBTSxFQUFFSixJQUFJLENBQUM7RUFDbEMsQ0FBQyxNQUNJO0lBQ0QsSUFBSSxDQUFDSCxLQUFLLENBQUNRLEVBQUUsQ0FBQyxFQUFFO01BQ1pSLEtBQUssQ0FBQ1EsRUFBRSxDQUFDLEdBQUcsSUFBSVYsZ0RBQU8sQ0FBQ1MsTUFBTSxFQUFFSixJQUFJLENBQUM7SUFDekM7SUFDQVUsRUFBRSxHQUFHYixLQUFLLENBQUNRLEVBQUUsQ0FBQztFQUNsQjtFQUNBLElBQUlILE1BQU0sQ0FBQ1MsS0FBSyxJQUFJLENBQUNYLElBQUksQ0FBQ1csS0FBSyxFQUFFO0lBQzdCWCxJQUFJLENBQUNXLEtBQUssR0FBR1QsTUFBTSxDQUFDVSxRQUFRO0VBQ2hDO0VBQ0EsT0FBT0YsRUFBRSxDQUFDRyxNQUFNLENBQUNYLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFSCxJQUFJLENBQUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0FjLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDakIsTUFBTSxFQUFFO0VBQ2xCSCxPQUFPO0VBQ1BDLE1BQU07RUFDTmMsRUFBRSxFQUFFWixNQUFNO0VBQ1ZrQixPQUFPLEVBQUVsQjtBQUNiLENBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vaW5kZXguanM/ZWNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1cmwgfSBmcm9tIFwiLi91cmwuanNcIjtcbmltcG9ydCB7IE1hbmFnZXIgfSBmcm9tIFwiLi9tYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwiLi9zb2NrZXQuanNcIjtcbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cbmNvbnN0IGNhY2hlID0ge307XG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBwYXJzZWQgPSB1cmwodXJpLCBvcHRzLnBhdGggfHwgXCIvc29ja2V0LmlvXCIpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gICAgY29uc3QgaWQgPSBwYXJzZWQuaWQ7XG4gICAgY29uc3QgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF1bXCJuc3BzXCJdO1xuICAgIGNvbnN0IG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8XG4gICAgICAgIG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fFxuICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHxcbiAgICAgICAgc2FtZU5hbWVzcGFjZTtcbiAgICBsZXQgaW87XG4gICAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgaW8gPSBuZXcgTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFjYWNoZVtpZF0pIHtcbiAgICAgICAgICAgIGNhY2hlW2lkXSA9IG5ldyBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaW8gPSBjYWNoZVtpZF07XG4gICAgfVxuICAgIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICAgICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeUtleTtcbiAgICB9XG4gICAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XG59XG4vLyBzbyB0aGF0IFwibG9va3VwXCIgY2FuIGJlIHVzZWQgYm90aCBhcyBhIGZ1bmN0aW9uIChlLmcuIGBpbyguLi4pYCkgYW5kIGFzIGFcbi8vIG5hbWVzcGFjZSAoZS5nLiBgaW8uY29ubmVjdCguLi4pYCksIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5PYmplY3QuYXNzaWduKGxvb2t1cCwge1xuICAgIE1hbmFnZXIsXG4gICAgU29ja2V0LFxuICAgIGlvOiBsb29rdXAsXG4gICAgY29ubmVjdDogbG9va3VwLFxufSk7XG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgeyBwcm90b2NvbCB9IGZyb20gXCJzb2NrZXQuaW8tcGFyc2VyXCI7XG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgeyBNYW5hZ2VyLCBTb2NrZXQsIGxvb2t1cCBhcyBpbywgbG9va3VwIGFzIGNvbm5lY3QsIGxvb2t1cCBhcyBkZWZhdWx0LCB9O1xuIl0sIm5hbWVzIjpbInVybCIsIk1hbmFnZXIiLCJTb2NrZXQiLCJjYWNoZSIsImxvb2t1cCIsInVyaSIsIm9wdHMiLCJ1bmRlZmluZWQiLCJwYXJzZWQiLCJwYXRoIiwic291cmNlIiwiaWQiLCJzYW1lTmFtZXNwYWNlIiwibmV3Q29ubmVjdGlvbiIsImZvcmNlTmV3IiwibXVsdGlwbGV4IiwiaW8iLCJxdWVyeSIsInF1ZXJ5S2V5Iiwic29ja2V0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29ubmVjdCIsInByb3RvY29sIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/manager.js":
/*!************************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/manager.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Manager: function() { return /* binding */ Manager; }\n/* harmony export */ });\n/* harmony import */ var engine_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! engine.io-client */ \"./node_modules/engine.io-client/build/esm/index.js\");\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socket.js */ \"./node_modules/socket.io-client/build/esm/socket.js\");\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/build/esm/index.js\");\n/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./on.js */ \"./node_modules/socket.io-client/build/esm/on.js\");\n/* harmony import */ var _contrib_backo2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contrib/backo2.js */ \"./node_modules/socket.io-client/build/esm/contrib/backo2.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n\n\n\n\n\n\nclass Manager extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_5__.Emitter {\n  constructor(uri, opts) {\n    var _a;\n    super();\n    this.nsps = {};\n    this.subs = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.installTimerFunctions)(this, opts);\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    this.backoff = new _contrib_backo2_js__WEBPACK_IMPORTED_MODULE_4__.Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n    const _parser = opts.parser || socket_io_parser__WEBPACK_IMPORTED_MODULE_2__;\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n  reconnectionDelay(v) {\n    var _a;\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n  randomizationFactor(v) {\n    var _a;\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n  reconnectionDelayMax(v) {\n    var _a;\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\n   * Starts trying to reconnect if reconnection is enabled and we have not\n   * started reconnecting yet\n   *\n   * @private\n   */\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\n   * Sets the current transport `socket`.\n   *\n   * @param {Function} fn - optional, callback\n   * @return self\n   * @public\n   */\n  open(fn) {\n    if (~this._readyState.indexOf(\"open\")) return this;\n    this.engine = new engine_io_client__WEBPACK_IMPORTED_MODULE_0__.Socket(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false;\n    // emit `open`\n    const openSubDestroy = (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    });\n    const onError = err => {\n      this.cleanup();\n      this._readyState = \"closed\";\n      this.emitReserved(\"error\", err);\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        this.maybeReconnectOnOpen();\n      }\n    };\n    // emit `error`\n    const errorSub = (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"error\", onError);\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      // set timer\n      const timer = this.setTimeoutFn(() => {\n        openSubDestroy();\n        onError(new Error(\"timeout\"));\n        socket.close();\n      }, timeout);\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n      this.subs.push(() => {\n        this.clearTimeoutFn(timer);\n      });\n    }\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\n   * Alias for open()\n   *\n   * @return self\n   * @public\n   */\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\n   * Called upon transport open.\n   *\n   * @private\n   */\n  onopen() {\n    // clear old subs\n    this.cleanup();\n    // mark as open\n    this._readyState = \"open\";\n    this.emitReserved(\"open\");\n    // add new subs\n    const socket = this.engine;\n    this.subs.push((0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"ping\", this.onping.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"data\", this.ondata.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"error\", this.onerror.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"close\", this.onclose.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\n   * Called upon a ping.\n   *\n   * @private\n   */\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  /**\n   * Called with data.\n   *\n   * @private\n   */\n  ondata(data) {\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      this.onclose(\"parse error\", e);\n    }\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n  ondecoded(packet) {\n    // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n    (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {\n      this.emitReserved(\"packet\", packet);\n    }, this.setTimeoutFn);\n  }\n  /**\n   * Called upon socket error.\n   *\n   * @private\n   */\n  onerror(err) {\n    this.emitReserved(\"error\", err);\n  }\n  /**\n   * Creates a new socket for the given `nsp`.\n   *\n   * @return {Socket}\n   * @public\n   */\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n    if (!socket) {\n      socket = new _socket_js__WEBPACK_IMPORTED_MODULE_1__.Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    } else if (this._autoConnect && !socket.active) {\n      socket.connect();\n    }\n    return socket;\n  }\n  /**\n   * Called upon a socket close.\n   *\n   * @param socket\n   * @private\n   */\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n      if (socket.active) {\n        return;\n      }\n    }\n    this._close();\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param packet\n   * @private\n   */\n  _packet(packet) {\n    const encodedPackets = this.encoder.encode(packet);\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\n   * Clean up transport subscriptions and packet buffer.\n   *\n   * @private\n   */\n  cleanup() {\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\n   * Close the current socket.\n   *\n   * @private\n   */\n  _close() {\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    this.onclose(\"forced close\");\n    if (this.engine) this.engine.close();\n  }\n  /**\n   * Alias for close()\n   *\n   * @private\n   */\n  disconnect() {\n    return this._close();\n  }\n  /**\n   * Called upon engine close.\n   *\n   * @private\n   */\n  onclose(reason, description) {\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    this.emitReserved(\"close\", reason, description);\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\n   * Attempt a reconnection.\n   *\n   * @private\n   */\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      this.backoff.reset();\n      this.emitReserved(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      this._reconnecting = true;\n      const timer = this.setTimeoutFn(() => {\n        if (self.skipReconnect) return;\n        this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n        // check again for the case socket closed in above events\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            self._reconnecting = false;\n            self.reconnect();\n            this.emitReserved(\"reconnect_error\", err);\n          } else {\n            self.onreconnect();\n          }\n        });\n      }, delay);\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n      this.subs.push(() => {\n        this.clearTimeoutFn(timer);\n      });\n    }\n  }\n  /**\n   * Called upon successful reconnect.\n   *\n   * @private\n   */\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    this.emitReserved(\"reconnect\", attempt);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/manager.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/on.js":
/*!*******************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/on.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   on: function() { return /* binding */ on; }\n/* harmony export */ });\nfunction on(obj, ev, fn) {\n  obj.on(ev, fn);\n  return function subDestroy() {\n    obj.off(ev, fn);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLEVBQUVBLENBQUNDLEdBQUcsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFDNUJGLEdBQUcsQ0FBQ0QsRUFBRSxDQUFDRSxFQUFFLEVBQUVDLEVBQUUsQ0FBQztFQUNkLE9BQU8sU0FBU0MsVUFBVUEsQ0FBQSxFQUFHO0lBQ3pCSCxHQUFHLENBQUNJLEdBQUcsQ0FBQ0gsRUFBRSxFQUFFQyxFQUFFLENBQUM7RUFDbkIsQ0FBQztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9vbi5qcz80ZjVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBvbihvYmosIGV2LCBmbikge1xuICAgIG9iai5vbihldiwgZm4pO1xuICAgIHJldHVybiBmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICBvYmoub2ZmKGV2LCBmbik7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJvbiIsIm9iaiIsImV2IiwiZm4iLCJzdWJEZXN0cm95Iiwib2ZmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/on.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/socket.js":
/*!***********************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/socket.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Socket: function() { return /* binding */ Socket; }\n/* harmony export */ });\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-parser */ \"./node_modules/socket.io-parser/build/esm/index.js\");\n/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./on.js */ \"./node_modules/socket.io-client/build/esm/on.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n\n\n\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nclass Socket extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_2__.Emitter {\n  /**\n   * `Socket` constructor.\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n    this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n    this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n    this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n    this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n    this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n    this._queueSeq = 0;\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [(0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"open\", this.onopen.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"packet\", this.onpacket.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"error\", this.onerror.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n   *\n   * @example\n   * const socket = io();\n   *\n   * console.log(socket.active); // true\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   if (reason === \"io server disconnect\") {\n   *     // the disconnection was initiated by the server, you need to manually reconnect\n   *     console.log(socket.active); // false\n   *   }\n   *   // else the socket will automatically try to reconnect\n   *   console.log(socket.active); // true\n   * });\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @example\n   * const socket = io({\n   *   autoConnect: false\n   * });\n   *\n   * socket.connect();\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for {@link connect()}.\n   */\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * socket.send(\"hello\");\n   *\n   * // this is equivalent to\n   * socket.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @example\n   * socket.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the server\n   * socket.emit(\"hello\", \"world\", (val) => {\n   *   // ...\n   * });\n   *\n   * @return self\n   */\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n  _registerAckCallback(id, ack) {\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = (...args) => {\n      // @ts-ignore\n      this.io.clearTimeoutFn(timer);\n      ack.apply(this, [null, ...args]);\n    };\n  }\n  /**\n   * Emits an event and waits for an acknowledgement\n   *\n   * @example\n   * // without timeout\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\n   *\n   * // with a specific timeout\n   * try {\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n   * } catch (err) {\n   *   // the server did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when the server acknowledges the event\n   */\n  emitWithAck(ev, ...args) {\n    // the timeout flag is optional\n    const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n    return new Promise((resolve, reject) => {\n      args.push((arg1, arg2) => {\n        if (withErr) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        } else {\n          return resolve(arg1);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Add the packet to the queue.\n   * @param args\n   * @private\n   */\n  _addToQueue(args) {\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push((err, ...responseArgs) => {\n      if (packet !== this._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > this._opts.retries) {\n          this._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        this._queue.shift();\n        if (ack) {\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return this._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  /**\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\n   * @param force - whether to resend a packet that has not been acknowledged yet\n   *\n   * @private\n   */\n  _drainQueue(force = false) {\n    if (!this.connected || this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending && !force) {\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\n   * Sends a CONNECT packet to initiate the Socket.IO session.\n   *\n   * @param data\n   * @private\n   */\n  _sendConnectPacket(data) {\n    this.packet({\n      type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @param description\n   * @private\n   */\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.EVENT:\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.ACK:\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      self.packet({\n        type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n    this._drainQueue(true);\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n   *\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   // console.log(reason); prints \"io client disconnect\"\n   * });\n   *\n   * socket.disconnect();\n   *\n   * @return self\n   */\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\n   * Alias for {@link disconnect()}.\n   *\n   * @return self\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * socket.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @example\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n   *\n   * @returns self\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * @example\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   *\n   * @returns self\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @example\n   * socket.onAny((event, ...args) => {\n   *   console.log(`got ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @example\n   * socket.prependAny((event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * }\n   *\n   * socket.onAny(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAny(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAny();\n   *\n   * @param listener\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.onAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.prependAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * }\n   *\n   * socket.onAnyOutgoing(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAnyOutgoing(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAnyOutgoing();\n   *\n   * @param [listener] - the catch-all listener (optional)\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\n   * Notify the listeners for each packet sent\n   *\n   * @param packet\n   *\n   * @private\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/socket.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-client/build/esm/url.js":
/*!********************************************************!*\
  !*** ./node_modules/socket.io-client/build/esm/url.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   url: function() { return /* binding */ url; }\n/* harmony export */ });\n/* harmony import */ var engine_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! engine.io-client */ \"./node_modules/engine.io-client/build/esm/index.js\");\n\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, path = \"\", loc) {\n  let obj = uri;\n  // default to window.location\n  loc = loc || typeof location !== \"undefined\" && location;\n  if (null == uri) uri = loc.protocol + \"//\" + loc.host;\n  // relative path support\n  if (typeof uri === \"string\") {\n    if (\"/\" === uri.charAt(0)) {\n      if (\"/\" === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      if (\"undefined\" !== typeof loc) {\n        uri = loc.protocol + \"//\" + uri;\n      } else {\n        uri = \"https://\" + uri;\n      }\n    }\n    // parse\n    obj = (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.parse)(uri);\n  }\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = \"80\";\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = \"443\";\n    }\n  }\n  obj.path = obj.path || \"/\";\n  const ipv6 = obj.host.indexOf(\":\") !== -1;\n  const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n  // define unique id\n  obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n  // define href\n  obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vdXJsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLEdBQUdBLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxHQUFHLEVBQUUsRUFBRUMsR0FBRyxFQUFFO0VBQ3JDLElBQUlDLEdBQUcsR0FBR0gsR0FBRztFQUNiO0VBQ0FFLEdBQUcsR0FBR0EsR0FBRyxJQUFLLE9BQU9FLFFBQVEsS0FBSyxXQUFXLElBQUlBLFFBQVM7RUFDMUQsSUFBSSxJQUFJLElBQUlKLEdBQUcsRUFDWEEsR0FBRyxHQUFHRSxHQUFHLENBQUNHLFFBQVEsR0FBRyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0ksSUFBSTtFQUN4QztFQUNBLElBQUksT0FBT04sR0FBRyxLQUFLLFFBQVEsRUFBRTtJQUN6QixJQUFJLEdBQUcsS0FBS0EsR0FBRyxDQUFDTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDdkIsSUFBSSxHQUFHLEtBQUtQLEdBQUcsQ0FBQ08sTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3ZCUCxHQUFHLEdBQUdFLEdBQUcsQ0FBQ0csUUFBUSxHQUFHTCxHQUFHO01BQzVCLENBQUMsTUFDSTtRQUNEQSxHQUFHLEdBQUdFLEdBQUcsQ0FBQ0ksSUFBSSxHQUFHTixHQUFHO01BQ3hCO0lBQ0o7SUFDQSxJQUFJLENBQUMscUJBQXFCLENBQUNRLElBQUksQ0FBQ1IsR0FBRyxDQUFDLEVBQUU7TUFDbEMsSUFBSSxXQUFXLEtBQUssT0FBT0UsR0FBRyxFQUFFO1FBQzVCRixHQUFHLEdBQUdFLEdBQUcsQ0FBQ0csUUFBUSxHQUFHLElBQUksR0FBR0wsR0FBRztNQUNuQyxDQUFDLE1BQ0k7UUFDREEsR0FBRyxHQUFHLFVBQVUsR0FBR0EsR0FBRztNQUMxQjtJQUNKO0lBQ0E7SUFDQUcsR0FBRyxHQUFHTCx1REFBSyxDQUFDRSxHQUFHLENBQUM7RUFDcEI7RUFDQTtFQUNBLElBQUksQ0FBQ0csR0FBRyxDQUFDTSxJQUFJLEVBQUU7SUFDWCxJQUFJLGFBQWEsQ0FBQ0QsSUFBSSxDQUFDTCxHQUFHLENBQUNFLFFBQVEsQ0FBQyxFQUFFO01BQ2xDRixHQUFHLENBQUNNLElBQUksR0FBRyxJQUFJO0lBQ25CLENBQUMsTUFDSSxJQUFJLGNBQWMsQ0FBQ0QsSUFBSSxDQUFDTCxHQUFHLENBQUNFLFFBQVEsQ0FBQyxFQUFFO01BQ3hDRixHQUFHLENBQUNNLElBQUksR0FBRyxLQUFLO0lBQ3BCO0VBQ0o7RUFDQU4sR0FBRyxDQUFDRixJQUFJLEdBQUdFLEdBQUcsQ0FBQ0YsSUFBSSxJQUFJLEdBQUc7RUFDMUIsTUFBTVMsSUFBSSxHQUFHUCxHQUFHLENBQUNHLElBQUksQ0FBQ0ssT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUN6QyxNQUFNTCxJQUFJLEdBQUdJLElBQUksR0FBRyxHQUFHLEdBQUdQLEdBQUcsQ0FBQ0csSUFBSSxHQUFHLEdBQUcsR0FBR0gsR0FBRyxDQUFDRyxJQUFJO0VBQ25EO0VBQ0FILEdBQUcsQ0FBQ1MsRUFBRSxHQUFHVCxHQUFHLENBQUNFLFFBQVEsR0FBRyxLQUFLLEdBQUdDLElBQUksR0FBRyxHQUFHLEdBQUdILEdBQUcsQ0FBQ00sSUFBSSxHQUFHUixJQUFJO0VBQzVEO0VBQ0FFLEdBQUcsQ0FBQ1UsSUFBSSxHQUNKVixHQUFHLENBQUNFLFFBQVEsR0FDUixLQUFLLEdBQ0xDLElBQUksSUFDSEosR0FBRyxJQUFJQSxHQUFHLENBQUNPLElBQUksS0FBS04sR0FBRyxDQUFDTSxJQUFJLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBR04sR0FBRyxDQUFDTSxJQUFJLENBQUM7RUFDNUQsT0FBT04sR0FBRztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS91cmwuanM/ZjI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSB9IGZyb20gXCJlbmdpbmUuaW8tY2xpZW50XCI7XG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHVyaSAtIHVybFxuICogQHBhcmFtIHBhdGggLSB0aGUgcmVxdWVzdCBwYXRoIG9mIHRoZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gbG9jIC0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cmwodXJpLCBwYXRoID0gXCJcIiwgbG9jKSB7XG4gICAgbGV0IG9iaiA9IHVyaTtcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uKTtcbiAgICBpZiAobnVsbCA9PSB1cmkpXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xuICAgIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG4gICAgICAgIG9iaiA9IHBhcnNlKHVyaSk7XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICAgIGlmICghb2JqLnBvcnQpIHtcbiAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiODBcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI0NDNcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvYmoucGF0aCA9IG9iai5wYXRoIHx8IFwiL1wiO1xuICAgIGNvbnN0IGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgY29uc3QgaG9zdCA9IGlwdjYgPyBcIltcIiArIG9iai5ob3N0ICsgXCJdXCIgOiBvYmouaG9zdDtcbiAgICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gICAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgXCI6Ly9cIiArIGhvc3QgKyBcIjpcIiArIG9iai5wb3J0ICsgcGF0aDtcbiAgICAvLyBkZWZpbmUgaHJlZlxuICAgIG9iai5ocmVmID1cbiAgICAgICAgb2JqLnByb3RvY29sICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgaG9zdCArXG4gICAgICAgICAgICAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtcbiAgICByZXR1cm4gb2JqO1xufVxuIl0sIm5hbWVzIjpbInBhcnNlIiwidXJsIiwidXJpIiwicGF0aCIsImxvYyIsIm9iaiIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwiY2hhckF0IiwidGVzdCIsInBvcnQiLCJpcHY2IiwiaW5kZXhPZiIsImlkIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/socket.io-client/build/esm/url.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-parser/build/esm/binary.js":
/*!***********************************************************!*\
  !*** ./node_modules/socket.io-parser/build/esm/binary.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deconstructPacket: function() { return /* binding */ deconstructPacket; },\n/* harmony export */   reconstructPacket: function() { return /* binding */ reconstructPacket; }\n/* harmony export */ });\n/* harmony import */ var _is_binary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-binary.js */ \"./node_modules/socket.io-parser/build/esm/is-binary.js\");\n\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nfunction deconstructPacket(packet) {\n  const buffers = [];\n  const packetData = packet.data;\n  const pack = packet;\n  pack.data = _deconstructPacket(packetData, buffers);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {\n    packet: pack,\n    buffers: buffers\n  };\n}\nfunction _deconstructPacket(data, buffers) {\n  if (!data) return data;\n  if ((0,_is_binary_js__WEBPACK_IMPORTED_MODULE_0__.isBinary)(data)) {\n    const placeholder = {\n      _placeholder: true,\n      num: buffers.length\n    };\n    buffers.push(data);\n    return placeholder;\n  } else if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0; i < data.length; i++) {\n      newData[i] = _deconstructPacket(data[i], buffers);\n    }\n    return newData;\n  } else if (typeof data === \"object\" && !(data instanceof Date)) {\n    const newData = {};\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        newData[key] = _deconstructPacket(data[key], buffers);\n      }\n    }\n    return newData;\n  }\n  return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nfunction reconstructPacket(packet, buffers) {\n  packet.data = _reconstructPacket(packet.data, buffers);\n  delete packet.attachments; // no longer useful\n  return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n  if (!data) return data;\n  if (data && data._placeholder === true) {\n    const isIndexValid = typeof data.num === \"number\" && data.num >= 0 && data.num < buffers.length;\n    if (isIndexValid) {\n      return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n    } else {\n      throw new Error(\"illegal attachments\");\n    }\n  } else if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      data[i] = _reconstructPacket(data[i], buffers);\n    }\n  } else if (typeof data === \"object\") {\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        data[key] = _reconstructPacket(data[key], buffers);\n      }\n    }\n  }\n  return data;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vYmluYXJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsTUFBTSxFQUFFO0VBQ3RDLE1BQU1DLE9BQU8sR0FBRyxFQUFFO0VBQ2xCLE1BQU1DLFVBQVUsR0FBR0YsTUFBTSxDQUFDRyxJQUFJO0VBQzlCLE1BQU1DLElBQUksR0FBR0osTUFBTTtFQUNuQkksSUFBSSxDQUFDRCxJQUFJLEdBQUdFLGtCQUFrQixDQUFDSCxVQUFVLEVBQUVELE9BQU8sQ0FBQztFQUNuREcsSUFBSSxDQUFDRSxXQUFXLEdBQUdMLE9BQU8sQ0FBQ00sTUFBTSxDQUFDLENBQUM7RUFDbkMsT0FBTztJQUFFUCxNQUFNLEVBQUVJLElBQUk7SUFBRUgsT0FBTyxFQUFFQTtFQUFRLENBQUM7QUFDN0M7QUFDQSxTQUFTSSxrQkFBa0JBLENBQUNGLElBQUksRUFBRUYsT0FBTyxFQUFFO0VBQ3ZDLElBQUksQ0FBQ0UsSUFBSSxFQUNMLE9BQU9BLElBQUk7RUFDZixJQUFJTCx1REFBUSxDQUFDSyxJQUFJLENBQUMsRUFBRTtJQUNoQixNQUFNSyxXQUFXLEdBQUc7TUFBRUMsWUFBWSxFQUFFLElBQUk7TUFBRUMsR0FBRyxFQUFFVCxPQUFPLENBQUNNO0lBQU8sQ0FBQztJQUMvRE4sT0FBTyxDQUFDVSxJQUFJLENBQUNSLElBQUksQ0FBQztJQUNsQixPQUFPSyxXQUFXO0VBQ3RCLENBQUMsTUFDSSxJQUFJSSxLQUFLLENBQUNDLE9BQU8sQ0FBQ1YsSUFBSSxDQUFDLEVBQUU7SUFDMUIsTUFBTVcsT0FBTyxHQUFHLElBQUlGLEtBQUssQ0FBQ1QsSUFBSSxDQUFDSSxNQUFNLENBQUM7SUFDdEMsS0FBSyxJQUFJUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdaLElBQUksQ0FBQ0ksTUFBTSxFQUFFUSxDQUFDLEVBQUUsRUFBRTtNQUNsQ0QsT0FBTyxDQUFDQyxDQUFDLENBQUMsR0FBR1Ysa0JBQWtCLENBQUNGLElBQUksQ0FBQ1ksQ0FBQyxDQUFDLEVBQUVkLE9BQU8sQ0FBQztJQUNyRDtJQUNBLE9BQU9hLE9BQU87RUFDbEIsQ0FBQyxNQUNJLElBQUksT0FBT1gsSUFBSSxLQUFLLFFBQVEsSUFBSSxFQUFFQSxJQUFJLFlBQVlhLElBQUksQ0FBQyxFQUFFO0lBQzFELE1BQU1GLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDbEIsS0FBSyxNQUFNRyxHQUFHLElBQUlkLElBQUksRUFBRTtNQUNwQixJQUFJZSxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNsQixJQUFJLEVBQUVjLEdBQUcsQ0FBQyxFQUFFO1FBQ2pESCxPQUFPLENBQUNHLEdBQUcsQ0FBQyxHQUFHWixrQkFBa0IsQ0FBQ0YsSUFBSSxDQUFDYyxHQUFHLENBQUMsRUFBRWhCLE9BQU8sQ0FBQztNQUN6RDtJQUNKO0lBQ0EsT0FBT2EsT0FBTztFQUNsQjtFQUNBLE9BQU9YLElBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTbUIsaUJBQWlCQSxDQUFDdEIsTUFBTSxFQUFFQyxPQUFPLEVBQUU7RUFDL0NELE1BQU0sQ0FBQ0csSUFBSSxHQUFHb0Isa0JBQWtCLENBQUN2QixNQUFNLENBQUNHLElBQUksRUFBRUYsT0FBTyxDQUFDO0VBQ3RELE9BQU9ELE1BQU0sQ0FBQ00sV0FBVyxDQUFDLENBQUM7RUFDM0IsT0FBT04sTUFBTTtBQUNqQjtBQUNBLFNBQVN1QixrQkFBa0JBLENBQUNwQixJQUFJLEVBQUVGLE9BQU8sRUFBRTtFQUN2QyxJQUFJLENBQUNFLElBQUksRUFDTCxPQUFPQSxJQUFJO0VBQ2YsSUFBSUEsSUFBSSxJQUFJQSxJQUFJLENBQUNNLFlBQVksS0FBSyxJQUFJLEVBQUU7SUFDcEMsTUFBTWUsWUFBWSxHQUFHLE9BQU9yQixJQUFJLENBQUNPLEdBQUcsS0FBSyxRQUFRLElBQzdDUCxJQUFJLENBQUNPLEdBQUcsSUFBSSxDQUFDLElBQ2JQLElBQUksQ0FBQ08sR0FBRyxHQUFHVCxPQUFPLENBQUNNLE1BQU07SUFDN0IsSUFBSWlCLFlBQVksRUFBRTtNQUNkLE9BQU92QixPQUFPLENBQUNFLElBQUksQ0FBQ08sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDLE1BQ0k7TUFDRCxNQUFNLElBQUllLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztJQUMxQztFQUNKLENBQUMsTUFDSSxJQUFJYixLQUFLLENBQUNDLE9BQU8sQ0FBQ1YsSUFBSSxDQUFDLEVBQUU7SUFDMUIsS0FBSyxJQUFJWSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdaLElBQUksQ0FBQ0ksTUFBTSxFQUFFUSxDQUFDLEVBQUUsRUFBRTtNQUNsQ1osSUFBSSxDQUFDWSxDQUFDLENBQUMsR0FBR1Esa0JBQWtCLENBQUNwQixJQUFJLENBQUNZLENBQUMsQ0FBQyxFQUFFZCxPQUFPLENBQUM7SUFDbEQ7RUFDSixDQUFDLE1BQ0ksSUFBSSxPQUFPRSxJQUFJLEtBQUssUUFBUSxFQUFFO0lBQy9CLEtBQUssTUFBTWMsR0FBRyxJQUFJZCxJQUFJLEVBQUU7TUFDcEIsSUFBSWUsTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDbEIsSUFBSSxFQUFFYyxHQUFHLENBQUMsRUFBRTtRQUNqRGQsSUFBSSxDQUFDYyxHQUFHLENBQUMsR0FBR00sa0JBQWtCLENBQUNwQixJQUFJLENBQUNjLEdBQUcsQ0FBQyxFQUFFaEIsT0FBTyxDQUFDO01BQ3REO0lBQ0o7RUFDSjtFQUNBLE9BQU9FLElBQUk7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vYmluYXJ5LmpzPzk1OWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCaW5hcnkgfSBmcm9tIFwiLi9pcy1iaW5hcnkuanNcIjtcbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgfCBCbG9iIHwgRmlsZSBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0KSB7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgIGNvbnN0IHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgICBjb25zdCBwYWNrID0gcGFja2V0O1xuICAgIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICAgIHJldHVybiB7IHBhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVycyB9O1xufVxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChpc0JpbmFyeShkYXRhKSkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvbnN0cnVjdFBhY2tldChwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gICAgZGVsZXRlIHBhY2tldC5hdHRhY2htZW50czsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICAgIHJldHVybiBwYWNrZXQ7XG59XG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgaXNJbmRleFZhbGlkID0gdHlwZW9mIGRhdGEubnVtID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgICBkYXRhLm51bSA+PSAwICYmXG4gICAgICAgICAgICBkYXRhLm51bSA8IGJ1ZmZlcnMubGVuZ3RoO1xuICAgICAgICBpZiAoaXNJbmRleFZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBhdHRhY2htZW50c1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbiJdLCJuYW1lcyI6WyJpc0JpbmFyeSIsImRlY29uc3RydWN0UGFja2V0IiwicGFja2V0IiwiYnVmZmVycyIsInBhY2tldERhdGEiLCJkYXRhIiwicGFjayIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImF0dGFjaG1lbnRzIiwibGVuZ3RoIiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJudW0iLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwibmV3RGF0YSIsImkiLCJEYXRlIiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJpc0luZGV4VmFsaWQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/socket.io-parser/build/esm/binary.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-parser/build/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/socket.io-parser/build/esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoder: function() { return /* binding */ Decoder; },\n/* harmony export */   Encoder: function() { return /* binding */ Encoder; },\n/* harmony export */   PacketType: function() { return /* binding */ PacketType; },\n/* harmony export */   protocol: function() { return /* binding */ protocol; }\n/* harmony export */ });\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @socket.io/component-emitter */ \"./node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var _binary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binary.js */ \"./node_modules/socket.io-parser/build/esm/binary.js\");\n/* harmony import */ var _is_binary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is-binary.js */ \"./node_modules/socket.io-parser/build/esm/is-binary.js\");\n\n\n\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nconst protocol = 5;\nvar PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n  /**\n   * Encoder constructor\n   *\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\n   */\n  constructor(replacer) {\n    this.replacer = replacer;\n  }\n  /**\n   * Encode a packet as a single string if non-binary, or as a\n   * buffer sequence, depending on packet type.\n   *\n   * @param {Object} obj - packet object\n   */\n  encode(obj) {\n    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n      if ((0,_is_binary_js__WEBPACK_IMPORTED_MODULE_2__.hasBinary)(obj)) {\n        return this.encodeAsBinary({\n          type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n          nsp: obj.nsp,\n          data: obj.data,\n          id: obj.id\n        });\n      }\n    }\n    return [this.encodeAsString(obj)];\n  }\n  /**\n   * Encode packet as string.\n   */\n  encodeAsString(obj) {\n    // first is type\n    let str = \"\" + obj.type;\n    // attachments if we have them\n    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n      str += obj.attachments + \"-\";\n    }\n    // if we have a namespace other than `/`\n    // we append it followed by a comma `,`\n    if (obj.nsp && \"/\" !== obj.nsp) {\n      str += obj.nsp + \",\";\n    }\n    // immediately followed by the id\n    if (null != obj.id) {\n      str += obj.id;\n    }\n    // json data\n    if (null != obj.data) {\n      str += JSON.stringify(obj.data, this.replacer);\n    }\n    return str;\n  }\n  /**\n   * Encode packet as 'buffer sequence' by removing blobs, and\n   * deconstructing packet into object with placeholders and\n   * a list of buffers.\n   */\n  encodeAsBinary(obj) {\n    const deconstruction = (0,_binary_js__WEBPACK_IMPORTED_MODULE_1__.deconstructPacket)(obj);\n    const pack = this.encodeAsString(deconstruction.packet);\n    const buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n    return buffers; // write all the buffers\n  }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_0__.Emitter {\n  /**\n   * Decoder constructor\n   *\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\n   */\n  constructor(reviver) {\n    super();\n    this.reviver = reviver;\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n  add(obj) {\n    let packet;\n    if (typeof obj === \"string\") {\n      if (this.reconstructor) {\n        throw new Error(\"got plaintext data when reconstructing a packet\");\n      }\n      packet = this.decodeString(obj);\n      const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n      if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n        packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n        // binary packet's json\n        this.reconstructor = new BinaryReconstructor(packet);\n        // no attachments, labeled binary but no binary data to follow\n        if (packet.attachments === 0) {\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else {\n        // non-binary full packet\n        super.emitReserved(\"decoded\", packet);\n      }\n    } else if ((0,_is_binary_js__WEBPACK_IMPORTED_MODULE_2__.isBinary)(obj) || obj.base64) {\n      // raw binary data\n      if (!this.reconstructor) {\n        throw new Error(\"got binary data when not reconstructing a packet\");\n      } else {\n        packet = this.reconstructor.takeBinaryData(obj);\n        if (packet) {\n          // received final buffer\n          this.reconstructor = null;\n          super.emitReserved(\"decoded\", packet);\n        }\n      }\n    } else {\n      throw new Error(\"Unknown type: \" + obj);\n    }\n  }\n  /**\n   * Decode a packet String (JSON data)\n   *\n   * @param {String} str\n   * @return {Object} packet\n   */\n  decodeString(str) {\n    let i = 0;\n    // look up type\n    const p = {\n      type: Number(str.charAt(0))\n    };\n    if (PacketType[p.type] === undefined) {\n      throw new Error(\"unknown packet type \" + p.type);\n    }\n    // look up attachments if type binary\n    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n      const start = i + 1;\n      while (str.charAt(++i) !== \"-\" && i != str.length) {}\n      const buf = str.substring(start, i);\n      if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n        throw new Error(\"Illegal attachments\");\n      }\n      p.attachments = Number(buf);\n    }\n    // look up namespace (if any)\n    if (\"/\" === str.charAt(i + 1)) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (\",\" === c) break;\n        if (i === str.length) break;\n      }\n      p.nsp = str.substring(start, i);\n    } else {\n      p.nsp = \"/\";\n    }\n    // look up id\n    const next = str.charAt(i + 1);\n    if (\"\" !== next && Number(next) == next) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (null == c || Number(c) != c) {\n          --i;\n          break;\n        }\n        if (i === str.length) break;\n      }\n      p.id = Number(str.substring(start, i + 1));\n    }\n    // look up json data\n    if (str.charAt(++i)) {\n      const payload = this.tryParse(str.substr(i));\n      if (Decoder.isPayloadValid(p.type, payload)) {\n        p.data = payload;\n      } else {\n        throw new Error(\"invalid payload\");\n      }\n    }\n    return p;\n  }\n  tryParse(str) {\n    try {\n      return JSON.parse(str, this.reviver);\n    } catch (e) {\n      return false;\n    }\n  }\n  static isPayloadValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return isObject(payload);\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || isObject(payload);\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        return Array.isArray(payload);\n    }\n  }\n  /**\n   * Deallocates a parser's resources\n   */\n  destroy() {\n    if (this.reconstructor) {\n      this.reconstructor.finishedReconstruction();\n      this.reconstructor = null;\n    }\n  }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n  constructor(packet) {\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n  takeBinaryData(binData) {\n    this.buffers.push(binData);\n    if (this.buffers.length === this.reconPack.attachments) {\n      // done with buffer list\n      const packet = (0,_binary_js__WEBPACK_IMPORTED_MODULE_1__.reconstructPacket)(this.reconPack, this.buffers);\n      this.finishedReconstruction();\n      return packet;\n    }\n    return null;\n  }\n  /**\n   * Cleans up binary packet reconstruction variables.\n   */\n  finishedReconstruction() {\n    this.reconPack = null;\n    this.buffers = [];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/socket.io-parser/build/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/socket.io-parser/build/esm/is-binary.js":
/*!**************************************************************!*\
  !*** ./node_modules/socket.io-parser/build/esm/is-binary.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasBinary: function() { return /* binding */ hasBinary; },\n/* harmony export */   isBinary: function() { return /* binding */ isBinary; }\n/* harmony export */ });\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = obj => {\n  return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && toString.call(Blob) === \"[object BlobConstructor]\";\nconst withNativeFile = typeof File === \"function\" || typeof File !== \"undefined\" && toString.call(File) === \"[object FileConstructor]\";\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nfunction isBinary(obj) {\n  return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;\n}\nfunction hasBinary(obj, toJSON) {\n  if (!obj || typeof obj !== \"object\") {\n    return false;\n  }\n  if (Array.isArray(obj)) {\n    for (let i = 0, l = obj.length; i < l; i++) {\n      if (hasBinary(obj[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  if (isBinary(obj)) {\n    return true;\n  }\n  if (obj.toJSON && typeof obj.toJSON === \"function\" && arguments.length === 1) {\n    return hasBinary(obj.toJSON(), true);\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n      return true;\n    }\n  }\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vaXMtYmluYXJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEscUJBQXFCLEdBQUcsT0FBT0MsV0FBVyxLQUFLLFVBQVU7QUFDL0QsTUFBTUMsTUFBTSxHQUFJQyxHQUFHLElBQUs7RUFDcEIsT0FBTyxPQUFPRixXQUFXLENBQUNDLE1BQU0sS0FBSyxVQUFVLEdBQ3pDRCxXQUFXLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEdBQ3ZCQSxHQUFHLENBQUNDLE1BQU0sWUFBWUgsV0FBVztBQUMzQyxDQUFDO0FBQ0QsTUFBTUksUUFBUSxHQUFHQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0YsUUFBUTtBQUMxQyxNQUFNRyxjQUFjLEdBQUcsT0FBT0MsSUFBSSxLQUFLLFVBQVUsSUFDNUMsT0FBT0EsSUFBSSxLQUFLLFdBQVcsSUFDeEJKLFFBQVEsQ0FBQ0ssSUFBSSxDQUFDRCxJQUFJLENBQUMsS0FBSywwQkFBMkI7QUFDM0QsTUFBTUUsY0FBYyxHQUFHLE9BQU9DLElBQUksS0FBSyxVQUFVLElBQzVDLE9BQU9BLElBQUksS0FBSyxXQUFXLElBQ3hCUCxRQUFRLENBQUNLLElBQUksQ0FBQ0UsSUFBSSxDQUFDLEtBQUssMEJBQTJCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxRQUFRQSxDQUFDVixHQUFHLEVBQUU7RUFDMUIsT0FBU0gscUJBQXFCLEtBQUtHLEdBQUcsWUFBWUYsV0FBVyxJQUFJQyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxDQUFDLElBQ3hFSyxjQUFjLElBQUlMLEdBQUcsWUFBWU0sSUFBSyxJQUN0Q0UsY0FBYyxJQUFJUixHQUFHLFlBQVlTLElBQUs7QUFDL0M7QUFDTyxTQUFTRSxTQUFTQSxDQUFDWCxHQUFHLEVBQUVZLE1BQU0sRUFBRTtFQUNuQyxJQUFJLENBQUNaLEdBQUcsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO0lBQ2pDLE9BQU8sS0FBSztFQUNoQjtFQUNBLElBQUlhLEtBQUssQ0FBQ0MsT0FBTyxDQUFDZCxHQUFHLENBQUMsRUFBRTtJQUNwQixLQUFLLElBQUllLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR2hCLEdBQUcsQ0FBQ2lCLE1BQU0sRUFBRUYsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ3hDLElBQUlKLFNBQVMsQ0FBQ1gsR0FBRyxDQUFDZSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ25CLE9BQU8sSUFBSTtNQUNmO0lBQ0o7SUFDQSxPQUFPLEtBQUs7RUFDaEI7RUFDQSxJQUFJTCxRQUFRLENBQUNWLEdBQUcsQ0FBQyxFQUFFO0lBQ2YsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxJQUFJQSxHQUFHLENBQUNZLE1BQU0sSUFDVixPQUFPWixHQUFHLENBQUNZLE1BQU0sS0FBSyxVQUFVLElBQ2hDTSxTQUFTLENBQUNELE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDeEIsT0FBT04sU0FBUyxDQUFDWCxHQUFHLENBQUNZLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO0VBQ3hDO0VBQ0EsS0FBSyxNQUFNTyxHQUFHLElBQUluQixHQUFHLEVBQUU7SUFDbkIsSUFBSUcsTUFBTSxDQUFDQyxTQUFTLENBQUNnQixjQUFjLENBQUNiLElBQUksQ0FBQ1AsR0FBRyxFQUFFbUIsR0FBRyxDQUFDLElBQUlSLFNBQVMsQ0FBQ1gsR0FBRyxDQUFDbUIsR0FBRyxDQUFDLENBQUMsRUFBRTtNQUN2RSxPQUFPLElBQUk7SUFDZjtFQUNKO0VBQ0EsT0FBTyxLQUFLO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2VzbS9pcy1iaW5hcnkuanM/MzBkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzVmlldyA9IChvYmopID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICAgICAgOiBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59O1xuY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBGaWxlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09IFwiW29iamVjdCBGaWxlQ29uc3RydWN0b3JdXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgQnVmZmVyLCBhbiBBcnJheUJ1ZmZlciwgYSBCbG9iIG9yIGEgRmlsZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gICAgcmV0dXJuICgod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0JpbmFyeShvYmosIHRvSlNPTikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNCaW5hcnkob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9iai50b0pTT04gJiZcbiAgICAgICAgdHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6WyJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsImJ1ZmZlciIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwid2l0aE5hdGl2ZUJsb2IiLCJCbG9iIiwiY2FsbCIsIndpdGhOYXRpdmVGaWxlIiwiRmlsZSIsImlzQmluYXJ5IiwiaGFzQmluYXJ5IiwidG9KU09OIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImwiLCJsZW5ndGgiLCJhcmd1bWVudHMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/socket.io-parser/build/esm/is-binary.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmalja%5CDesktop%5Cprojects%5Ccollaborative-texteditor%5Cfrontend%5Csrc%5Cpages%5Cindex.tsx&page=%2F!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);